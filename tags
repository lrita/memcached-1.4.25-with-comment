!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ACLOCAL	doc/Makefile	/^ACLOCAL = ${SHELL} \/home\/dormando\/d\/p\/danga\/git\/memcached\/missing aclocal-1.14$/;"	kind:macro
ACLOCAL_M4	doc/Makefile	/^ACLOCAL_M4 = $(top_srcdir)\/aclocal.m4$/;"	kind:macro
ADD_STAT	memcached.h	/^typedef void (*ADD_STAT)(const char *key, const uint16_t klen,$/;"	kind:typedef
AMTAR	doc/Makefile	/^AMTAR = $${TAR-tar}$/;"	kind:macro
AM_DEFAULT_VERBOSITY	doc/Makefile	/^AM_DEFAULT_VERBOSITY = 1$/;"	kind:macro
AM_V_GEN	doc/Makefile	/^AM_V_GEN = $(am__v_GEN_$(V))$/;"	kind:macro
AM_V_P	doc/Makefile	/^AM_V_P = $(am__v_P_$(V))$/;"	kind:macro
AM_V_at	doc/Makefile	/^AM_V_at = $(am__v_at_$(V))$/;"	kind:macro
APPEND_NUM_FMT_STAT	memcached.h	125;"	kind:macro
APPEND_NUM_STAT	memcached.h	131;"	kind:macro
APPEND_STAT	memcached.h	120;"	kind:macro
AUTOCONF	doc/Makefile	/^AUTOCONF = ${SHELL} \/home\/dormando\/d\/p\/danga\/git\/memcached\/missing autoconf$/;"	kind:macro
AUTOHEADER	doc/Makefile	/^AUTOHEADER = ${SHELL} \/home\/dormando\/d\/p\/danga\/git\/memcached\/missing autoheader$/;"	kind:macro
AUTOMAKE	doc/Makefile	/^AUTOMAKE = ${SHELL} \/home\/dormando\/d\/p\/danga\/git\/memcached\/missing automake-1.14$/;"	kind:macro
AWK	doc/Makefile	/^AWK = gawk$/;"	kind:macro
BIG_CONSTANT	murmur3_hash.c	25;"	kind:macro	file:
BIG_CONSTANT	murmur3_hash.c	40;"	kind:macro	file:
BIN_PKT_HDR_WORDS	memcached.h	61;"	kind:macro
BIN_REQ_MAGIC	t/udp.t	/^use constant BIN_REQ_MAGIC    => 0x80;$/;"	kind:constant
BIN_RES_MAGIC	t/udp.t	/^use constant BIN_RES_MAGIC    => 0x81;$/;"	kind:constant
BUILT_SOURCES	doc/Makefile	/^BUILT_SOURCES = $(am__append_1)$/;"	kind:macro
CACHE_H	cache.h	3;"	kind:macro
CC	doc/Makefile	/^CC = gcc -std=gnu99$/;"	kind:macro
CCDEPMODE	doc/Makefile	/^CCDEPMODE = depmode=gcc3$/;"	kind:macro
CFLAGS	doc/Makefile	/^CFLAGS = -g -O2 -pthread -pthread -Wall -Werror -pedantic -Wmissing-prototypes -Wmissing-declarations -Wredundant-decls$/;"	kind:macro
CHUNK_ALIGN_BYTES	memcached.h	82;"	kind:macro
CLEAR_LRU	items.c	27;"	kind:macro	file:
CMD_ADD	t/binary-sasl.t	/^use constant CMD_ADD        => 0x02;$/;"	kind:constant
CMD_ADD	t/binary.t	/^use constant CMD_ADD        => 0x02;$/;"	kind:constant
CMD_ADD	t/udp.t	/^use constant CMD_ADD          => 0x02;$/;"	kind:constant
CMD_ADDQ	t/binary-sasl.t	/^use constant CMD_ADDQ       => 0x12;$/;"	kind:constant
CMD_ADDQ	t/binary.t	/^use constant CMD_ADDQ       => 0x12;$/;"	kind:constant
CMD_APPEND	t/binary-sasl.t	/^use constant CMD_APPEND     => 0x0E;$/;"	kind:constant
CMD_APPEND	t/binary.t	/^use constant CMD_APPEND     => 0x0E;$/;"	kind:constant
CMD_APPEND	t/udp.t	/^use constant CMD_APPEND       => 0x0E;$/;"	kind:constant
CMD_APPENDQ	t/binary-sasl.t	/^use constant CMD_APPENDQ    => 0x19;$/;"	kind:constant
CMD_APPENDQ	t/binary.t	/^use constant CMD_APPENDQ    => 0x19;$/;"	kind:constant
CMD_DECR	t/binary-sasl.t	/^use constant CMD_DECR       => 0x06;$/;"	kind:constant
CMD_DECR	t/binary.t	/^use constant CMD_DECR       => 0x06;$/;"	kind:constant
CMD_DECR	t/udp.t	/^use constant CMD_DECR         => 0x06;$/;"	kind:constant
CMD_DECREMENTQ	t/binary-sasl.t	/^use constant CMD_DECREMENTQ => 0x16;$/;"	kind:constant
CMD_DECREMENTQ	t/binary.t	/^use constant CMD_DECREMENTQ => 0x16;$/;"	kind:constant
CMD_DELETE	t/binary-sasl.t	/^use constant CMD_DELETE     => 0x04;$/;"	kind:constant
CMD_DELETE	t/binary.t	/^use constant CMD_DELETE     => 0x04;$/;"	kind:constant
CMD_DELETE	t/udp.t	/^use constant CMD_DELETE       => 0x04;$/;"	kind:constant
CMD_DELETEQ	t/binary-sasl.t	/^use constant CMD_DELETEQ    => 0x14;$/;"	kind:constant
CMD_DELETEQ	t/binary.t	/^use constant CMD_DELETEQ    => 0x14;$/;"	kind:constant
CMD_FLUSH	t/binary-sasl.t	/^use constant CMD_FLUSH      => 0x08;$/;"	kind:constant
CMD_FLUSH	t/binary.t	/^use constant CMD_FLUSH      => 0x08;$/;"	kind:constant
CMD_FLUSHQ	t/binary-sasl.t	/^use constant CMD_FLUSHQ     => 0x18;$/;"	kind:constant
CMD_FLUSHQ	t/binary.t	/^use constant CMD_FLUSHQ     => 0x18;$/;"	kind:constant
CMD_GAT	t/binary.t	/^use constant CMD_GAT        => 0x1D;$/;"	kind:constant
CMD_GATK	t/binary.t	/^use constant CMD_GATK       => 0x23;$/;"	kind:constant
CMD_GATKQ	t/binary.t	/^use constant CMD_GATKQ      => 0x24;$/;"	kind:constant
CMD_GATQ	t/binary.t	/^use constant CMD_GATQ       => 0x1E;$/;"	kind:constant
CMD_GET	t/binary-sasl.t	/^use constant CMD_GET        => 0x00;$/;"	kind:constant
CMD_GET	t/binary.t	/^use constant CMD_GET        => 0x00;$/;"	kind:constant
CMD_GET	t/udp.t	/^use constant CMD_GET          => 0x00;$/;"	kind:constant
CMD_GETK	t/binary-sasl.t	/^use constant CMD_GETK       => 0x0C;$/;"	kind:constant
CMD_GETK	t/binary.t	/^use constant CMD_GETK       => 0x0C;$/;"	kind:constant
CMD_GETKQ	t/binary-sasl.t	/^use constant CMD_GETKQ      => 0x0D;$/;"	kind:constant
CMD_GETKQ	t/binary.t	/^use constant CMD_GETKQ      => 0x0D;$/;"	kind:constant
CMD_GETQ	t/binary-sasl.t	/^use constant CMD_GETQ       => 0x09;$/;"	kind:constant
CMD_GETQ	t/binary.t	/^use constant CMD_GETQ       => 0x09;$/;"	kind:constant
CMD_INCR	t/binary-sasl.t	/^use constant CMD_INCR       => 0x05;$/;"	kind:constant
CMD_INCR	t/binary.t	/^use constant CMD_INCR       => 0x05;$/;"	kind:constant
CMD_INCR	t/udp.t	/^use constant CMD_INCR         => 0x05;$/;"	kind:constant
CMD_INCREMENTQ	t/binary-sasl.t	/^use constant CMD_INCREMENTQ => 0x15;$/;"	kind:constant
CMD_INCREMENTQ	t/binary.t	/^use constant CMD_INCREMENTQ => 0x15;$/;"	kind:constant
CMD_NOOP	t/binary-sasl.t	/^use constant CMD_NOOP       => 0x0A;$/;"	kind:constant
CMD_NOOP	t/binary.t	/^use constant CMD_NOOP       => 0x0A;$/;"	kind:constant
CMD_PREPEND	t/binary-sasl.t	/^use constant CMD_PREPEND    => 0x0F;$/;"	kind:constant
CMD_PREPEND	t/binary.t	/^use constant CMD_PREPEND    => 0x0F;$/;"	kind:constant
CMD_PREPEND	t/udp.t	/^use constant CMD_PREPEND      => 0x0F;$/;"	kind:constant
CMD_PREPENDQ	t/binary-sasl.t	/^use constant CMD_PREPENDQ   => 0x1A;$/;"	kind:constant
CMD_PREPENDQ	t/binary.t	/^use constant CMD_PREPENDQ   => 0x1A;$/;"	kind:constant
CMD_QUIT	t/binary-sasl.t	/^use constant CMD_QUIT       => 0x07;$/;"	kind:constant
CMD_QUIT	t/binary.t	/^use constant CMD_QUIT       => 0x07;$/;"	kind:constant
CMD_QUITQ	t/binary-sasl.t	/^use constant CMD_QUITQ      => 0x17;$/;"	kind:constant
CMD_QUITQ	t/binary.t	/^use constant CMD_QUITQ      => 0x17;$/;"	kind:constant
CMD_REPLACE	t/binary-sasl.t	/^use constant CMD_REPLACE    => 0x03;$/;"	kind:constant
CMD_REPLACE	t/binary.t	/^use constant CMD_REPLACE    => 0x03;$/;"	kind:constant
CMD_REPLACE	t/udp.t	/^use constant CMD_REPLACE      => 0x03;$/;"	kind:constant
CMD_REPLACEQ	t/binary-sasl.t	/^use constant CMD_REPLACEQ   => 0x13;$/;"	kind:constant
CMD_REPLACEQ	t/binary.t	/^use constant CMD_REPLACEQ   => 0x13;$/;"	kind:constant
CMD_SASL_AUTH	t/binary-sasl.t	/^use constant CMD_SASL_AUTH          => 0x21;$/;"	kind:constant
CMD_SASL_LIST_MECHS	t/binary-sasl.t	/^use constant CMD_SASL_LIST_MECHS    => 0x20;$/;"	kind:constant
CMD_SASL_STEP	t/binary-sasl.t	/^use constant CMD_SASL_STEP          => 0x22;$/;"	kind:constant
CMD_SET	t/binary-sasl.t	/^use constant CMD_SET        => 0x01;$/;"	kind:constant
CMD_SET	t/binary.t	/^use constant CMD_SET        => 0x01;$/;"	kind:constant
CMD_SET	t/udp.t	/^use constant CMD_SET          => 0x01;$/;"	kind:constant
CMD_SETQ	t/binary-sasl.t	/^use constant CMD_SETQ       => 0x11;$/;"	kind:constant
CMD_SETQ	t/binary.t	/^use constant CMD_SETQ       => 0x11;$/;"	kind:constant
CMD_STAT	t/binary-sasl.t	/^use constant CMD_STAT       => 0x10;$/;"	kind:constant
CMD_STAT	t/binary.t	/^use constant CMD_STAT       => 0x10;$/;"	kind:constant
CMD_TOUCH	t/binary.t	/^use constant CMD_TOUCH      => 0x1C;$/;"	kind:constant
CMD_VERSION	t/binary-sasl.t	/^use constant CMD_VERSION    => 0x0B;$/;"	kind:constant
CMD_VERSION	t/binary.t	/^use constant CMD_VERSION    => 0x0B;$/;"	kind:constant
COLD_LRU	items.c	23;"	kind:macro	file:
COMMAND_TOKEN	memcached.c	2426;"	kind:macro	file:
CONFIG_CLEAN_FILES	doc/Makefile	/^CONFIG_CLEAN_FILES =$/;"	kind:macro
CONFIG_CLEAN_VPATH_FILES	doc/Makefile	/^CONFIG_CLEAN_VPATH_FILES =$/;"	kind:macro
CONFIG_HEADER	doc/Makefile	/^CONFIG_HEADER = $(top_builddir)\/config.h$/;"	kind:macro
CPP	doc/Makefile	/^CPP = gcc -E$/;"	kind:macro
CPPFLAGS	doc/Makefile	/^CPPFLAGS = $/;"	kind:macro
CQ	thread.c	/^typedef struct conn_queue CQ;$/;"	kind:typedef	typeref:struct:conn_queue	file:
CQ_ITEM	thread.c	/^typedef struct conn_queue_item CQ_ITEM;$/;"	kind:typedef	typeref:struct:conn_queue_item	file:
CRAWLER_BADCLASS	items.h	/^    CRAWLER_OK=0, CRAWLER_RUNNING, CRAWLER_BADCLASS, CRAWLER_NOTSTARTED$/;"	kind:enumerator	enum:crawler_result_type
CRAWLER_NOTSTARTED	items.h	/^    CRAWLER_OK=0, CRAWLER_RUNNING, CRAWLER_BADCLASS, CRAWLER_NOTSTARTED$/;"	kind:enumerator	enum:crawler_result_type
CRAWLER_OK	items.h	/^    CRAWLER_OK=0, CRAWLER_RUNNING, CRAWLER_BADCLASS, CRAWLER_NOTSTARTED$/;"	kind:enumerator	enum:crawler_result_type
CRAWLER_RUNNING	items.h	/^    CRAWLER_OK=0, CRAWLER_RUNNING, CRAWLER_BADCLASS, CRAWLER_NOTSTARTED$/;"	kind:enumerator	enum:crawler_result_type
CYGPATH_W	doc/Makefile	/^CYGPATH_W = echo$/;"	kind:macro
DATA_BUFFER_SIZE	memcached.h	32;"	kind:macro
DEBUG_REFCNT	items.c	132;"	kind:macro	file:
DEFAULT_HASH_BULK_MOVE	assoc.c	207;"	kind:macro	file:
DEFAULT_SLAB_BULK_CHECK	slabs.c	495;"	kind:macro	file:
DEFS	doc/Makefile	/^DEFS = -DHAVE_CONFIG_H$/;"	kind:macro
DELTA_ITEM_CAS_MISMATCH	memcached.h	/^    OK, NON_NUMERIC, EOM, DELTA_ITEM_NOT_FOUND, DELTA_ITEM_CAS_MISMATCH$/;"	kind:enumerator	enum:delta_result_type
DELTA_ITEM_NOT_FOUND	memcached.h	/^    OK, NON_NUMERIC, EOM, DELTA_ITEM_NOT_FOUND, DELTA_ITEM_CAS_MISMATCH$/;"	kind:enumerator	enum:delta_result_type
DEPDIR	doc/Makefile	/^DEPDIR = .deps$/;"	kind:macro
DESTROY	t/lib/MemcachedTest.pm	/^sub DESTROY {$/;"	kind:subroutine
DISTFILES	doc/Makefile	/^DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)$/;"	kind:macro
DIST_COMMON	doc/Makefile	/^DIST_COMMON = $(srcdir)\/Makefile.in $(srcdir)\/Makefile.am$/;"	kind:macro
DIST_SOURCES	doc/Makefile	/^DIST_SOURCES =$/;"	kind:macro
DTRACE	doc/Makefile	/^DTRACE = $/;"	kind:macro
DTRACEFLAGS	doc/Makefile	/^DTRACEFLAGS = $/;"	kind:macro
ECHO_C	doc/Makefile	/^ECHO_C = $/;"	kind:macro
ECHO_N	doc/Makefile	/^ECHO_N = -n$/;"	kind:macro
ECHO_T	doc/Makefile	/^ECHO_T = $/;"	kind:macro
EGREP	doc/Makefile	/^EGREP = \/bin\/grep -E$/;"	kind:macro
ENABLE_SASL	doc/Makefile	/^ENABLE_SASL = $/;"	kind:macro
ENTRY_EXISTS	t/udp.t	/^use constant ENTRY_EXISTS     => 0;$/;"	kind:constant
ENTRY_MISSING	t/udp.t	/^use constant ENTRY_MISSING    => 1;$/;"	kind:constant
EOM	memcached.h	/^    OK, NON_NUMERIC, EOM, DELTA_ITEM_NOT_FOUND, DELTA_ITEM_CAS_MISMATCH$/;"	kind:enumerator	enum:delta_result_type
ERR_AUTH_ERROR	t/binary-sasl.t	/^use constant ERR_AUTH_ERROR   => 0x20;$/;"	kind:constant
ERR_DELTA_BADVAL	t/binary-sasl.t	/^use constant ERR_DELTA_BADVAL => 0x6;$/;"	kind:constant
ERR_DELTA_BADVAL	t/binary.t	/^use constant ERR_DELTA_BADVAL => 0x6;$/;"	kind:constant
ERR_EINVAL	t/binary-sasl.t	/^use constant ERR_EINVAL       => 0x4;$/;"	kind:constant
ERR_EINVAL	t/binary.t	/^use constant ERR_EINVAL       => 0x4;$/;"	kind:constant
ERR_EXISTS	t/binary-sasl.t	/^use constant ERR_EXISTS       => 0x2;$/;"	kind:constant
ERR_EXISTS	t/binary.t	/^use constant ERR_EXISTS       => 0x2;$/;"	kind:constant
ERR_NOT_FOUND	t/binary-sasl.t	/^use constant ERR_NOT_FOUND    => 0x1;$/;"	kind:constant
ERR_NOT_FOUND	t/binary.t	/^use constant ERR_NOT_FOUND    => 0x1;$/;"	kind:constant
ERR_NOT_STORED	t/binary-sasl.t	/^use constant ERR_NOT_STORED   => 0x5;$/;"	kind:constant
ERR_NOT_STORED	t/binary.t	/^use constant ERR_NOT_STORED   => 0x5;$/;"	kind:constant
ERR_TOO_BIG	t/binary-sasl.t	/^use constant ERR_TOO_BIG      => 0x3;$/;"	kind:constant
ERR_TOO_BIG	t/binary.t	/^use constant ERR_TOO_BIG      => 0x3;$/;"	kind:constant
ERR_UNKNOWN_CMD	t/binary-sasl.t	/^use constant ERR_UNKNOWN_CMD  => 0x81;$/;"	kind:constant
ERR_UNKNOWN_CMD	t/binary.t	/^use constant ERR_UNKNOWN_CMD  => 0x81;$/;"	kind:constant
EXEEXT	doc/Makefile	/^EXEEXT = $/;"	kind:macro
EXISTS	memcached.h	/^    NOT_STORED=0, STORED, EXISTS, NOT_FOUND$/;"	kind:enumerator	enum:store_item_type
EXTRA_DIST	doc/Makefile	/^EXTRA_DIST = *.txt$/;"	kind:macro
FORCE_INLINE	murmur3_hash.c	19;"	kind:macro	file:
FORCE_INLINE	murmur3_hash.c	31;"	kind:macro	file:
GREP	doc/Makefile	/^GREP = \/bin\/grep$/;"	kind:macro
HASHPOWER_DEFAULT	memcached.h	64;"	kind:macro
HASH_BIG_ENDIAN	jenkins_hash.c	22;"	kind:macro	file:
HASH_BIG_ENDIAN	jenkins_hash.c	26;"	kind:macro	file:
HASH_BIG_ENDIAN	jenkins_hash.c	29;"	kind:macro	file:
HASH_H	hash.h	2;"	kind:macro
HASH_LITTLE_ENDIAN	jenkins_hash.c	21;"	kind:macro	file:
HASH_LITTLE_ENDIAN	jenkins_hash.c	25;"	kind:macro	file:
HASH_LITTLE_ENDIAN	jenkins_hash.c	28;"	kind:macro	file:
HOT_LRU	items.c	21;"	kind:macro	file:
INCRDECR_PKT_FMT	t/binary-sasl.t	/^use constant INCRDECR_PKT_FMT => "NNNNN";$/;"	kind:constant
INCRDECR_PKT_FMT	t/binary.t	/^use constant INCRDECR_PKT_FMT => "NNNNN";$/;"	kind:constant
INCRDECR_PKT_FMT	t/udp.t	/^use constant INCRDECR_PKT_FMT => "NNNNN";$/;"	kind:constant
INCR_MAX_STORAGE_LEN	memcached.h	30;"	kind:macro
INSTALL	doc/Makefile	/^INSTALL = \/usr\/bin\/install -c$/;"	kind:macro
INSTALL_DATA	doc/Makefile	/^INSTALL_DATA = ${INSTALL} -m 644$/;"	kind:macro
INSTALL_HEADER	doc/Makefile	/^INSTALL_HEADER = $(INSTALL_DATA)$/;"	kind:macro
INSTALL_PROGRAM	doc/Makefile	/^INSTALL_PROGRAM = ${INSTALL}$/;"	kind:macro
INSTALL_SCRIPT	doc/Makefile	/^INSTALL_SCRIPT = ${INSTALL}$/;"	kind:macro
INSTALL_STRIP_PROGRAM	doc/Makefile	/^INSTALL_STRIP_PROGRAM = $(install_sh) -c -s$/;"	kind:macro
IOV_LIST_HIGHWAT	memcached.h	56;"	kind:macro
IOV_LIST_INITIAL	memcached.h	48;"	kind:macro
IOV_MAX	memcached.c	54;"	kind:macro	file:
IS_ASCII	t/udp.t	/^use constant IS_ASCII         => 0;$/;"	kind:constant
IS_BINARY	t/udp.t	/^use constant IS_BINARY        => 1;$/;"	kind:constant
IS_UDP	memcached.h	202;"	kind:macro
ITEMS_PER_ALLOC	thread.c	17;"	kind:macro	file:
ITEM_ACTIVE	memcached.h	362;"	kind:macro
ITEM_CAS	memcached.h	354;"	kind:macro
ITEM_FETCHED	memcached.h	360;"	kind:macro
ITEM_LINKED	memcached.h	353;"	kind:macro
ITEM_LIST_HIGHWAT	memcached.h	55;"	kind:macro
ITEM_LIST_INITIAL	memcached.h	42;"	kind:macro
ITEM_SLABBED	memcached.h	357;"	kind:macro
ITEM_UPDATE_INTERVAL	memcached.h	71;"	kind:macro
ITEM_clsid	memcached.h	114;"	kind:macro
ITEM_data	memcached.h	106;"	kind:macro
ITEM_get_cas	memcached.h	91;"	kind:macro
ITEM_key	memcached.h	100;"	kind:macro
ITEM_ntotal	memcached.h	110;"	kind:macro
ITEM_set_cas	memcached.h	94;"	kind:macro
ITEM_suffix	memcached.h	103;"	kind:macro
ITERATIONS	testapp.c	122;"	kind:macro	file:
ITERATIONS	testapp.c	135;"	kind:macro	file:
JENKINS_HASH	hash.h	/^    JENKINS_HASH=0, MURMUR3_HASH$/;"	kind:enumerator	enum:hashfunc_type
JENKINS_HASH_H	jenkins_hash.h	2;"	kind:macro
KEY_MAX_LENGTH	memcached.h	27;"	kind:macro
KEY_TOKEN	memcached.c	2428;"	kind:macro	file:
LARGEST_ID	items.c	29;"	kind:macro	file:
LDFLAGS	doc/Makefile	/^LDFLAGS = $/;"	kind:macro
LIBEVENT_DISPATCHER_THREAD	memcached.h	/^} LIBEVENT_DISPATCHER_THREAD;$/;"	kind:typedef	typeref:struct:__anon7
LIBEVENT_THREAD	memcached.h	/^} LIBEVENT_THREAD;$/;"	kind:typedef	typeref:struct:__anon6
LIBOBJS	doc/Makefile	/^LIBOBJS = $/;"	kind:macro
LIBS	doc/Makefile	/^LIBS = -levent $/;"	kind:macro
LTLIBOBJS	doc/Makefile	/^LTLIBOBJS = $/;"	kind:macro
MAKEINFO	doc/Makefile	/^MAKEINFO = ${SHELL} \/home\/dormando\/d\/p\/danga\/git\/memcached\/missing makeinfo$/;"	kind:macro
MANS	doc/Makefile	/^MANS = $(man_MANS)$/;"	kind:macro
MAX_ENTRY_LEN	sasl_defs.c	26;"	kind:macro	file:
MAX_LRU_MAINTAINER_SLEEP	items.c	993;"	kind:macro	file:
MAX_MAINTCRAWL_WAIT	items.c	929;"	kind:macro	file:
MAX_NUMBER_OF_SLAB_CLASSES	memcached.h	84;"	kind:macro
MAX_SASL_MECH_LEN	sasl_defs.h	5;"	kind:macro
MAX_SENDBUF_SIZE	memcached.h	36;"	kind:macro
MAX_TOKENS	memcached.c	2430;"	kind:macro	file:
MAX_VERBOSITY_LEVEL	memcached.h	300;"	kind:macro
MC::Client	t/binary-sasl.t	/^package MC::Client;$/;"	kind:package
MC::Client	t/binary.t	/^package MC::Client;$/;"	kind:package
MC::Client::ERR_AUTH_ERROR	t/binary-sasl.t	/^use constant ERR_AUTH_ERROR   => 0x20;$/;"	kind:constant
MC::Client::_append_prepend	t/binary-sasl.t	/^sub _append_prepend {$/;"	kind:subroutine
MC::Client::_append_prepend	t/binary.t	/^sub _append_prepend {$/;"	kind:subroutine
MC::Client::_do_command	t/binary-sasl.t	/^sub _do_command {$/;"	kind:subroutine
MC::Client::_do_command	t/binary.t	/^sub _do_command {$/;"	kind:subroutine
MC::Client::_handle_single_response	t/binary-sasl.t	/^sub _handle_single_response {$/;"	kind:subroutine
MC::Client::_handle_single_response	t/binary.t	/^sub _handle_single_response {$/;"	kind:subroutine
MC::Client::_incrdecr	t/binary-sasl.t	/^sub _incrdecr {$/;"	kind:subroutine
MC::Client::_incrdecr	t/binary.t	/^sub _incrdecr {$/;"	kind:subroutine
MC::Client::_incrdecr_cas	t/binary.t	/^sub _incrdecr_cas {$/;"	kind:subroutine
MC::Client::_incrdecr_header	t/binary-sasl.t	/^sub _incrdecr_header {$/;"	kind:subroutine
MC::Client::_incrdecr_header	t/binary.t	/^sub _incrdecr_header {$/;"	kind:subroutine
MC::Client::add	t/binary-sasl.t	/^sub add {$/;"	kind:subroutine
MC::Client::add	t/binary.t	/^sub add {$/;"	kind:subroutine
MC::Client::authenticate	t/binary-sasl.t	/^sub authenticate {$/;"	kind:subroutine
MC::Client::build_command	t/binary-sasl.t	/^sub build_command {$/;"	kind:subroutine
MC::Client::build_command	t/binary.t	/^sub build_command {$/;"	kind:subroutine
MC::Client::decr	t/binary-sasl.t	/^sub decr {$/;"	kind:subroutine
MC::Client::decr	t/binary.t	/^sub decr {$/;"	kind:subroutine
MC::Client::delete	t/binary-sasl.t	/^sub delete {$/;"	kind:subroutine
MC::Client::delete	t/binary.t	/^sub delete {$/;"	kind:subroutine
MC::Client::flush	t/binary-sasl.t	/^sub flush {$/;"	kind:subroutine
MC::Client::flush	t/binary.t	/^sub flush {$/;"	kind:subroutine
MC::Client::flush_socket	t/binary-sasl.t	/^sub flush_socket {$/;"	kind:subroutine
MC::Client::flush_socket	t/binary.t	/^sub flush_socket {$/;"	kind:subroutine
MC::Client::gat	t/binary.t	/^sub gat {$/;"	kind:subroutine
MC::Client::get	t/binary-sasl.t	/^sub get {$/;"	kind:subroutine
MC::Client::get	t/binary.t	/^sub get {$/;"	kind:subroutine
MC::Client::get_multi	t/binary-sasl.t	/^sub get_multi {$/;"	kind:subroutine
MC::Client::get_multi	t/binary.t	/^sub get_multi {$/;"	kind:subroutine
MC::Client::incr	t/binary-sasl.t	/^sub incr {$/;"	kind:subroutine
MC::Client::incr	t/binary.t	/^sub incr {$/;"	kind:subroutine
MC::Client::incr_cas	t/binary.t	/^sub incr_cas {$/;"	kind:subroutine
MC::Client::list_mechs	t/binary-sasl.t	/^sub list_mechs {$/;"	kind:subroutine
MC::Client::new	t/binary-sasl.t	/^sub new {$/;"	kind:subroutine
MC::Client::new	t/binary.t	/^sub new {$/;"	kind:subroutine
MC::Client::noop	t/binary-sasl.t	/^sub noop {$/;"	kind:subroutine
MC::Client::noop	t/binary.t	/^sub noop {$/;"	kind:subroutine
MC::Client::replace	t/binary-sasl.t	/^sub replace {$/;"	kind:subroutine
MC::Client::replace	t/binary.t	/^sub replace {$/;"	kind:subroutine
MC::Client::send_command	t/binary-sasl.t	/^sub send_command {$/;"	kind:subroutine
MC::Client::send_command	t/binary.t	/^sub send_command {$/;"	kind:subroutine
MC::Client::send_silent	t/binary-sasl.t	/^sub send_silent {$/;"	kind:subroutine
MC::Client::send_silent	t/binary.t	/^sub send_silent {$/;"	kind:subroutine
MC::Client::set	t/binary-sasl.t	/^sub set {$/;"	kind:subroutine
MC::Client::set	t/binary.t	/^sub set {$/;"	kind:subroutine
MC::Client::silent_incrdecr	t/binary-sasl.t	/^sub silent_incrdecr {$/;"	kind:subroutine
MC::Client::silent_incrdecr	t/binary.t	/^sub silent_incrdecr {$/;"	kind:subroutine
MC::Client::silent_mutation	t/binary-sasl.t	/^sub silent_mutation {$/;"	kind:subroutine
MC::Client::silent_mutation	t/binary.t	/^sub silent_mutation {$/;"	kind:subroutine
MC::Client::stats	t/binary-sasl.t	/^sub stats {$/;"	kind:subroutine
MC::Client::stats	t/binary.t	/^sub stats {$/;"	kind:subroutine
MC::Client::touch	t/binary.t	/^sub touch {$/;"	kind:subroutine
MC::Client::version	t/binary-sasl.t	/^sub version {$/;"	kind:subroutine
MC::Client::version	t/binary.t	/^sub version {$/;"	kind:subroutine
MC::Error	t/binary-sasl.t	/^package MC::Error;$/;"	kind:package
MC::Error	t/binary.t	/^package MC::Error;$/;"	kind:package
MC::Error::ERR_AUTH_ERROR	t/binary-sasl.t	/^use constant ERR_AUTH_ERROR   => 0x20;$/;"	kind:constant
MC::Error::ERR_DELTA_BADVAL	t/binary-sasl.t	/^use constant ERR_DELTA_BADVAL => 0x6;$/;"	kind:constant
MC::Error::ERR_DELTA_BADVAL	t/binary.t	/^use constant ERR_DELTA_BADVAL => 0x6;$/;"	kind:constant
MC::Error::ERR_EINVAL	t/binary-sasl.t	/^use constant ERR_EINVAL       => 0x4;$/;"	kind:constant
MC::Error::ERR_EINVAL	t/binary.t	/^use constant ERR_EINVAL       => 0x4;$/;"	kind:constant
MC::Error::ERR_EXISTS	t/binary-sasl.t	/^use constant ERR_EXISTS       => 0x2;$/;"	kind:constant
MC::Error::ERR_EXISTS	t/binary.t	/^use constant ERR_EXISTS       => 0x2;$/;"	kind:constant
MC::Error::ERR_NOT_FOUND	t/binary-sasl.t	/^use constant ERR_NOT_FOUND    => 0x1;$/;"	kind:constant
MC::Error::ERR_NOT_FOUND	t/binary.t	/^use constant ERR_NOT_FOUND    => 0x1;$/;"	kind:constant
MC::Error::ERR_NOT_STORED	t/binary-sasl.t	/^use constant ERR_NOT_STORED   => 0x5;$/;"	kind:constant
MC::Error::ERR_NOT_STORED	t/binary.t	/^use constant ERR_NOT_STORED   => 0x5;$/;"	kind:constant
MC::Error::ERR_TOO_BIG	t/binary-sasl.t	/^use constant ERR_TOO_BIG      => 0x3;$/;"	kind:constant
MC::Error::ERR_TOO_BIG	t/binary.t	/^use constant ERR_TOO_BIG      => 0x3;$/;"	kind:constant
MC::Error::ERR_UNKNOWN_CMD	t/binary-sasl.t	/^use constant ERR_UNKNOWN_CMD  => 0x81;$/;"	kind:constant
MC::Error::ERR_UNKNOWN_CMD	t/binary.t	/^use constant ERR_UNKNOWN_CMD  => 0x81;$/;"	kind:constant
MC::Error::auth_error	t/binary-sasl.t	/^sub auth_error {$/;"	kind:subroutine
MC::Error::delta_badval	t/binary-sasl.t	/^sub delta_badval {$/;"	kind:subroutine
MC::Error::delta_badval	t/binary.t	/^sub delta_badval {$/;"	kind:subroutine
MC::Error::einval	t/binary.t	/^sub einval {$/;"	kind:subroutine
MC::Error::exists	t/binary-sasl.t	/^sub exists {$/;"	kind:subroutine
MC::Error::exists	t/binary.t	/^sub exists {$/;"	kind:subroutine
MC::Error::new	t/binary-sasl.t	/^sub new {$/;"	kind:subroutine
MC::Error::new	t/binary.t	/^sub new {$/;"	kind:subroutine
MC::Error::not_found	t/binary-sasl.t	/^sub not_found {$/;"	kind:subroutine
MC::Error::not_found	t/binary.t	/^sub not_found {$/;"	kind:subroutine
MC::Error::too_big	t/binary-sasl.t	/^sub too_big {$/;"	kind:subroutine
MC::Error::too_big	t/binary.t	/^sub too_big {$/;"	kind:subroutine
MEMCACHED_ASSOC_DELETE	trace.h	7;"	kind:macro
MEMCACHED_ASSOC_DELETE_ENABLED	trace.h	8;"	kind:macro
MEMCACHED_ASSOC_FIND	trace.h	9;"	kind:macro
MEMCACHED_ASSOC_FIND_ENABLED	trace.h	10;"	kind:macro
MEMCACHED_ASSOC_INSERT	trace.h	11;"	kind:macro
MEMCACHED_ASSOC_INSERT_ENABLED	trace.h	12;"	kind:macro
MEMCACHED_COMMAND_ADD	trace.h	13;"	kind:macro
MEMCACHED_COMMAND_ADD_ENABLED	trace.h	14;"	kind:macro
MEMCACHED_COMMAND_APPEND	trace.h	15;"	kind:macro
MEMCACHED_COMMAND_APPEND_ENABLED	trace.h	16;"	kind:macro
MEMCACHED_COMMAND_CAS	trace.h	17;"	kind:macro
MEMCACHED_COMMAND_CAS_ENABLED	trace.h	18;"	kind:macro
MEMCACHED_COMMAND_DECR	trace.h	19;"	kind:macro
MEMCACHED_COMMAND_DECR_ENABLED	trace.h	20;"	kind:macro
MEMCACHED_COMMAND_DELETE	trace.h	21;"	kind:macro
MEMCACHED_COMMAND_DELETE_ENABLED	trace.h	22;"	kind:macro
MEMCACHED_COMMAND_GET	trace.h	23;"	kind:macro
MEMCACHED_COMMAND_GET_ENABLED	trace.h	24;"	kind:macro
MEMCACHED_COMMAND_INCR	trace.h	27;"	kind:macro
MEMCACHED_COMMAND_INCR_ENABLED	trace.h	28;"	kind:macro
MEMCACHED_COMMAND_PREPEND	trace.h	29;"	kind:macro
MEMCACHED_COMMAND_PREPEND_ENABLED	trace.h	30;"	kind:macro
MEMCACHED_COMMAND_REPLACE	trace.h	31;"	kind:macro
MEMCACHED_COMMAND_REPLACE_ENABLED	trace.h	32;"	kind:macro
MEMCACHED_COMMAND_SET	trace.h	33;"	kind:macro
MEMCACHED_COMMAND_SET_ENABLED	trace.h	34;"	kind:macro
MEMCACHED_COMMAND_TOUCH	trace.h	25;"	kind:macro
MEMCACHED_COMMAND_TOUCH_ENABLED	trace.h	26;"	kind:macro
MEMCACHED_CONN_ALLOCATE	trace.h	35;"	kind:macro
MEMCACHED_CONN_ALLOCATE_ENABLED	trace.h	36;"	kind:macro
MEMCACHED_CONN_CREATE	trace.h	37;"	kind:macro
MEMCACHED_CONN_CREATE_ENABLED	trace.h	38;"	kind:macro
MEMCACHED_CONN_DESTROY	trace.h	39;"	kind:macro
MEMCACHED_CONN_DESTROY_ENABLED	trace.h	40;"	kind:macro
MEMCACHED_CONN_DISPATCH	trace.h	41;"	kind:macro
MEMCACHED_CONN_DISPATCH_ENABLED	trace.h	42;"	kind:macro
MEMCACHED_CONN_RELEASE	trace.h	43;"	kind:macro
MEMCACHED_CONN_RELEASE_ENABLED	trace.h	44;"	kind:macro
MEMCACHED_ITEM_LINK	trace.h	45;"	kind:macro
MEMCACHED_ITEM_LINK_ENABLED	trace.h	46;"	kind:macro
MEMCACHED_ITEM_REMOVE	trace.h	47;"	kind:macro
MEMCACHED_ITEM_REMOVE_ENABLED	trace.h	48;"	kind:macro
MEMCACHED_ITEM_REPLACE	trace.h	49;"	kind:macro
MEMCACHED_ITEM_REPLACE_ENABLED	trace.h	50;"	kind:macro
MEMCACHED_ITEM_UNLINK	trace.h	51;"	kind:macro
MEMCACHED_ITEM_UNLINK_ENABLED	trace.h	52;"	kind:macro
MEMCACHED_ITEM_UPDATE	trace.h	53;"	kind:macro
MEMCACHED_ITEM_UPDATE_ENABLED	trace.h	54;"	kind:macro
MEMCACHED_PROCESS_COMMAND_END	trace.h	55;"	kind:macro
MEMCACHED_PROCESS_COMMAND_END_ENABLED	trace.h	56;"	kind:macro
MEMCACHED_PROCESS_COMMAND_START	trace.h	57;"	kind:macro
MEMCACHED_PROCESS_COMMAND_START_ENABLED	trace.h	58;"	kind:macro
MEMCACHED_SLABS_ALLOCATE	trace.h	59;"	kind:macro
MEMCACHED_SLABS_ALLOCATE_ENABLED	trace.h	60;"	kind:macro
MEMCACHED_SLABS_ALLOCATE_FAILED	trace.h	61;"	kind:macro
MEMCACHED_SLABS_ALLOCATE_FAILED_ENABLED	trace.h	62;"	kind:macro
MEMCACHED_SLABS_FREE	trace.h	63;"	kind:macro
MEMCACHED_SLABS_FREE_ENABLED	trace.h	64;"	kind:macro
MEMCACHED_SLABS_SLABCLASS_ALLOCATE	trace.h	65;"	kind:macro
MEMCACHED_SLABS_SLABCLASS_ALLOCATE_ENABLED	trace.h	66;"	kind:macro
MEMCACHED_SLABS_SLABCLASS_ALLOCATE_FAILED	trace.h	67;"	kind:macro
MEMCACHED_SLABS_SLABCLASS_ALLOCATE_FAILED_ENABLED	trace.h	68;"	kind:macro
MIN_BIN_PKT_LENGTH	memcached.h	60;"	kind:macro
MIN_LRU_MAINTAINER_SLEEP	items.c	994;"	kind:macro	file:
MIN_RECV_BYTES	t/binary-sasl.t	/^use constant MIN_RECV_BYTES   => length(pack(RES_PKT_FMT));$/;"	kind:constant
MIN_RECV_BYTES	t/binary.t	/^use constant MIN_RECV_BYTES   => length(pack(RES_PKT_FMT));$/;"	kind:constant
MIN_RECV_BYTES	t/udp.t	/^use constant MIN_RECV_BYTES   => length(pack(RES_PKT_FMT));$/;"	kind:constant
MKDIR_P	doc/Makefile	/^MKDIR_P = \/bin\/mkdir -p$/;"	kind:macro
MOVE_BUSY	slabs.c	/^    MOVE_PASS=0, MOVE_FROM_SLAB, MOVE_FROM_LRU, MOVE_BUSY, MOVE_LOCKED$/;"	kind:enumerator	enum:move_status	file:
MOVE_FROM_LRU	slabs.c	/^    MOVE_PASS=0, MOVE_FROM_SLAB, MOVE_FROM_LRU, MOVE_BUSY, MOVE_LOCKED$/;"	kind:enumerator	enum:move_status	file:
MOVE_FROM_SLAB	slabs.c	/^    MOVE_PASS=0, MOVE_FROM_SLAB, MOVE_FROM_LRU, MOVE_BUSY, MOVE_LOCKED$/;"	kind:enumerator	enum:move_status	file:
MOVE_LOCKED	slabs.c	/^    MOVE_PASS=0, MOVE_FROM_SLAB, MOVE_FROM_LRU, MOVE_BUSY, MOVE_LOCKED$/;"	kind:enumerator	enum:move_status	file:
MOVE_PASS	slabs.c	/^    MOVE_PASS=0, MOVE_FROM_SLAB, MOVE_FROM_LRU, MOVE_BUSY, MOVE_LOCKED$/;"	kind:enumerator	enum:move_status	file:
MSG_LIST_HIGHWAT	memcached.h	57;"	kind:macro
MSG_LIST_INITIAL	memcached.h	51;"	kind:macro
MURMUR3_HASH	hash.h	/^    JENKINS_HASH=0, MURMUR3_HASH$/;"	kind:enumerator	enum:hashfunc_type
MURMURHASH3_H	murmur3_hash.h	6;"	kind:macro
Memcached::Handle	t/lib/MemcachedTest.pm	/^package Memcached::Handle;$/;"	kind:package
Memcached::Handle::DESTROY	t/lib/MemcachedTest.pm	/^sub DESTROY {$/;"	kind:subroutine
Memcached::Handle::host	t/lib/MemcachedTest.pm	/^sub host { $_[0]{host} }$/;"	kind:subroutine
Memcached::Handle::new	t/lib/MemcachedTest.pm	/^sub new {$/;"	kind:subroutine
Memcached::Handle::new_sock	t/lib/MemcachedTest.pm	/^sub new_sock {$/;"	kind:subroutine
Memcached::Handle::new_udp_sock	t/lib/MemcachedTest.pm	/^sub new_udp_sock {$/;"	kind:subroutine
Memcached::Handle::port	t/lib/MemcachedTest.pm	/^sub port { $_[0]{port} }$/;"	kind:subroutine
Memcached::Handle::sock	t/lib/MemcachedTest.pm	/^sub sock {$/;"	kind:subroutine
Memcached::Handle::stop	t/lib/MemcachedTest.pm	/^sub stop {$/;"	kind:subroutine
Memcached::Handle::udpport	t/lib/MemcachedTest.pm	/^sub udpport { $_[0]{udpport} }$/;"	kind:subroutine
MemcachedTest	t/lib/MemcachedTest.pm	/^package MemcachedTest;$/;"	kind:package
MemcachedTest::free_port	t/lib/MemcachedTest.pm	/^sub free_port {$/;"	kind:subroutine
MemcachedTest::mem_get_is	t/lib/MemcachedTest.pm	/^sub mem_get_is {$/;"	kind:subroutine
MemcachedTest::mem_gets	t/lib/MemcachedTest.pm	/^sub mem_gets {$/;"	kind:subroutine
MemcachedTest::mem_gets_is	t/lib/MemcachedTest.pm	/^sub mem_gets_is {$/;"	kind:subroutine
MemcachedTest::mem_stats	t/lib/MemcachedTest.pm	/^sub mem_stats {$/;"	kind:subroutine
MemcachedTest::new_memcached	t/lib/MemcachedTest.pm	/^sub new_memcached {$/;"	kind:subroutine
MemcachedTest::sleep	t/lib/MemcachedTest.pm	/^sub sleep {$/;"	kind:subroutine
MemcachedTest::supports_sasl	t/lib/MemcachedTest.pm	/^sub supports_sasl {$/;"	kind:subroutine
MemcachedTest::supports_udp	t/lib/MemcachedTest.pm	/^sub supports_udp {$/;"	kind:subroutine
MurmurHash3_x86_32	murmur3_hash.c	/^uint32_t MurmurHash3_x86_32 ( const void * key, size_t length)$/;"	kind:function	signature:( const void * key, size_t length)
MurmurHash3_x86_32	murmur3_hash.h	/^uint32_t MurmurHash3_x86_32(const void *key, size_t length);$/;"	kind:prototype	signature:(const void *key, size_t length)
NDEBUG	testapp.c	2;"	kind:macro	file:
NOEXP_LRU	items.c	24;"	kind:macro	file:
NON_NUMERIC	memcached.h	/^    OK, NON_NUMERIC, EOM, DELTA_ITEM_NOT_FOUND, DELTA_ITEM_CAS_MISMATCH$/;"	kind:enumerator	enum:delta_result_type
NORMAL_INSTALL	doc/Makefile	/^NORMAL_INSTALL = :$/;"	kind:macro
NORMAL_UNINSTALL	doc/Makefile	/^NORMAL_UNINSTALL = :$/;"	kind:macro
NOT_FOUND	memcached.h	/^    NOT_STORED=0, STORED, EXISTS, NOT_FOUND$/;"	kind:enumerator	enum:store_item_type
NOT_STORED	memcached.h	/^    NOT_STORED=0, STORED, EXISTS, NOT_FOUND$/;"	kind:enumerator	enum:store_item_type
NREAD_ADD	memcached.h	204;"	kind:macro
NREAD_APPEND	memcached.h	207;"	kind:macro
NREAD_CAS	memcached.h	209;"	kind:macro
NREAD_PREPEND	memcached.h	208;"	kind:macro
NREAD_REPLACE	memcached.h	206;"	kind:macro
NREAD_SET	memcached.h	205;"	kind:macro
NROFF	doc/Makefile	/^NROFF = nroff$/;"	kind:macro
OBJEXT	doc/Makefile	/^OBJEXT = o$/;"	kind:macro
OK	memcached.h	/^    OK, NON_NUMERIC, EOM, DELTA_ITEM_NOT_FOUND, DELTA_ITEM_CAS_MISMATCH$/;"	kind:enumerator	enum:delta_result_type
PACKAGE	doc/Makefile	/^PACKAGE = memcached$/;"	kind:macro
PACKAGE_BUGREPORT	doc/Makefile	/^PACKAGE_BUGREPORT = memcached@googlegroups.com$/;"	kind:macro
PACKAGE_NAME	doc/Makefile	/^PACKAGE_NAME = memcached$/;"	kind:macro
PACKAGE_STRING	doc/Makefile	/^PACKAGE_STRING = memcached 1.4.25$/;"	kind:macro
PACKAGE_TARNAME	doc/Makefile	/^PACKAGE_TARNAME = memcached$/;"	kind:macro
PACKAGE_URL	doc/Makefile	/^PACKAGE_URL = $/;"	kind:macro
PACKAGE_VERSION	doc/Makefile	/^PACKAGE_VERSION = 1.4.25$/;"	kind:macro
PATH_SEPARATOR	doc/Makefile	/^PATH_SEPARATOR = :$/;"	kind:macro
PAUSE_ALL_THREADS	memcached.h	/^    PAUSE_ALL_THREADS,$/;"	kind:enumerator	enum:pause_thread_types
PAUSE_WORKER_THREADS	memcached.h	/^    PAUSE_WORKER_THREADS = 0,$/;"	kind:enumerator	enum:pause_thread_types
POST_INSTALL	doc/Makefile	/^POST_INSTALL = :$/;"	kind:macro
POST_UNINSTALL	doc/Makefile	/^POST_UNINSTALL = :$/;"	kind:macro
POWER_LARGEST	memcached.h	80;"	kind:macro
POWER_SMALLEST	memcached.h	79;"	kind:macro
PREFIX_HASH_SIZE	stats.c	32;"	kind:macro	file:
PREFIX_STATS	stats.c	/^typedef struct _prefix_stats PREFIX_STATS;$/;"	kind:typedef	typeref:struct:_prefix_stats	file:
PRE_INSTALL	doc/Makefile	/^PRE_INSTALL = :$/;"	kind:macro
PRE_UNINSTALL	doc/Makefile	/^PRE_UNINSTALL = :$/;"	kind:macro
PROFILER	doc/Makefile	/^PROFILER = \/usr\/bin\/gcov$/;"	kind:macro
PROFILER_FLAGS	doc/Makefile	/^PROFILER_FLAGS = -fprofile-arcs -ftest-coverage$/;"	kind:macro
PROFILER_LDFLAGS	doc/Makefile	/^PROFILER_LDFLAGS = -lgcov$/;"	kind:macro
PROTOCOL_BINARY_CMD_ADD	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_ADD = 0x02,$/;"	kind:enumerator	enum:__anon11
PROTOCOL_BINARY_CMD_ADDQ	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_ADDQ = 0x12,$/;"	kind:enumerator	enum:__anon11
PROTOCOL_BINARY_CMD_APPEND	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_APPEND = 0x0e,$/;"	kind:enumerator	enum:__anon11
PROTOCOL_BINARY_CMD_APPENDQ	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_APPENDQ = 0x19,$/;"	kind:enumerator	enum:__anon11
PROTOCOL_BINARY_CMD_DECREMENT	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_DECREMENT = 0x06,$/;"	kind:enumerator	enum:__anon11
PROTOCOL_BINARY_CMD_DECREMENTQ	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_DECREMENTQ = 0x16,$/;"	kind:enumerator	enum:__anon11
PROTOCOL_BINARY_CMD_DELETE	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_DELETE = 0x04,$/;"	kind:enumerator	enum:__anon11
PROTOCOL_BINARY_CMD_DELETEQ	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_DELETEQ = 0x14,$/;"	kind:enumerator	enum:__anon11
PROTOCOL_BINARY_CMD_FLUSH	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_FLUSH = 0x08,$/;"	kind:enumerator	enum:__anon11
PROTOCOL_BINARY_CMD_FLUSHQ	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_FLUSHQ = 0x18,$/;"	kind:enumerator	enum:__anon11
PROTOCOL_BINARY_CMD_GAT	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_GAT = 0x1d,$/;"	kind:enumerator	enum:__anon11
PROTOCOL_BINARY_CMD_GATK	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_GATK = 0x23,$/;"	kind:enumerator	enum:__anon11
PROTOCOL_BINARY_CMD_GATKQ	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_GATKQ = 0x24,$/;"	kind:enumerator	enum:__anon11
PROTOCOL_BINARY_CMD_GATQ	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_GATQ = 0x1e,$/;"	kind:enumerator	enum:__anon11
PROTOCOL_BINARY_CMD_GET	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_GET = 0x00,$/;"	kind:enumerator	enum:__anon11
PROTOCOL_BINARY_CMD_GETK	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_GETK = 0x0c,$/;"	kind:enumerator	enum:__anon11
PROTOCOL_BINARY_CMD_GETKQ	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_GETKQ = 0x0d,$/;"	kind:enumerator	enum:__anon11
PROTOCOL_BINARY_CMD_GETQ	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_GETQ = 0x09,$/;"	kind:enumerator	enum:__anon11
PROTOCOL_BINARY_CMD_INCREMENT	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_INCREMENT = 0x05,$/;"	kind:enumerator	enum:__anon11
PROTOCOL_BINARY_CMD_INCREMENTQ	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_INCREMENTQ = 0x15,$/;"	kind:enumerator	enum:__anon11
PROTOCOL_BINARY_CMD_NOOP	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_NOOP = 0x0a,$/;"	kind:enumerator	enum:__anon11
PROTOCOL_BINARY_CMD_PREPEND	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_PREPEND = 0x0f,$/;"	kind:enumerator	enum:__anon11
PROTOCOL_BINARY_CMD_PREPENDQ	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_PREPENDQ = 0x1a,$/;"	kind:enumerator	enum:__anon11
PROTOCOL_BINARY_CMD_QUIT	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_QUIT = 0x07,$/;"	kind:enumerator	enum:__anon11
PROTOCOL_BINARY_CMD_QUITQ	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_QUITQ = 0x17,$/;"	kind:enumerator	enum:__anon11
PROTOCOL_BINARY_CMD_RAPPEND	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_RAPPEND   = 0x33,$/;"	kind:enumerator	enum:__anon11
PROTOCOL_BINARY_CMD_RAPPENDQ	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_RAPPENDQ  = 0x34,$/;"	kind:enumerator	enum:__anon11
PROTOCOL_BINARY_CMD_RDECR	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_RDECR     = 0x3b,$/;"	kind:enumerator	enum:__anon11
PROTOCOL_BINARY_CMD_RDECRQ	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_RDECRQ    = 0x3c$/;"	kind:enumerator	enum:__anon11
PROTOCOL_BINARY_CMD_RDELETE	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_RDELETE   = 0x37,$/;"	kind:enumerator	enum:__anon11
PROTOCOL_BINARY_CMD_RDELETEQ	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_RDELETEQ  = 0x38,$/;"	kind:enumerator	enum:__anon11
PROTOCOL_BINARY_CMD_REPLACE	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_REPLACE = 0x03,$/;"	kind:enumerator	enum:__anon11
PROTOCOL_BINARY_CMD_REPLACEQ	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_REPLACEQ = 0x13,$/;"	kind:enumerator	enum:__anon11
PROTOCOL_BINARY_CMD_RGET	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_RGET      = 0x30,$/;"	kind:enumerator	enum:__anon11
PROTOCOL_BINARY_CMD_RINCR	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_RINCR     = 0x39,$/;"	kind:enumerator	enum:__anon11
PROTOCOL_BINARY_CMD_RINCRQ	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_RINCRQ    = 0x3a,$/;"	kind:enumerator	enum:__anon11
PROTOCOL_BINARY_CMD_RPREPEND	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_RPREPEND  = 0x35,$/;"	kind:enumerator	enum:__anon11
PROTOCOL_BINARY_CMD_RPREPENDQ	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_RPREPENDQ = 0x36,$/;"	kind:enumerator	enum:__anon11
PROTOCOL_BINARY_CMD_RSET	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_RSET      = 0x31,$/;"	kind:enumerator	enum:__anon11
PROTOCOL_BINARY_CMD_RSETQ	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_RSETQ     = 0x32,$/;"	kind:enumerator	enum:__anon11
PROTOCOL_BINARY_CMD_SASL_AUTH	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_SASL_AUTH = 0x21,$/;"	kind:enumerator	enum:__anon11
PROTOCOL_BINARY_CMD_SASL_LIST_MECHS	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_SASL_LIST_MECHS = 0x20,$/;"	kind:enumerator	enum:__anon11
PROTOCOL_BINARY_CMD_SASL_STEP	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_SASL_STEP = 0x22,$/;"	kind:enumerator	enum:__anon11
PROTOCOL_BINARY_CMD_SET	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_SET = 0x01,$/;"	kind:enumerator	enum:__anon11
PROTOCOL_BINARY_CMD_SETQ	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_SETQ = 0x11,$/;"	kind:enumerator	enum:__anon11
PROTOCOL_BINARY_CMD_STAT	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_STAT = 0x10,$/;"	kind:enumerator	enum:__anon11
PROTOCOL_BINARY_CMD_TOUCH	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_TOUCH = 0x1c,$/;"	kind:enumerator	enum:__anon11
PROTOCOL_BINARY_CMD_VERSION	protocol_binary.h	/^        PROTOCOL_BINARY_CMD_VERSION = 0x0b,$/;"	kind:enumerator	enum:__anon11
PROTOCOL_BINARY_H	protocol_binary.h	36;"	kind:macro
PROTOCOL_BINARY_RAW_BYTES	protocol_binary.h	/^        PROTOCOL_BINARY_RAW_BYTES = 0x00$/;"	kind:enumerator	enum:__anon12
PROTOCOL_BINARY_REQ	protocol_binary.h	/^        PROTOCOL_BINARY_REQ = 0x80,$/;"	kind:enumerator	enum:__anon9
PROTOCOL_BINARY_RES	protocol_binary.h	/^        PROTOCOL_BINARY_RES = 0x81$/;"	kind:enumerator	enum:__anon9
PROTOCOL_BINARY_RESPONSE_AUTH_CONTINUE	protocol_binary.h	/^        PROTOCOL_BINARY_RESPONSE_AUTH_CONTINUE = 0x21,$/;"	kind:enumerator	enum:__anon10
PROTOCOL_BINARY_RESPONSE_AUTH_ERROR	protocol_binary.h	/^        PROTOCOL_BINARY_RESPONSE_AUTH_ERROR = 0x20,$/;"	kind:enumerator	enum:__anon10
PROTOCOL_BINARY_RESPONSE_DELTA_BADVAL	protocol_binary.h	/^        PROTOCOL_BINARY_RESPONSE_DELTA_BADVAL = 0x06,$/;"	kind:enumerator	enum:__anon10
PROTOCOL_BINARY_RESPONSE_E2BIG	protocol_binary.h	/^        PROTOCOL_BINARY_RESPONSE_E2BIG = 0x03,$/;"	kind:enumerator	enum:__anon10
PROTOCOL_BINARY_RESPONSE_EINVAL	protocol_binary.h	/^        PROTOCOL_BINARY_RESPONSE_EINVAL = 0x04,$/;"	kind:enumerator	enum:__anon10
PROTOCOL_BINARY_RESPONSE_ENOMEM	protocol_binary.h	/^        PROTOCOL_BINARY_RESPONSE_ENOMEM = 0x82$/;"	kind:enumerator	enum:__anon10
PROTOCOL_BINARY_RESPONSE_KEY_EEXISTS	protocol_binary.h	/^        PROTOCOL_BINARY_RESPONSE_KEY_EEXISTS = 0x02,$/;"	kind:enumerator	enum:__anon10
PROTOCOL_BINARY_RESPONSE_KEY_ENOENT	protocol_binary.h	/^        PROTOCOL_BINARY_RESPONSE_KEY_ENOENT = 0x01,$/;"	kind:enumerator	enum:__anon10
PROTOCOL_BINARY_RESPONSE_NOT_STORED	protocol_binary.h	/^        PROTOCOL_BINARY_RESPONSE_NOT_STORED = 0x05,$/;"	kind:enumerator	enum:__anon10
PROTOCOL_BINARY_RESPONSE_SUCCESS	protocol_binary.h	/^        PROTOCOL_BINARY_RESPONSE_SUCCESS = 0x00,$/;"	kind:enumerator	enum:__anon10
PROTOCOL_BINARY_RESPONSE_UNKNOWN_COMMAND	protocol_binary.h	/^        PROTOCOL_BINARY_RESPONSE_UNKNOWN_COMMAND = 0x81,$/;"	kind:enumerator	enum:__anon10
READ_BUFFER_HIGHWAT	memcached.h	54;"	kind:macro
READ_DATA_RECEIVED	memcached.c	/^    READ_DATA_RECEIVED,$/;"	kind:enumerator	enum:try_read_result	file:
READ_ERROR	memcached.c	/^    READ_ERROR,            \/** an error occurred (on the socket) (or client closed connection) *\/$/;"	kind:enumerator	enum:try_read_result	file:
READ_MEMORY_ERROR	memcached.c	/^    READ_MEMORY_ERROR      \/** failed to allocate more memory *\/$/;"	kind:enumerator	enum:try_read_result	file:
READ_NO_DATA_RECEIVED	memcached.c	/^    READ_NO_DATA_RECEIVED,$/;"	kind:enumerator	enum:try_read_result	file:
REALTIME_MAXDELTA	memcached.c	147;"	kind:macro	file:
REASSIGN_BADCLASS	slabs.h	/^    REASSIGN_OK=0, REASSIGN_RUNNING, REASSIGN_BADCLASS, REASSIGN_NOSPARE,$/;"	kind:enumerator	enum:reassign_result_type
REASSIGN_NOSPARE	slabs.h	/^    REASSIGN_OK=0, REASSIGN_RUNNING, REASSIGN_BADCLASS, REASSIGN_NOSPARE,$/;"	kind:enumerator	enum:reassign_result_type
REASSIGN_OK	slabs.h	/^    REASSIGN_OK=0, REASSIGN_RUNNING, REASSIGN_BADCLASS, REASSIGN_NOSPARE,$/;"	kind:enumerator	enum:reassign_result_type
REASSIGN_RUNNING	slabs.h	/^    REASSIGN_OK=0, REASSIGN_RUNNING, REASSIGN_BADCLASS, REASSIGN_NOSPARE,$/;"	kind:enumerator	enum:reassign_result_type
REASSIGN_SRC_DST_SAME	slabs.h	/^    REASSIGN_SRC_DST_SAME$/;"	kind:enumerator	enum:reassign_result_type
REQ_MAGIC	t/binary-sasl.t	/^use constant REQ_MAGIC        => 0x80;$/;"	kind:constant
REQ_MAGIC	t/binary.t	/^use constant REQ_MAGIC        => 0x80;$/;"	kind:constant
REQ_PKT_FMT	t/binary-sasl.t	/^use constant REQ_PKT_FMT      => "CCnCCnNNNN";$/;"	kind:constant
REQ_PKT_FMT	t/binary.t	/^use constant REQ_PKT_FMT      => "CCnCCnNNNN";$/;"	kind:constant
REQ_PKT_FMT	t/udp.t	/^use constant REQ_PKT_FMT      => "CCnCCnNNNN";$/;"	kind:constant
RESUME_ALL_THREADS	memcached.h	/^    RESUME_ALL_THREADS,$/;"	kind:enumerator	enum:pause_thread_types
RESUME_WORKER_THREADS	memcached.h	/^    RESUME_WORKER_THREADS$/;"	kind:enumerator	enum:pause_thread_types
RES_MAGIC	t/binary-sasl.t	/^use constant RES_MAGIC        => 0x81;$/;"	kind:constant
RES_MAGIC	t/binary.t	/^use constant RES_MAGIC        => 0x81;$/;"	kind:constant
RES_PKT_FMT	t/binary-sasl.t	/^use constant RES_PKT_FMT      => "CCnCCnNNNN";$/;"	kind:constant
RES_PKT_FMT	t/binary.t	/^use constant RES_PKT_FMT      => "CCnCCnNNNN";$/;"	kind:constant
RES_PKT_FMT	t/udp.t	/^use constant RES_PKT_FMT      => "CCnCCnNNNN";$/;"	kind:constant
ROTL32	murmur3_hash.c	23;"	kind:macro	file:
ROTL32	murmur3_hash.c	38;"	kind:macro	file:
SASL_CONTINUE	sasl_defs.h	27;"	kind:macro
SASL_DEFS_H	sasl_defs.h	2;"	kind:macro
SASL_OK	sasl_defs.h	26;"	kind:macro
SET_MAKE	doc/Makefile	/^SET_MAKE = $/;"	kind:macro
SHELL	doc/Makefile	/^SHELL = \/bin\/bash$/;"	kind:macro
SLABS_ALLOC_NO_NEWPAGE	slabs.h	22;"	kind:macro
SLABS_H	slabs.h	3;"	kind:macro
SLAB_GLOBAL_PAGE_POOL	memcached.h	81;"	kind:macro
SOURCES	doc/Makefile	/^SOURCES =$/;"	kind:macro
STATS_LOCK	memcached.h	/^void STATS_LOCK(void);$/;"	kind:prototype	signature:(void)
STATS_LOCK	thread.c	/^void STATS_LOCK() {$/;"	kind:function
STATS_UNLOCK	memcached.h	/^void STATS_UNLOCK(void);$/;"	kind:prototype	signature:(void)
STATS_UNLOCK	thread.c	/^void STATS_UNLOCK() {$/;"	kind:function
STAT_KEY_LEN	memcached.h	116;"	kind:macro
STAT_VAL_LEN	memcached.h	117;"	kind:macro
STORED	memcached.h	/^    NOT_STORED=0, STORED, EXISTS, NOT_FOUND$/;"	kind:enumerator	enum:store_item_type
STRIP	doc/Makefile	/^STRIP = $/;"	kind:macro
SUBCOMMAND_TOKEN	memcached.c	2427;"	kind:macro	file:
SUFFIX_LIST_INITIAL	memcached.h	45;"	kind:macro
SUFFIX_SIZE	memcached.h	39;"	kind:macro
TAIL_REPAIR_TIME_DEFAULT	memcached.h	88;"	kind:macro
TEST_FAIL	testapp.c	/^enum test_return { TEST_SKIP, TEST_PASS, TEST_FAIL };$/;"	kind:enumerator	enum:test_return	file:
TEST_FUNC	testapp.c	/^typedef enum test_return (*TEST_FUNC)(void);$/;"	kind:typedef	typeref:enum:TEST_FUNC	file:
TEST_PASS	testapp.c	/^enum test_return { TEST_SKIP, TEST_PASS, TEST_FAIL };$/;"	kind:enumerator	enum:test_return	file:
TEST_SKIP	testapp.c	/^enum test_return { TEST_SKIP, TEST_PASS, TEST_FAIL };$/;"	kind:enumerator	enum:test_return	file:
TMP_TEMPLATE	testapp.c	26;"	kind:macro	file:
TRACE_H	trace.h	2;"	kind:macro
TRANSMIT_COMPLETE	memcached.c	/^    TRANSMIT_COMPLETE,   \/** All done writing. *\/$/;"	kind:enumerator	enum:transmit_result	file:
TRANSMIT_HARD_ERROR	memcached.c	/^    TRANSMIT_HARD_ERROR  \/** Can't write (c->state is set to conn_closing) *\/$/;"	kind:enumerator	enum:transmit_result	file:
TRANSMIT_INCOMPLETE	memcached.c	/^    TRANSMIT_INCOMPLETE, \/** More data remaining to write. *\/$/;"	kind:enumerator	enum:transmit_result	file:
TRANSMIT_SOFT_ERROR	memcached.c	/^    TRANSMIT_SOFT_ERROR, \/** Can't write any more right now. *\/$/;"	kind:enumerator	enum:transmit_result	file:
UDP_HEADER_SIZE	memcached.h	35;"	kind:macro
UDP_MAX_PAYLOAD_SIZE	memcached.h	34;"	kind:macro
UDP_READ_BUFFER_SIZE	memcached.h	33;"	kind:macro
VERSION	doc/Makefile	/^VERSION = 1.4.25$/;"	kind:macro
WARM_LRU	items.c	22;"	kind:macro	file:
XML2RFC	doc/Makefile	/^XML2RFC = no$/;"	kind:macro
XSLTPROC	doc/Makefile	/^XSLTPROC = no$/;"	kind:macro
_P1003_1B_VISIBLE	memcached.c	30;"	kind:macro	file:
__anon13::__anon14::bodylen	protocol_binary.h	/^            uint32_t bodylen;$/;"	kind:member	struct:__anon13::__anon14	access:public
__anon13::__anon14::cas	protocol_binary.h	/^            uint64_t cas;$/;"	kind:member	struct:__anon13::__anon14	access:public
__anon13::__anon14::datatype	protocol_binary.h	/^            uint8_t datatype;$/;"	kind:member	struct:__anon13::__anon14	access:public
__anon13::__anon14::extlen	protocol_binary.h	/^            uint8_t extlen;$/;"	kind:member	struct:__anon13::__anon14	access:public
__anon13::__anon14::keylen	protocol_binary.h	/^            uint16_t keylen;$/;"	kind:member	struct:__anon13::__anon14	access:public
__anon13::__anon14::magic	protocol_binary.h	/^            uint8_t magic;$/;"	kind:member	struct:__anon13::__anon14	access:public
__anon13::__anon14::opaque	protocol_binary.h	/^            uint32_t opaque;$/;"	kind:member	struct:__anon13::__anon14	access:public
__anon13::__anon14::opcode	protocol_binary.h	/^            uint8_t opcode;$/;"	kind:member	struct:__anon13::__anon14	access:public
__anon13::__anon14::reserved	protocol_binary.h	/^            uint16_t reserved;$/;"	kind:member	struct:__anon13::__anon14	access:public
__anon13::bytes	protocol_binary.h	/^        uint8_t bytes[24];$/;"	kind:member	union:__anon13	access:public
__anon13::request	protocol_binary.h	/^        } request;$/;"	kind:member	union:__anon13	typeref:struct:__anon13::__anon14	access:public
__anon15::__anon16::bodylen	protocol_binary.h	/^            uint32_t bodylen;$/;"	kind:member	struct:__anon15::__anon16	access:public
__anon15::__anon16::cas	protocol_binary.h	/^            uint64_t cas;$/;"	kind:member	struct:__anon15::__anon16	access:public
__anon15::__anon16::datatype	protocol_binary.h	/^            uint8_t datatype;$/;"	kind:member	struct:__anon15::__anon16	access:public
__anon15::__anon16::extlen	protocol_binary.h	/^            uint8_t extlen;$/;"	kind:member	struct:__anon15::__anon16	access:public
__anon15::__anon16::keylen	protocol_binary.h	/^            uint16_t keylen;$/;"	kind:member	struct:__anon15::__anon16	access:public
__anon15::__anon16::magic	protocol_binary.h	/^            uint8_t magic;$/;"	kind:member	struct:__anon15::__anon16	access:public
__anon15::__anon16::opaque	protocol_binary.h	/^            uint32_t opaque;$/;"	kind:member	struct:__anon15::__anon16	access:public
__anon15::__anon16::opcode	protocol_binary.h	/^            uint8_t opcode;$/;"	kind:member	struct:__anon15::__anon16	access:public
__anon15::__anon16::status	protocol_binary.h	/^            uint16_t status;$/;"	kind:member	struct:__anon15::__anon16	access:public
__anon15::bytes	protocol_binary.h	/^        uint8_t bytes[24];$/;"	kind:member	union:__anon15	access:public
__anon15::response	protocol_binary.h	/^        } response;$/;"	kind:member	union:__anon15	typeref:struct:__anon15::__anon16	access:public
__anon17::__anon18::header	protocol_binary.h	/^            protocol_binary_request_header header;$/;"	kind:member	struct:__anon17::__anon18	access:public
__anon17::bytes	protocol_binary.h	/^        uint8_t bytes[sizeof(protocol_binary_request_header)];$/;"	kind:member	union:__anon17	access:public
__anon17::message	protocol_binary.h	/^        } message;$/;"	kind:member	union:__anon17	typeref:struct:__anon17::__anon18	access:public
__anon19::__anon20::header	protocol_binary.h	/^            protocol_binary_response_header header;$/;"	kind:member	struct:__anon19::__anon20	access:public
__anon19::bytes	protocol_binary.h	/^        uint8_t bytes[sizeof(protocol_binary_response_header)];$/;"	kind:member	union:__anon19	access:public
__anon19::message	protocol_binary.h	/^        } message;$/;"	kind:member	union:__anon19	typeref:struct:__anon19::__anon20	access:public
__anon1::bufsize	cache.h	/^    size_t bufsize;$/;"	kind:member	struct:__anon1	access:public
__anon1::constructor	cache.h	/^    cache_constructor_t* constructor;$/;"	kind:member	struct:__anon1	access:public
__anon1::destructor	cache.h	/^    cache_destructor_t* destructor;$/;"	kind:member	struct:__anon1	access:public
__anon1::freecurr	cache.h	/^    int freecurr;$/;"	kind:member	struct:__anon1	access:public
__anon1::freetotal	cache.h	/^    int freetotal;$/;"	kind:member	struct:__anon1	access:public
__anon1::mutex	cache.h	/^    pthread_mutex_t mutex;$/;"	kind:member	struct:__anon1	access:public
__anon1::name	cache.h	/^    char *name;$/;"	kind:member	struct:__anon1	access:public
__anon1::ptr	cache.h	/^    void **ptr;$/;"	kind:member	struct:__anon1	access:public
__anon21::__anon22::__anon23::flags	protocol_binary.h	/^                uint32_t flags;$/;"	kind:member	struct:__anon21::__anon22::__anon23	access:public
__anon21::__anon22::body	protocol_binary.h	/^            } body;$/;"	kind:member	struct:__anon21::__anon22	typeref:struct:__anon21::__anon22::__anon23	access:public
__anon21::__anon22::header	protocol_binary.h	/^            protocol_binary_response_header header;$/;"	kind:member	struct:__anon21::__anon22	access:public
__anon21::bytes	protocol_binary.h	/^        uint8_t bytes[sizeof(protocol_binary_response_header) + 4];$/;"	kind:member	union:__anon21	access:public
__anon21::message	protocol_binary.h	/^        } message;$/;"	kind:member	union:__anon21	typeref:struct:__anon21::__anon22	access:public
__anon24::__anon25::__anon26::expiration	protocol_binary.h	/^                uint32_t expiration;$/;"	kind:member	struct:__anon24::__anon25::__anon26	access:public
__anon24::__anon25::body	protocol_binary.h	/^            } body;$/;"	kind:member	struct:__anon24::__anon25	typeref:struct:__anon24::__anon25::__anon26	access:public
__anon24::__anon25::header	protocol_binary.h	/^            protocol_binary_request_header header;$/;"	kind:member	struct:__anon24::__anon25	access:public
__anon24::bytes	protocol_binary.h	/^        uint8_t bytes[sizeof(protocol_binary_request_header) + 4];$/;"	kind:member	union:__anon24	access:public
__anon24::message	protocol_binary.h	/^        } message;$/;"	kind:member	union:__anon24	typeref:struct:__anon24::__anon25	access:public
__anon27::__anon28::__anon29::expiration	protocol_binary.h	/^                uint32_t expiration;$/;"	kind:member	struct:__anon27::__anon28::__anon29	access:public
__anon27::__anon28::__anon29::flags	protocol_binary.h	/^                uint32_t flags;$/;"	kind:member	struct:__anon27::__anon28::__anon29	access:public
__anon27::__anon28::body	protocol_binary.h	/^            } body;$/;"	kind:member	struct:__anon27::__anon28	typeref:struct:__anon27::__anon28::__anon29	access:public
__anon27::__anon28::header	protocol_binary.h	/^            protocol_binary_request_header header;$/;"	kind:member	struct:__anon27::__anon28	access:public
__anon27::bytes	protocol_binary.h	/^        uint8_t bytes[sizeof(protocol_binary_request_header) + 8];$/;"	kind:member	union:__anon27	access:public
__anon27::message	protocol_binary.h	/^        } message;$/;"	kind:member	union:__anon27	typeref:struct:__anon27::__anon28	access:public
__anon2::crawler_items_checked	items.c	/^    uint64_t crawler_items_checked;$/;"	kind:member	struct:__anon2	file:	access:public
__anon2::crawler_reclaimed	items.c	/^    uint64_t crawler_reclaimed;$/;"	kind:member	struct:__anon2	file:	access:public
__anon2::direct_reclaims	items.c	/^    uint64_t direct_reclaims;$/;"	kind:member	struct:__anon2	file:	access:public
__anon2::evicted	items.c	/^    uint64_t evicted;$/;"	kind:member	struct:__anon2	file:	access:public
__anon2::evicted_nonzero	items.c	/^    uint64_t evicted_nonzero;$/;"	kind:member	struct:__anon2	file:	access:public
__anon2::evicted_time	items.c	/^    rel_time_t evicted_time;$/;"	kind:member	struct:__anon2	file:	access:public
__anon2::evicted_unfetched	items.c	/^    uint64_t evicted_unfetched;$/;"	kind:member	struct:__anon2	file:	access:public
__anon2::expired_unfetched	items.c	/^    uint64_t expired_unfetched;$/;"	kind:member	struct:__anon2	file:	access:public
__anon2::lrutail_reflocked	items.c	/^    uint64_t lrutail_reflocked;$/;"	kind:member	struct:__anon2	file:	access:public
__anon2::moves_to_cold	items.c	/^    uint64_t moves_to_cold;$/;"	kind:member	struct:__anon2	file:	access:public
__anon2::moves_to_warm	items.c	/^    uint64_t moves_to_warm;$/;"	kind:member	struct:__anon2	file:	access:public
__anon2::moves_within_lru	items.c	/^    uint64_t moves_within_lru;$/;"	kind:member	struct:__anon2	file:	access:public
__anon2::outofmemory	items.c	/^    uint64_t outofmemory;$/;"	kind:member	struct:__anon2	file:	access:public
__anon2::reclaimed	items.c	/^    uint64_t reclaimed;$/;"	kind:member	struct:__anon2	file:	access:public
__anon2::tailrepairs	items.c	/^    uint64_t tailrepairs;$/;"	kind:member	struct:__anon2	file:	access:public
__anon30::__anon31::__anon32::delta	protocol_binary.h	/^                uint64_t delta;$/;"	kind:member	struct:__anon30::__anon31::__anon32	access:public
__anon30::__anon31::__anon32::expiration	protocol_binary.h	/^                uint32_t expiration;$/;"	kind:member	struct:__anon30::__anon31::__anon32	access:public
__anon30::__anon31::__anon32::initial	protocol_binary.h	/^                uint64_t initial;$/;"	kind:member	struct:__anon30::__anon31::__anon32	access:public
__anon30::__anon31::body	protocol_binary.h	/^            } body;$/;"	kind:member	struct:__anon30::__anon31	typeref:struct:__anon30::__anon31::__anon32	access:public
__anon30::__anon31::header	protocol_binary.h	/^            protocol_binary_request_header header;$/;"	kind:member	struct:__anon30::__anon31	access:public
__anon30::bytes	protocol_binary.h	/^        uint8_t bytes[sizeof(protocol_binary_request_header) + 20];$/;"	kind:member	union:__anon30	access:public
__anon30::message	protocol_binary.h	/^        } message;$/;"	kind:member	union:__anon30	typeref:struct:__anon30::__anon31	access:public
__anon33::__anon34::__anon35::value	protocol_binary.h	/^                uint64_t value;$/;"	kind:member	struct:__anon33::__anon34::__anon35	access:public
__anon33::__anon34::body	protocol_binary.h	/^            } body;$/;"	kind:member	struct:__anon33::__anon34	typeref:struct:__anon33::__anon34::__anon35	access:public
__anon33::__anon34::header	protocol_binary.h	/^            protocol_binary_response_header header;$/;"	kind:member	struct:__anon33::__anon34	access:public
__anon33::bytes	protocol_binary.h	/^        uint8_t bytes[sizeof(protocol_binary_response_header) + 8];$/;"	kind:member	union:__anon33	access:public
__anon33::message	protocol_binary.h	/^        } message;$/;"	kind:member	union:__anon33	typeref:struct:__anon33::__anon34	access:public
__anon36::__anon37::__anon38::expiration	protocol_binary.h	/^                uint32_t expiration;$/;"	kind:member	struct:__anon36::__anon37::__anon38	access:public
__anon36::__anon37::body	protocol_binary.h	/^            } body;$/;"	kind:member	struct:__anon36::__anon37	typeref:struct:__anon36::__anon37::__anon38	access:public
__anon36::__anon37::header	protocol_binary.h	/^            protocol_binary_request_header header;$/;"	kind:member	struct:__anon36::__anon37	access:public
__anon36::bytes	protocol_binary.h	/^        uint8_t bytes[sizeof(protocol_binary_request_header) + 4];$/;"	kind:member	union:__anon36	access:public
__anon36::message	protocol_binary.h	/^        } message;$/;"	kind:member	union:__anon36	typeref:struct:__anon36::__anon37	access:public
__anon39::__anon40::__anon41::expiration	protocol_binary.h	/^                uint32_t expiration;$/;"	kind:member	struct:__anon39::__anon40::__anon41	access:public
__anon39::__anon40::body	protocol_binary.h	/^            } body;$/;"	kind:member	struct:__anon39::__anon40	typeref:struct:__anon39::__anon40::__anon41	access:public
__anon39::__anon40::header	protocol_binary.h	/^            protocol_binary_request_header header;$/;"	kind:member	struct:__anon39::__anon40	access:public
__anon39::bytes	protocol_binary.h	/^        uint8_t bytes[sizeof(protocol_binary_request_header) + 4];$/;"	kind:member	union:__anon39	access:public
__anon39::message	protocol_binary.h	/^        } message;$/;"	kind:member	union:__anon39	typeref:struct:__anon39::__anon40	access:public
__anon3::end_time	items.c	/^    rel_time_t end_time;$/;"	kind:member	struct:__anon3	file:	access:public
__anon3::histo	items.c	/^    uint64_t histo[61];$/;"	kind:member	struct:__anon3	file:	access:public
__anon3::noexp	items.c	/^    uint64_t noexp;$/;"	kind:member	struct:__anon3	file:	access:public
__anon3::reclaimed	items.c	/^    uint64_t reclaimed;$/;"	kind:member	struct:__anon3	file:	access:public
__anon3::run_complete	items.c	/^    bool run_complete;$/;"	kind:member	struct:__anon3	file:	access:public
__anon3::seen	items.c	/^    uint64_t seen;$/;"	kind:member	struct:__anon3	file:	access:public
__anon3::start_time	items.c	/^    rel_time_t start_time;$/;"	kind:member	struct:__anon3	file:	access:public
__anon3::ttl_hourplus	items.c	/^    uint64_t ttl_hourplus;$/;"	kind:member	struct:__anon3	file:	access:public
__anon42::__anon43::__anon44::flags	protocol_binary.h	/^                uint8_t  flags;$/;"	kind:member	struct:__anon42::__anon43::__anon44	access:public
__anon42::__anon43::__anon44::max_results	protocol_binary.h	/^                uint32_t max_results;$/;"	kind:member	struct:__anon42::__anon43::__anon44	access:public
__anon42::__anon43::__anon44::reserved	protocol_binary.h	/^                uint8_t  reserved;$/;"	kind:member	struct:__anon42::__anon43::__anon44	access:public
__anon42::__anon43::__anon44::size	protocol_binary.h	/^                uint16_t size;$/;"	kind:member	struct:__anon42::__anon43::__anon44	access:public
__anon42::__anon43::body	protocol_binary.h	/^            } body;$/;"	kind:member	struct:__anon42::__anon43	typeref:struct:__anon42::__anon43::__anon44	access:public
__anon42::__anon43::header	protocol_binary.h	/^            protocol_binary_response_header header;$/;"	kind:member	struct:__anon42::__anon43	access:public
__anon42::bytes	protocol_binary.h	/^        uint8_t bytes[sizeof(protocol_binary_request_header) + 4];$/;"	kind:member	union:__anon42	access:public
__anon42::message	protocol_binary.h	/^        } message;$/;"	kind:member	union:__anon42	typeref:struct:__anon42::__anon43	access:public
__anon45::list_size	slabs.c	/^    unsigned int list_size; \/* size of prev array *\/$/;"	kind:member	struct:__anon45	file:	access:public
__anon45::perslab	slabs.c	/^    unsigned int perslab;   \/* how many items per slab *\/$/;"	kind:member	struct:__anon45	file:	access:public
__anon45::requested	slabs.c	/^    size_t requested; \/* The number of requested bytes *\/$/;"	kind:member	struct:__anon45	file:	access:public
__anon45::size	slabs.c	/^    unsigned int size;      \/* sizes of items *\/$/;"	kind:member	struct:__anon45	file:	access:public
__anon45::sl_curr	slabs.c	/^    unsigned int sl_curr;   \/* total free items in list *\/$/;"	kind:member	struct:__anon45	file:	access:public
__anon45::slab_list	slabs.c	/^    void **slab_list;       \/* array of slab pointers *\/$/;"	kind:member	struct:__anon45	file:	access:public
__anon45::slabs	slabs.c	/^    unsigned int slabs;     \/* how many slabs were allocated for this class *\/$/;"	kind:member	struct:__anon45	file:	access:public
__anon45::slots	slabs.c	/^    void *slots;           \/* list of item ptrs *\/$/;"	kind:member	struct:__anon45	file:	access:public
__anon5::exptime	memcached.h	/^    rel_time_t      exptime;    \/* expire time *\/$/;"	kind:member	struct:__anon5	access:public
__anon5::h_next	memcached.h	/^    struct _stritem *h_next;    \/* hash chain next *\/$/;"	kind:member	struct:__anon5	typeref:struct:__anon5::_stritem	access:public
__anon5::it_flags	memcached.h	/^    uint8_t         it_flags;   \/* ITEM_* above *\/$/;"	kind:member	struct:__anon5	access:public
__anon5::nbytes	memcached.h	/^    int             nbytes;     \/* size of data *\/$/;"	kind:member	struct:__anon5	access:public
__anon5::next	memcached.h	/^    struct _stritem *next;$/;"	kind:member	struct:__anon5	typeref:struct:__anon5::_stritem	access:public
__anon5::nkey	memcached.h	/^    uint8_t         nkey;       \/* key length, w\/terminating null and padding *\/$/;"	kind:member	struct:__anon5	access:public
__anon5::nsuffix	memcached.h	/^    uint8_t         nsuffix;    \/* length of flags-and-length string *\/$/;"	kind:member	struct:__anon5	access:public
__anon5::prev	memcached.h	/^    struct _stritem *prev;$/;"	kind:member	struct:__anon5	typeref:struct:__anon5::_stritem	access:public
__anon5::refcount	memcached.h	/^    unsigned short  refcount;$/;"	kind:member	struct:__anon5	access:public
__anon5::remaining	memcached.h	/^    uint32_t        remaining;  \/* Max keys to crawl per slab per invocation *\/$/;"	kind:member	struct:__anon5	access:public
__anon5::slabs_clsid	memcached.h	/^    uint8_t         slabs_clsid;\/* which slab class we're in *\/$/;"	kind:member	struct:__anon5	access:public
__anon5::time	memcached.h	/^    rel_time_t      time;       \/* least recent access *\/$/;"	kind:member	struct:__anon5	access:public
__anon6::base	memcached.h	/^    struct event_base *base;    \/* libevent handle this thread uses *\/$/;"	kind:member	struct:__anon6	typeref:struct:__anon6::event_base	access:public
__anon6::new_conn_queue	memcached.h	/^    struct conn_queue *new_conn_queue; \/* queue of new connections to handle *\/$/;"	kind:member	struct:__anon6	typeref:struct:__anon6::conn_queue	access:public
__anon6::notify_event	memcached.h	/^    struct event notify_event;  \/* listen event for notify pipe *\/$/;"	kind:member	struct:__anon6	typeref:struct:__anon6::event	access:public
__anon6::notify_receive_fd	memcached.h	/^    int notify_receive_fd;      \/* receiving end of notify pipe *\/$/;"	kind:member	struct:__anon6	access:public
__anon6::notify_send_fd	memcached.h	/^    int notify_send_fd;         \/* sending end of notify pipe *\/$/;"	kind:member	struct:__anon6	access:public
__anon6::stats	memcached.h	/^    struct thread_stats stats;  \/* Stats generated by this thread *\/$/;"	kind:member	struct:__anon6	typeref:struct:__anon6::thread_stats	access:public
__anon6::suffix_cache	memcached.h	/^    cache_t *suffix_cache;      \/* suffix cache *\/$/;"	kind:member	struct:__anon6	access:public
__anon6::thread_id	memcached.h	/^    pthread_t thread_id;        \/* unique ID of this thread *\/$/;"	kind:member	struct:__anon6	access:public
__anon7::base	memcached.h	/^    struct event_base *base;    \/* libevent handle this thread uses *\/$/;"	kind:member	struct:__anon7	typeref:struct:__anon7::event_base	access:public
__anon7::thread_id	memcached.h	/^    pthread_t thread_id;        \/* unique ID of this thread *\/$/;"	kind:member	struct:__anon7	access:public
__builtin_expect	memcached.h	621;"	kind:macro
__gcc_attribute__	util.h	21;"	kind:macro
__gcc_attribute__	util.h	23;"	kind:macro
__need_IOV_MAX	memcached.c	34;"	kind:macro	file:
_append_prepend	t/binary-sasl.t	/^sub _append_prepend {$/;"	kind:subroutine
_append_prepend	t/binary.t	/^sub _append_prepend {$/;"	kind:subroutine
_do_command	t/binary-sasl.t	/^sub _do_command {$/;"	kind:subroutine
_do_command	t/binary.t	/^sub _do_command {$/;"	kind:subroutine
_handle_single_response	t/binary-sasl.t	/^sub _handle_single_response {$/;"	kind:subroutine
_handle_single_response	t/binary.t	/^sub _handle_single_response {$/;"	kind:subroutine
_hashitem_before	assoc.c	/^static item** _hashitem_before (const char *key, const size_t nkey, const uint32_t hv) {$/;"	kind:function	file:	signature:(const char *key, const size_t nkey, const uint32_t hv)
_incrdecr	t/binary-sasl.t	/^sub _incrdecr {$/;"	kind:subroutine
_incrdecr	t/binary.t	/^sub _incrdecr {$/;"	kind:subroutine
_incrdecr_cas	t/binary.t	/^sub _incrdecr_cas {$/;"	kind:subroutine
_incrdecr_header	t/binary-sasl.t	/^sub _incrdecr_header {$/;"	kind:subroutine
_incrdecr_header	t/binary.t	/^sub _incrdecr_header {$/;"	kind:subroutine
_prefix_stats	stats.c	/^struct _prefix_stats {$/;"	kind:struct	file:
_prefix_stats::next	stats.c	/^    PREFIX_STATS *next;$/;"	kind:member	struct:_prefix_stats	file:	access:public
_prefix_stats::num_deletes	stats.c	/^    uint64_t      num_deletes;$/;"	kind:member	struct:_prefix_stats	file:	access:public
_prefix_stats::num_gets	stats.c	/^    uint64_t      num_gets;$/;"	kind:member	struct:_prefix_stats	file:	access:public
_prefix_stats::num_hits	stats.c	/^    uint64_t      num_hits;$/;"	kind:member	struct:_prefix_stats	file:	access:public
_prefix_stats::num_sets	stats.c	/^    uint64_t      num_sets;$/;"	kind:member	struct:_prefix_stats	file:	access:public
_prefix_stats::prefix	stats.c	/^    char         *prefix;$/;"	kind:member	struct:_prefix_stats	file:	access:public
_prefix_stats::prefix_len	stats.c	/^    size_t        prefix_len;$/;"	kind:member	struct:_prefix_stats	file:	access:public
_stritem	memcached.h	/^typedef struct _stritem {$/;"	kind:struct
_stritem::__anon4::cas	memcached.h	/^        uint64_t cas;$/;"	kind:member	union:_stritem::__anon4	access:public
_stritem::__anon4::end	memcached.h	/^        char end;$/;"	kind:member	union:_stritem::__anon4	access:public
_stritem::data	memcached.h	/^    } data[];$/;"	kind:member	struct:_stritem	typeref:union:_stritem::__anon4	access:public
_stritem::exptime	memcached.h	/^    rel_time_t      exptime;    \/* expire time *\/$/;"	kind:member	struct:_stritem	access:public
_stritem::h_next	memcached.h	/^    struct _stritem *h_next;    \/* hash chain next *\/$/;"	kind:member	struct:_stritem	typeref:struct:_stritem::_stritem	access:public
_stritem::it_flags	memcached.h	/^    uint8_t         it_flags;   \/* ITEM_* above *\/$/;"	kind:member	struct:_stritem	access:public
_stritem::nbytes	memcached.h	/^    int             nbytes;     \/* size of data *\/$/;"	kind:member	struct:_stritem	access:public
_stritem::next	memcached.h	/^    struct _stritem *next;$/;"	kind:member	struct:_stritem	typeref:struct:_stritem::_stritem	access:public
_stritem::nkey	memcached.h	/^    uint8_t         nkey;       \/* key length, w\/terminating null and padding *\/$/;"	kind:member	struct:_stritem	access:public
_stritem::nsuffix	memcached.h	/^    uint8_t         nsuffix;    \/* length of flags-and-length string *\/$/;"	kind:member	struct:_stritem	access:public
_stritem::prev	memcached.h	/^    struct _stritem *prev;$/;"	kind:member	struct:_stritem	typeref:struct:_stritem::_stritem	access:public
_stritem::refcount	memcached.h	/^    unsigned short  refcount;$/;"	kind:member	struct:_stritem	access:public
_stritem::slabs_clsid	memcached.h	/^    uint8_t         slabs_clsid;\/* which slab class we're in *\/$/;"	kind:member	struct:_stritem	access:public
_stritem::time	memcached.h	/^    rel_time_t      time;       \/* least recent access *\/$/;"	kind:member	struct:_stritem	access:public
abs_builddir	doc/Makefile	/^abs_builddir = \/home\/dormando\/d\/p\/danga\/git\/memcached\/doc$/;"	kind:macro
abs_srcdir	doc/Makefile	/^abs_srcdir = \/home\/dormando\/d\/p\/danga\/git\/memcached\/doc$/;"	kind:macro
abs_top_builddir	doc/Makefile	/^abs_top_builddir = \/home\/dormando\/d\/p\/danga\/git\/memcached$/;"	kind:macro
abs_top_srcdir	doc/Makefile	/^abs_top_srcdir = \/home\/dormando\/d\/p\/danga\/git\/memcached$/;"	kind:macro
ac_ct_CC	doc/Makefile	/^ac_ct_CC = gcc$/;"	kind:macro
ac_fn_c_check_decl	configure	/^ac_fn_c_check_decl ()$/;"	kind:function
ac_fn_c_check_func	configure	/^ac_fn_c_check_func ()$/;"	kind:function
ac_fn_c_check_header_compile	configure	/^ac_fn_c_check_header_compile ()$/;"	kind:function
ac_fn_c_check_header_mongrel	configure	/^ac_fn_c_check_header_mongrel ()$/;"	kind:function
ac_fn_c_check_type	configure	/^ac_fn_c_check_type ()$/;"	kind:function
ac_fn_c_try_compile	configure	/^ac_fn_c_try_compile ()$/;"	kind:function
ac_fn_c_try_cpp	configure	/^ac_fn_c_try_cpp ()$/;"	kind:function
ac_fn_c_try_link	configure	/^ac_fn_c_try_link ()$/;"	kind:function
ac_fn_c_try_run	configure	/^ac_fn_c_try_run ()$/;"	kind:function
accept_new_conns	memcached.h	/^void accept_new_conns(const bool do_accept);$/;"	kind:prototype	signature:(const bool do_accept)
accept_new_conns	thread.c	/^void accept_new_conns(const bool do_accept) {$/;"	kind:function	signature:(const bool do_accept)
accepting_conns	memcached.h	/^    bool          accepting_conns;  \/* whether we are currently accepting *\/$/;"	kind:member	struct:stats	access:public
access	memcached.h	/^    int access;  \/* access mask (a la chmod) for unix domain socket *\/$/;"	kind:member	struct:settings	access:public
add	t/binary-sasl.t	/^sub add {$/;"	kind:subroutine
add	t/binary.t	/^sub add {$/;"	kind:subroutine
add_bin_header	memcached.c	/^static void add_bin_header(conn *c, uint16_t err, uint8_t hdr_len, uint16_t key_len, uint32_t body_len) {$/;"	kind:function	file:	signature:(conn *c, uint16_t err, uint8_t hdr_len, uint16_t key_len, uint32_t body_len)
add_delta	memcached.h	/^enum delta_result_type add_delta(conn *c, const char *key,$/;"	kind:prototype	signature:(conn *c, const char *key, const size_t nkey, const int incr, const int64_t delta, char *buf, uint64_t *cas)
add_delta	thread.c	/^enum delta_result_type add_delta(conn *c, const char *key,$/;"	kind:function	signature:(conn *c, const char *key, const size_t nkey, int incr, const int64_t delta, char *buf, uint64_t *cas)
add_iov	memcached.c	/^static int add_iov(conn *c, const void *buf, int len) {$/;"	kind:function	file:	signature:(conn *c, const void *buf, int len)
add_iov	memcached.c	/^static int add_iov(conn *c, const void *buf, int len);$/;"	kind:prototype	file:	signature:(conn *c, const void *buf, int len)
add_msghdr	memcached.c	/^static int add_msghdr(conn *c)$/;"	kind:function	file:	signature:(conn *c)
add_msghdr	memcached.c	/^static int add_msghdr(conn *c);$/;"	kind:prototype	file:	signature:(conn *c)
aix_post_process_depfile	depcomp	/^aix_post_process_depfile ()$/;"	kind:function
allow_closed_read	testapp.c	/^static bool allow_closed_read = false;$/;"	kind:variable	file:
allow_new_conns	memcached.c	/^static volatile bool allow_new_conns = true;$/;"	kind:variable	file:
am__aclocal_m4_deps	doc/Makefile	/^am__aclocal_m4_deps = $(top_srcdir)\/version.m4 \\$/;"	kind:macro
am__base_list	doc/Makefile	/^am__base_list = \\$/;"	kind:macro
am__can_run_installinfo	doc/Makefile	/^am__can_run_installinfo = \\$/;"	kind:macro
am__cd	doc/Makefile	/^am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd$/;"	kind:macro
am__configure_deps	doc/Makefile	/^am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\$/;"	kind:macro
am__include	doc/Makefile	/^am__include = include$/;"	kind:macro
am__install_max	doc/Makefile	/^am__install_max = 40$/;"	kind:macro
am__installdirs	doc/Makefile	/^am__installdirs = "$(DESTDIR)$(man1dir)"$/;"	kind:macro
am__is_gnu_make	doc/Makefile	/^am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'$/;"	kind:macro
am__leading_dot	doc/Makefile	/^am__leading_dot = .$/;"	kind:macro
am__make_dryrun	doc/Makefile	/^am__make_dryrun = (target_option=n; $(am__make_running_with_option))$/;"	kind:macro
am__make_keepgoing	doc/Makefile	/^am__make_keepgoing = (target_option=k; $(am__make_running_with_option))$/;"	kind:macro
am__make_running_with_option	doc/Makefile	/^am__make_running_with_option = \\$/;"	kind:macro
am__nobase_list	doc/Makefile	/^am__nobase_list = $(am__nobase_strip_setup); \\$/;"	kind:macro
am__nobase_strip	doc/Makefile	/^am__nobase_strip = \\$/;"	kind:macro
am__nobase_strip_setup	doc/Makefile	/^am__nobase_strip_setup = \\$/;"	kind:macro
am__quote	doc/Makefile	/^am__quote = $/;"	kind:macro
am__strip_dir	doc/Makefile	/^am__strip_dir = f=`echo $$p | sed -e 's|^.*\/||'`;$/;"	kind:macro
am__tagged_files	doc/Makefile	/^am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) $(LISP)$/;"	kind:macro
am__tar	doc/Makefile	/^am__tar = $${TAR-tar} chof - "$$tardir"$/;"	kind:macro
am__uninstall_files_from_dir	doc/Makefile	/^am__uninstall_files_from_dir = { \\$/;"	kind:macro
am__untar	doc/Makefile	/^am__untar = $${TAR-tar} xf -$/;"	kind:macro
am__v_GEN_	doc/Makefile	/^am__v_GEN_ = $(am__v_GEN_$(AM_DEFAULT_VERBOSITY))$/;"	kind:macro
am__v_GEN_0	doc/Makefile	/^am__v_GEN_0 = @echo "  GEN     " $@;$/;"	kind:macro
am__v_GEN_1	doc/Makefile	/^am__v_GEN_1 = $/;"	kind:macro
am__v_P_	doc/Makefile	/^am__v_P_ = $(am__v_P_$(AM_DEFAULT_VERBOSITY))$/;"	kind:macro
am__v_P_0	doc/Makefile	/^am__v_P_0 = false$/;"	kind:macro
am__v_P_1	doc/Makefile	/^am__v_P_1 = :$/;"	kind:macro
am__v_at_	doc/Makefile	/^am__v_at_ = $(am__v_at_$(AM_DEFAULT_VERBOSITY))$/;"	kind:macro
am__v_at_0	doc/Makefile	/^am__v_at_0 = @$/;"	kind:macro
am__v_at_1	doc/Makefile	/^am__v_at_1 = $/;"	kind:macro
am__vpath_adj	doc/Makefile	/^am__vpath_adj = case $$p in \\$/;"	kind:macro
am__vpath_adj_setup	doc/Makefile	/^am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;$/;"	kind:macro
append_ascii_stats	memcached.c	/^static void append_ascii_stats(const char *key, const uint16_t klen,$/;"	kind:function	file:	signature:(const char *key, const uint16_t klen, const char *val, const uint32_t vlen, conn *c)
append_bin_stats	memcached.c	/^static void append_bin_stats(const char *key, const uint16_t klen,$/;"	kind:function	file:	signature:(const char *key, const uint16_t klen, const char *val, const uint32_t vlen, conn *c)
append_stat	memcached.c	/^void append_stat(const char *name, ADD_STAT add_stats, conn *c,$/;"	kind:function	signature:(const char *name, ADD_STAT add_stats, conn *c, const char *fmt, ...)
append_stat	memcached.h	/^void append_stat(const char *name, ADD_STAT add_stats, conn *c,$/;"	kind:prototype	signature:(const char *name, ADD_STAT add_stats, conn *c, const char *fmt, ...)
append_stats	memcached.c	/^static void append_stats(const char *key, const uint16_t klen,$/;"	kind:function	file:	signature:(const char *key, const uint16_t klen, const char *val, const uint32_t vlen, const void *cookie)
arithmetic_command	testapp.c	/^static off_t arithmetic_command(char* buf,$/;"	kind:function	file:	signature:(char* buf, size_t bufsz, uint8_t cmd, const void* key, size_t keylen, uint64_t delta, uint64_t initial, uint32_t exp)
as_fn_append	configure	/^  as_fn_append ()$/;"	kind:function
as_fn_arith	configure	/^  as_fn_arith ()$/;"	kind:function
as_fn_error	configure	/^as_fn_error ()$/;"	kind:function
as_fn_executable_p	configure	/^as_fn_executable_p ()$/;"	kind:function
as_fn_exit	configure	/^as_fn_exit ()$/;"	kind:function
as_fn_failure	configure	/^as_fn_failure () { as_fn_return 1; }$/;"	kind:function
as_fn_mkdir_p	configure	/^as_fn_mkdir_p ()$/;"	kind:function
as_fn_ret_failure	configure	/^as_fn_ret_failure () { return 1; }$/;"	kind:function
as_fn_ret_success	configure	/^as_fn_ret_success () { return 0; }$/;"	kind:function
as_fn_set_status	configure	/^as_fn_set_status ()$/;"	kind:function
as_fn_success	configure	/^as_fn_success () { as_fn_return 0; }$/;"	kind:function
as_fn_unset	configure	/^as_fn_unset ()$/;"	kind:function
ascii_prot	memcached.h	/^    ascii_prot = 3, \/* arbitrary value. *\/$/;"	kind:enumerator	enum:protocol
assoc_delete	assoc.c	/^void assoc_delete(const char *key, const size_t nkey, const uint32_t hv) {$/;"	kind:function	signature:(const char *key, const size_t nkey, const uint32_t hv)
assoc_delete	assoc.h	/^void assoc_delete(const char *key, const size_t nkey, const uint32_t hv);$/;"	kind:prototype	signature:(const char *key, const size_t nkey, const uint32_t hv)
assoc_expand	assoc.c	/^static void assoc_expand(void) {$/;"	kind:function	file:	signature:(void)
assoc_find	assoc.c	/^item *assoc_find(const char *key, const size_t nkey, const uint32_t hv) {$/;"	kind:function	signature:(const char *key, const size_t nkey, const uint32_t hv)
assoc_find	assoc.h	/^item *assoc_find(const char *key, const size_t nkey, const uint32_t hv);$/;"	kind:prototype	signature:(const char *key, const size_t nkey, const uint32_t hv)
assoc_init	assoc.c	/^void assoc_init(const int hashtable_init) {$/;"	kind:function	signature:(const int hashtable_init)
assoc_init	assoc.h	/^void assoc_init(const int hashpower_init);$/;"	kind:prototype	signature:(const int hashpower_init)
assoc_insert	assoc.c	/^int assoc_insert(item *it, const uint32_t hv) {$/;"	kind:function	signature:(item *it, const uint32_t hv)
assoc_insert	assoc.h	/^int assoc_insert(item *item, const uint32_t hv);$/;"	kind:prototype	signature:(item *item, const uint32_t hv)
assoc_maintenance_thread	assoc.c	/^static void *assoc_maintenance_thread(void *arg) {$/;"	kind:function	file:	signature:(void *arg)
assoc_start_expand	assoc.c	/^static void assoc_start_expand(void) {$/;"	kind:function	file:	signature:(void)
atomics_mutex	thread.c	/^pthread_mutex_t atomics_mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	kind:variable
auth_cmds	memcached.h	/^    uint64_t          auth_cmds;$/;"	kind:member	struct:thread_stats	access:public
auth_error	t/binary-sasl.t	/^sub auth_error {$/;"	kind:subroutine
auth_errors	memcached.h	/^    uint64_t          auth_errors;$/;"	kind:member	struct:thread_stats	access:public
authenticate	t/binary-sasl.t	/^sub authenticate {$/;"	kind:subroutine
authenticated	memcached.c	/^static bool authenticated(conn *c) {$/;"	kind:function	file:	signature:(conn *c)
authenticated	memcached.h	/^    bool authenticated;$/;"	kind:member	struct:conn	access:public
automove_basic	scripts/mc_slab_mover	/^sub automove_basic {$/;"	kind:subroutine
backlog	memcached.h	/^    int backlog;$/;"	kind:member	struct:settings	access:public
base	memcached.h	/^    struct event_base *base;    \/* libevent handle this thread uses *\/$/;"	kind:member	struct:__anon6	typeref:struct:__anon6::event_base	access:public
base	memcached.h	/^    struct event_base *base;    \/* libevent handle this thread uses *\/$/;"	kind:member	struct:__anon7	typeref:struct:__anon7::event_base	access:public
bin_list_sasl_mechs	memcached.c	/^static void bin_list_sasl_mechs(conn *c) {$/;"	kind:function	file:	signature:(conn *c)
bin_no_state	memcached.h	/^    bin_no_state,$/;"	kind:enumerator	enum:bin_substates
bin_read_flush_exptime	memcached.h	/^    bin_read_flush_exptime,$/;"	kind:enumerator	enum:bin_substates
bin_read_key	memcached.c	/^static void bin_read_key(conn *c, enum bin_substates next_substate, int extra) {$/;"	kind:function	file:	signature:(conn *c, enum bin_substates next_substate, int extra)
bin_read_set_value	memcached.h	/^    bin_read_set_value,$/;"	kind:enumerator	enum:bin_substates
bin_reading_cas_header	memcached.h	/^    bin_reading_cas_header,$/;"	kind:enumerator	enum:bin_substates
bin_reading_del_header	memcached.h	/^    bin_reading_del_header,$/;"	kind:enumerator	enum:bin_substates
bin_reading_get_key	memcached.h	/^    bin_reading_get_key,$/;"	kind:enumerator	enum:bin_substates
bin_reading_incr_header	memcached.h	/^    bin_reading_incr_header,$/;"	kind:enumerator	enum:bin_substates
bin_reading_sasl_auth	memcached.h	/^    bin_reading_sasl_auth,$/;"	kind:enumerator	enum:bin_substates
bin_reading_sasl_auth_data	memcached.h	/^    bin_reading_sasl_auth_data,$/;"	kind:enumerator	enum:bin_substates
bin_reading_set_header	memcached.h	/^    bin_reading_set_header,$/;"	kind:enumerator	enum:bin_substates
bin_reading_stat	memcached.h	/^    bin_reading_stat,$/;"	kind:enumerator	enum:bin_substates
bin_reading_touch_key	memcached.h	/^    bin_reading_touch_key,$/;"	kind:enumerator	enum:bin_substates
bin_substates	memcached.h	/^enum bin_substates {$/;"	kind:enum
binary_get_key	memcached.c	/^static char* binary_get_key(conn *c) {$/;"	kind:function	file:	signature:(conn *c)
binary_get_request	memcached.c	/^static void* binary_get_request(conn *c) {$/;"	kind:function	file:	signature:(conn *c)
binary_header	memcached.h	/^    protocol_binary_request_header binary_header;$/;"	kind:member	struct:conn	access:public
binary_hickup_recv_verification_thread	testapp.c	/^static void *binary_hickup_recv_verification_thread(void *arg) {$/;"	kind:function	file:	signature:(void *arg)
binary_prot	memcached.h	/^    binary_prot,$/;"	kind:enumerator	enum:protocol
binding_protocol	memcached.h	/^    enum protocol binding_protocol;$/;"	kind:member	struct:settings	typeref:enum:settings::protocol	access:public
bindir	doc/Makefile	/^bindir = ${exec_prefix}\/bin$/;"	kind:macro
body	protocol_binary.h	/^            } body;$/;"	kind:member	struct:__anon21::__anon22	typeref:struct:__anon21::__anon22::__anon23	access:public
body	protocol_binary.h	/^            } body;$/;"	kind:member	struct:__anon24::__anon25	typeref:struct:__anon24::__anon25::__anon26	access:public
body	protocol_binary.h	/^            } body;$/;"	kind:member	struct:__anon27::__anon28	typeref:struct:__anon27::__anon28::__anon29	access:public
body	protocol_binary.h	/^            } body;$/;"	kind:member	struct:__anon30::__anon31	typeref:struct:__anon30::__anon31::__anon32	access:public
body	protocol_binary.h	/^            } body;$/;"	kind:member	struct:__anon33::__anon34	typeref:struct:__anon33::__anon34::__anon35	access:public
body	protocol_binary.h	/^            } body;$/;"	kind:member	struct:__anon36::__anon37	typeref:struct:__anon36::__anon37::__anon38	access:public
body	protocol_binary.h	/^            } body;$/;"	kind:member	struct:__anon39::__anon40	typeref:struct:__anon39::__anon40::__anon41	access:public
body	protocol_binary.h	/^            } body;$/;"	kind:member	struct:__anon42::__anon43	typeref:struct:__anon42::__anon43::__anon44	access:public
bodylen	protocol_binary.h	/^            uint32_t bodylen;$/;"	kind:member	struct:__anon13::__anon14	access:public
bodylen	protocol_binary.h	/^            uint32_t bodylen;$/;"	kind:member	struct:__anon15::__anon16	access:public
buffer	memcached.h	/^        char *buffer;$/;"	kind:member	struct:conn::__anon8	access:public
bufsize	cache.h	/^    size_t bufsize;$/;"	kind:member	struct:__anon1	access:public
build	doc/Makefile	/^build = x86_64-unknown-linux-gnu$/;"	kind:macro
build_alias	doc/Makefile	/^build_alias = $/;"	kind:macro
build_command	t/binary-sasl.t	/^sub build_command {$/;"	kind:subroutine
build_command	t/binary.t	/^sub build_command {$/;"	kind:subroutine
build_cpu	doc/Makefile	/^build_cpu = x86_64$/;"	kind:macro
build_os	doc/Makefile	/^build_os = linux-gnu$/;"	kind:macro
build_triplet	doc/Makefile	/^build_triplet = x86_64-unknown-linux-gnu$/;"	kind:macro
build_udp_headers	memcached.c	/^static int build_udp_headers(conn *c) {$/;"	kind:function	file:	signature:(conn *c)
build_vendor	doc/Makefile	/^build_vendor = unknown$/;"	kind:macro
builddir	doc/Makefile	/^builddir = .$/;"	kind:macro
busy_items	memcached.h	/^    uint32_t busy_items;$/;"	kind:member	struct:slab_rebalance	access:public
bytes	protocol_binary.h	/^        uint8_t bytes[24];$/;"	kind:member	union:__anon13	access:public
bytes	protocol_binary.h	/^        uint8_t bytes[24];$/;"	kind:member	union:__anon15	access:public
bytes	protocol_binary.h	/^        uint8_t bytes[sizeof(protocol_binary_request_header) + 20];$/;"	kind:member	union:__anon30	access:public
bytes	protocol_binary.h	/^        uint8_t bytes[sizeof(protocol_binary_request_header) + 4];$/;"	kind:member	union:__anon24	access:public
bytes	protocol_binary.h	/^        uint8_t bytes[sizeof(protocol_binary_request_header) + 4];$/;"	kind:member	union:__anon36	access:public
bytes	protocol_binary.h	/^        uint8_t bytes[sizeof(protocol_binary_request_header) + 4];$/;"	kind:member	union:__anon39	access:public
bytes	protocol_binary.h	/^        uint8_t bytes[sizeof(protocol_binary_request_header) + 4];$/;"	kind:member	union:__anon42	access:public
bytes	protocol_binary.h	/^        uint8_t bytes[sizeof(protocol_binary_request_header) + 8];$/;"	kind:member	union:__anon27	access:public
bytes	protocol_binary.h	/^        uint8_t bytes[sizeof(protocol_binary_request_header)];$/;"	kind:member	union:__anon17	access:public
bytes	protocol_binary.h	/^        uint8_t bytes[sizeof(protocol_binary_response_header) + 4];$/;"	kind:member	union:__anon21	access:public
bytes	protocol_binary.h	/^        uint8_t bytes[sizeof(protocol_binary_response_header) + 8];$/;"	kind:member	union:__anon33	access:public
bytes	protocol_binary.h	/^        uint8_t bytes[sizeof(protocol_binary_response_header)];$/;"	kind:member	union:__anon19	access:public
bytes_read	memcached.h	/^    uint64_t          bytes_read;$/;"	kind:member	struct:thread_stats	access:public
bytes_written	memcached.h	/^    uint64_t          bytes_written;$/;"	kind:member	struct:thread_stats	access:public
cache_alloc	cache.c	/^void* cache_alloc(cache_t *cache) {$/;"	kind:function	signature:(cache_t *cache)
cache_alloc	cache.h	/^void* cache_alloc(cache_t* handle);$/;"	kind:prototype	signature:(cache_t* handle)
cache_alloc	cache.h	9;"	kind:macro
cache_bulkalloc	testapp.c	/^static enum test_return cache_bulkalloc(size_t datasize)$/;"	kind:function	file:	signature:(size_t datasize)
cache_constructor	testapp.c	/^static int cache_constructor(void *buffer, void *notused1, int notused2) {$/;"	kind:function	file:	signature:(void *buffer, void *notused1, int notused2)
cache_constructor_t	cache.h	/^typedef int cache_constructor_t(void* obj, void* notused1, int notused2);$/;"	kind:typedef
cache_constructor_test	testapp.c	/^static enum test_return cache_constructor_test(void)$/;"	kind:function	file:	signature:(void)
cache_create	cache.c	/^cache_t* cache_create(const char *name, size_t bufsize, size_t align,$/;"	kind:function	signature:(const char *name, size_t bufsize, size_t align, cache_constructor_t* constructor, cache_destructor_t* destructor)
cache_create	cache.h	/^cache_t* cache_create(const char* name, size_t bufsize, size_t align,$/;"	kind:prototype	signature:(const char* name, size_t bufsize, size_t align, cache_constructor_t* constructor, cache_destructor_t* destructor)
cache_create	cache.h	11;"	kind:macro
cache_create_test	testapp.c	/^static enum test_return cache_create_test(void)$/;"	kind:function	file:	signature:(void)
cache_destroy	cache.c	/^void cache_destroy(cache_t *cache) {$/;"	kind:function	signature:(cache_t *cache)
cache_destroy	cache.h	/^void cache_destroy(cache_t* handle);$/;"	kind:prototype	signature:(cache_t* handle)
cache_destroy	cache.h	12;"	kind:macro
cache_destructor	testapp.c	/^static void cache_destructor(void *buffer, void *notused) {$/;"	kind:function	file:	signature:(void *buffer, void *notused)
cache_destructor_t	cache.h	/^typedef void cache_destructor_t(void* obj, void* notused);$/;"	kind:typedef
cache_destructor_test	testapp.c	/^static enum test_return cache_destructor_test(void)$/;"	kind:function	file:	signature:(void)
cache_error	cache.c	/^int cache_error = 0;$/;"	kind:variable
cache_error	cache.h	/^extern int cache_error;$/;"	kind:externvar
cache_fail_constructor	testapp.c	/^static int cache_fail_constructor(void *buffer, void *notused1, int notused2) {$/;"	kind:function	file:	signature:(void *buffer, void *notused1, int notused2)
cache_fail_constructor_test	testapp.c	/^static enum test_return cache_fail_constructor_test(void)$/;"	kind:function	file:	signature:(void)
cache_free	cache.c	/^void cache_free(cache_t *cache, void *ptr) {$/;"	kind:function	signature:(cache_t *cache, void *ptr)
cache_free	cache.h	/^void cache_free(cache_t* handle, void* ptr);$/;"	kind:prototype	signature:(cache_t* handle, void* ptr)
cache_free	cache.h	10;"	kind:macro
cache_redzone_test	testapp.c	/^static enum test_return cache_redzone_test(void)$/;"	kind:function	file:	signature:(void)
cache_reuse_test	testapp.c	/^static enum test_return cache_reuse_test(void)$/;"	kind:function	file:	signature:(void)
cache_t	cache.h	/^} cache_t;$/;"	kind:typedef	typeref:struct:__anon1
cache_t	cache.h	8;"	kind:macro
calc_results_evicted	scripts/mc_slab_mover	/^sub calc_results_evicted {$/;"	kind:subroutine
calc_results_numratio	scripts/mc_slab_mover	/^sub calc_results_numratio {$/;"	kind:subroutine
calc_slabs	scripts/mc_slab_mover	/^sub calc_slabs {$/;"	kind:subroutine
call_stats	scripts/damemtop	/^sub call_stats {$/;"	kind:subroutine
cas	memcached.h	/^        uint64_t cas;$/;"	kind:member	union:_stritem::__anon4	access:public
cas	memcached.h	/^    uint64_t cas; \/* the cas to return *\/$/;"	kind:member	struct:conn	access:public
cas	protocol_binary.h	/^            uint64_t cas;$/;"	kind:member	struct:__anon13::__anon14	access:public
cas	protocol_binary.h	/^            uint64_t cas;$/;"	kind:member	struct:__anon15::__anon16	access:public
cas_badval	memcached.h	/^    uint64_t  cas_badval;$/;"	kind:member	struct:slab_stats	access:public
cas_hits	memcached.h	/^    uint64_t  cas_hits;$/;"	kind:member	struct:slab_stats	access:public
cas_id_lock	items.c	/^static pthread_mutex_t cas_id_lock = PTHREAD_MUTEX_INITIALIZER;$/;"	kind:variable	file:
cas_misses	memcached.h	/^    uint64_t          cas_misses;$/;"	kind:member	struct:thread_stats	access:public
caught	timedrun.c	/^static int caught = 0;$/;"	kind:variable	file:
caught_signal	timedrun.c	/^static void caught_signal(int which)$/;"	kind:function	file:	signature:(int which)
check_cas_stats	t/stats.t	/^sub check_cas_stats {$/;"	kind:subroutine
check_incr_stats	t/stats.t	/^sub check_incr_stats {$/;"	kind:subroutine
chunk_size	memcached.h	/^    int chunk_size;$/;"	kind:member	struct:settings	access:public
clear_screen	scripts/damemtop	/^sub clear_screen {$/;"	kind:subroutine
clock_handler	memcached.c	/^static void clock_handler(const int fd, const short which, void *arg) {$/;"	kind:function	file:	signature:(const int fd, const short which, void *arg)
clockevent	memcached.c	/^static struct event clockevent;$/;"	kind:variable	typeref:struct:event	file:
cmd	memcached.h	/^    short cmd; \/* current command being processed *\/$/;"	kind:member	struct:conn	access:public
column_can_total	scripts/damemtop	/^sub column_can_total {$/;"	kind:subroutine
complete_incr_bin	memcached.c	/^static void complete_incr_bin(conn *c) {$/;"	kind:function	file:	signature:(conn *c)
complete_nread	memcached.c	/^static void complete_nread(conn *c) {$/;"	kind:function	file:	signature:(conn *c)
complete_nread	memcached.c	/^static void complete_nread(conn *c);$/;"	kind:prototype	file:	signature:(conn *c)
complete_nread_ascii	memcached.c	/^static void complete_nread_ascii(conn *c) {$/;"	kind:function	file:	signature:(conn *c)
complete_nread_binary	memcached.c	/^static void complete_nread_binary(conn *c) {$/;"	kind:function	file:	signature:(conn *c)
complete_update_bin	memcached.c	/^static void complete_update_bin(conn *c) {$/;"	kind:function	file:	signature:(conn *c)
compute_column	scripts/damemtop	/^sub compute_column {$/;"	kind:subroutine
compute_fill_rate	scripts/damemtop	/^sub compute_fill_rate {$/;"	kind:subroutine
compute_hit_rate	scripts/damemtop	/^sub compute_hit_rate {$/;"	kind:subroutine
compute_hostname	scripts/damemtop	/^sub compute_hostname {$/;"	kind:subroutine
conn	memcached.h	/^struct conn {$/;"	kind:struct
conn	memcached.h	/^typedef struct conn conn;$/;"	kind:typedef	typeref:struct:conn
conn::__anon8::buffer	memcached.h	/^        char *buffer;$/;"	kind:member	struct:conn::__anon8	access:public
conn::__anon8::offset	memcached.h	/^        size_t offset;$/;"	kind:member	struct:conn::__anon8	access:public
conn::__anon8::size	memcached.h	/^        size_t size;$/;"	kind:member	struct:conn::__anon8	access:public
conn::authenticated	memcached.h	/^    bool authenticated;$/;"	kind:member	struct:conn	access:public
conn::binary_header	memcached.h	/^    protocol_binary_request_header binary_header;$/;"	kind:member	struct:conn	access:public
conn::cas	memcached.h	/^    uint64_t cas; \/* the cas to return *\/$/;"	kind:member	struct:conn	access:public
conn::cmd	memcached.h	/^    short cmd; \/* current command being processed *\/$/;"	kind:member	struct:conn	access:public
conn::ev_flags	memcached.h	/^    short  ev_flags;$/;"	kind:member	struct:conn	access:public
conn::event	memcached.h	/^    struct event event;$/;"	kind:member	struct:conn	typeref:struct:conn::event	access:public
conn::hdrbuf	memcached.h	/^    unsigned char *hdrbuf; \/* udp packet headers *\/$/;"	kind:member	struct:conn	access:public
conn::hdrsize	memcached.h	/^    int    hdrsize;   \/* number of headers' worth of space is allocated *\/$/;"	kind:member	struct:conn	access:public
conn::icurr	memcached.h	/^    item   **icurr;$/;"	kind:member	struct:conn	access:public
conn::ileft	memcached.h	/^    int    ileft;$/;"	kind:member	struct:conn	access:public
conn::ilist	memcached.h	/^    item   **ilist;   \/* list of items to write out *\/$/;"	kind:member	struct:conn	access:public
conn::iov	memcached.h	/^    struct iovec *iov;$/;"	kind:member	struct:conn	typeref:struct:conn::iovec	access:public
conn::iovsize	memcached.h	/^    int    iovsize;   \/* number of elements allocated in iov[] *\/$/;"	kind:member	struct:conn	access:public
conn::iovused	memcached.h	/^    int    iovused;   \/* number of elements used in iov[] *\/$/;"	kind:member	struct:conn	access:public
conn::isize	memcached.h	/^    int    isize;$/;"	kind:member	struct:conn	access:public
conn::item	memcached.h	/^    void   *item;     \/* for commands set\/add\/replace  *\/$/;"	kind:member	struct:conn	access:public
conn::keylen	memcached.h	/^    int keylen;$/;"	kind:member	struct:conn	access:public
conn::last_cmd_time	memcached.h	/^    rel_time_t last_cmd_time;$/;"	kind:member	struct:conn	access:public
conn::msgbytes	memcached.h	/^    int    msgbytes;  \/* number of bytes in current msg *\/$/;"	kind:member	struct:conn	access:public
conn::msgcurr	memcached.h	/^    int    msgcurr;   \/* element in msglist[] being transmitted now *\/$/;"	kind:member	struct:conn	access:public
conn::msglist	memcached.h	/^    struct msghdr *msglist;$/;"	kind:member	struct:conn	typeref:struct:conn::msghdr	access:public
conn::msgsize	memcached.h	/^    int    msgsize;   \/* number of elements allocated in msglist[] *\/$/;"	kind:member	struct:conn	access:public
conn::msgused	memcached.h	/^    int    msgused;   \/* number of elements used in msglist[] *\/$/;"	kind:member	struct:conn	access:public
conn::next	memcached.h	/^    conn   *next;     \/* Used for generating a list of conn structures *\/$/;"	kind:member	struct:conn	access:public
conn::noreply	memcached.h	/^    bool   noreply;   \/* True if the reply should not be sent. *\/$/;"	kind:member	struct:conn	access:public
conn::opaque	memcached.h	/^    int opaque;$/;"	kind:member	struct:conn	access:public
conn::protocol	memcached.h	/^    enum protocol protocol;   \/* which protocol this connection speaks *\/$/;"	kind:member	struct:conn	typeref:enum:conn::protocol	access:public
conn::rbuf	memcached.h	/^    char   *rbuf;   \/** buffer to read commands into *\/$/;"	kind:member	struct:conn	access:public
conn::rbytes	memcached.h	/^    int    rbytes;  \/** how much data, starting from rcur, do we have unparsed *\/$/;"	kind:member	struct:conn	access:public
conn::rcurr	memcached.h	/^    char   *rcurr;  \/** but if we parsed some already, this is where we stopped *\/$/;"	kind:member	struct:conn	access:public
conn::request_addr	memcached.h	/^    struct sockaddr_in6 request_addr; \/* udp: Who sent the most recent request *\/$/;"	kind:member	struct:conn	typeref:struct:conn::sockaddr_in6	access:public
conn::request_addr_size	memcached.h	/^    socklen_t request_addr_size;$/;"	kind:member	struct:conn	access:public
conn::request_id	memcached.h	/^    int    request_id; \/* Incoming UDP request ID, if this is a UDP "connection" *\/$/;"	kind:member	struct:conn	access:public
conn::ritem	memcached.h	/^    char   *ritem;  \/** when we read in an item's value, it goes here *\/$/;"	kind:member	struct:conn	access:public
conn::rlbytes	memcached.h	/^    int    rlbytes;$/;"	kind:member	struct:conn	access:public
conn::rsize	memcached.h	/^    int    rsize;   \/** total allocated size of rbuf *\/$/;"	kind:member	struct:conn	access:public
conn::sasl_conn	memcached.h	/^    sasl_conn_t *sasl_conn;$/;"	kind:member	struct:conn	access:public
conn::sbytes	memcached.h	/^    int    sbytes;    \/* how many bytes to swallow *\/$/;"	kind:member	struct:conn	access:public
conn::sfd	memcached.h	/^    int    sfd;$/;"	kind:member	struct:conn	access:public
conn::state	memcached.h	/^    enum conn_states  state;$/;"	kind:member	struct:conn	typeref:enum:conn::conn_states	access:public
conn::stats	memcached.h	/^    } stats;$/;"	kind:member	struct:conn	typeref:struct:conn::__anon8	access:public
conn::substate	memcached.h	/^    enum bin_substates substate;$/;"	kind:member	struct:conn	typeref:enum:conn::bin_substates	access:public
conn::suffixcurr	memcached.h	/^    char   **suffixcurr;$/;"	kind:member	struct:conn	access:public
conn::suffixleft	memcached.h	/^    int    suffixleft;$/;"	kind:member	struct:conn	access:public
conn::suffixlist	memcached.h	/^    char   **suffixlist;$/;"	kind:member	struct:conn	access:public
conn::suffixsize	memcached.h	/^    int    suffixsize;$/;"	kind:member	struct:conn	access:public
conn::thread	memcached.h	/^    LIBEVENT_THREAD *thread; \/* Pointer to the thread object serving this connection *\/$/;"	kind:member	struct:conn	access:public
conn::transport	memcached.h	/^    enum network_transport transport; \/* what transport is used by this connection *\/$/;"	kind:member	struct:conn	typeref:enum:conn::network_transport	access:public
conn::wbuf	memcached.h	/^    char   *wbuf;$/;"	kind:member	struct:conn	access:public
conn::wbytes	memcached.h	/^    int    wbytes;$/;"	kind:member	struct:conn	access:public
conn::wcurr	memcached.h	/^    char   *wcurr;$/;"	kind:member	struct:conn	access:public
conn::which	memcached.h	/^    short  which;   \/** which events were just triggered *\/$/;"	kind:member	struct:conn	access:public
conn::write_and_free	memcached.h	/^    void   *write_and_free; \/** free this memory after finishing writing *\/$/;"	kind:member	struct:conn	access:public
conn::write_and_go	memcached.h	/^    enum conn_states  write_and_go;$/;"	kind:member	struct:conn	typeref:enum:conn::conn_states	access:public
conn::wsize	memcached.h	/^    int    wsize;$/;"	kind:member	struct:conn	access:public
conn_add_to_freelist	memcached.h	/^bool  conn_add_to_freelist(conn *c);$/;"	kind:prototype	signature:(conn *c)
conn_cleanup	memcached.c	/^static void conn_cleanup(conn *c) {$/;"	kind:function	file:	signature:(conn *c)
conn_close	memcached.c	/^static void conn_close(conn *c) {$/;"	kind:function	file:	signature:(conn *c)
conn_close	memcached.c	/^static void conn_close(conn *c);$/;"	kind:prototype	file:	signature:(conn *c)
conn_closed	memcached.h	/^    conn_closed,     \/**< connection is closed *\/$/;"	kind:enumerator	enum:conn_states
conn_closing	memcached.h	/^    conn_closing,    \/**< closing this connection *\/$/;"	kind:enumerator	enum:conn_states
conn_free	memcached.c	/^static void conn_free(conn *c);$/;"	kind:prototype	file:	signature:(conn *c)
conn_free	memcached.c	/^void conn_free(conn *c) {$/;"	kind:function	signature:(conn *c)
conn_from_freelist	memcached.h	/^conn *conn_from_freelist(void);$/;"	kind:prototype	signature:(void)
conn_init	memcached.c	/^static void conn_init(void) {$/;"	kind:function	file:	signature:(void)
conn_init	memcached.c	/^static void conn_init(void);$/;"	kind:prototype	file:	signature:(void)
conn_listening	memcached.h	/^    conn_listening,  \/**< the socket which listens for connections *\/$/;"	kind:enumerator	enum:conn_states
conn_lock	memcached.c	/^extern pthread_mutex_t conn_lock;$/;"	kind:externvar
conn_lock	thread.c	/^pthread_mutex_t conn_lock = PTHREAD_MUTEX_INITIALIZER;$/;"	kind:variable
conn_max_state	memcached.h	/^    conn_max_state   \/**< Max state value (used for assertion) *\/$/;"	kind:enumerator	enum:conn_states
conn_mwrite	memcached.h	/^    conn_mwrite,     \/**< writing out many items sequentially *\/$/;"	kind:enumerator	enum:conn_states
conn_new	memcached.c	/^conn *conn_new(const int sfd, enum conn_states init_state,$/;"	kind:function	signature:(const int sfd, enum conn_states init_state, const int event_flags, const int read_buffer_size, enum network_transport transport, struct event_base *base)
conn_new	memcached.h	/^conn *conn_new(const int sfd, const enum conn_states init_state, const int event_flags, const int read_buffer_size, enum network_transport transport, struct event_base *base);$/;"	kind:prototype	signature:(const int sfd, const enum conn_states init_state, const int event_flags, const int read_buffer_size, enum network_transport transport, struct event_base *base)
conn_new_cmd	memcached.h	/^    conn_new_cmd,    \/**< Prepare connection for next command *\/$/;"	kind:enumerator	enum:conn_states
conn_nread	memcached.h	/^    conn_nread,      \/**< reading in a fixed number of bytes *\/$/;"	kind:enumerator	enum:conn_states
conn_parse_cmd	memcached.h	/^    conn_parse_cmd,  \/**< try to parse a command from the input buffer *\/$/;"	kind:enumerator	enum:conn_states
conn_queue	thread.c	/^struct conn_queue {$/;"	kind:struct	file:
conn_queue::head	thread.c	/^    CQ_ITEM *head;$/;"	kind:member	struct:conn_queue	file:	access:public
conn_queue::lock	thread.c	/^    pthread_mutex_t lock;$/;"	kind:member	struct:conn_queue	file:	access:public
conn_queue::tail	thread.c	/^    CQ_ITEM *tail;$/;"	kind:member	struct:conn_queue	file:	access:public
conn_queue_item	thread.c	/^struct conn_queue_item {$/;"	kind:struct	file:
conn_queue_item::event_flags	thread.c	/^    int               event_flags;$/;"	kind:member	struct:conn_queue_item	file:	access:public
conn_queue_item::init_state	thread.c	/^    enum conn_states  init_state;$/;"	kind:member	struct:conn_queue_item	typeref:enum:conn_queue_item::conn_states	file:	access:public
conn_queue_item::next	thread.c	/^    CQ_ITEM          *next;$/;"	kind:member	struct:conn_queue_item	file:	access:public
conn_queue_item::read_buffer_size	thread.c	/^    int               read_buffer_size;$/;"	kind:member	struct:conn_queue_item	file:	access:public
conn_queue_item::sfd	thread.c	/^    int               sfd;$/;"	kind:member	struct:conn_queue_item	file:	access:public
conn_queue_item::transport	thread.c	/^    enum network_transport     transport;$/;"	kind:member	struct:conn_queue_item	typeref:enum:conn_queue_item::network_transport	file:	access:public
conn_read	memcached.h	/^    conn_read,       \/**< reading in a command line *\/$/;"	kind:enumerator	enum:conn_states
conn_release_items	memcached.c	/^static void conn_release_items(conn *c) {$/;"	kind:function	file:	signature:(conn *c)
conn_set_state	memcached.c	/^static void conn_set_state(conn *c, enum conn_states state) {$/;"	kind:function	file:	signature:(conn *c, enum conn_states state)
conn_set_state	memcached.c	/^static void conn_set_state(conn *c, enum conn_states state);$/;"	kind:prototype	file:	signature:(conn *c, enum conn_states state)
conn_shrink	memcached.c	/^static void conn_shrink(conn *c) {$/;"	kind:function	file:	signature:(conn *c)
conn_states	memcached.h	/^enum conn_states {$/;"	kind:enum
conn_structs	memcached.h	/^    unsigned int  conn_structs;$/;"	kind:member	struct:stats	access:public
conn_swallow	memcached.h	/^    conn_swallow,    \/**< swallowing unnecessary bytes w\/o storing *\/$/;"	kind:enumerator	enum:conn_states
conn_to_str	memcached.c	/^static void conn_to_str(const conn *c, char *buf) {$/;"	kind:function	file:	signature:(const conn *c, char *buf)
conn_to_str	memcached.c	/^static void conn_to_str(const conn *c, char *buf);$/;"	kind:prototype	file:	signature:(const conn *c, char *buf)
conn_waiting	memcached.h	/^    conn_waiting,    \/**< waiting for a readable socket *\/$/;"	kind:enumerator	enum:conn_states
conn_write	memcached.h	/^    conn_write,      \/**< writing out a simple response *\/$/;"	kind:enumerator	enum:conn_states
conn_yields	memcached.h	/^    uint64_t          conn_yields; \/* # of yields for connections (-R option)*\/$/;"	kind:member	struct:thread_stats	access:public
connect_memcached	scripts/damemtop	/^sub connect_memcached {$/;"	kind:subroutine
connect_server	testapp.c	/^static int connect_server(const char *hostname, in_port_t port, bool nonblock)$/;"	kind:function	file:	signature:(const char *hostname, in_port_t port, bool nonblock)
conns	memcached.c	/^conn **conns;$/;"	kind:variable
conns	memcached.h	/^extern conn **conns;$/;"	kind:externvar
construct_udp_message	t/udp.t	/^sub construct_udp_message {$/;"	kind:subroutine
constructor	cache.h	/^    cache_constructor_t* constructor;$/;"	kind:member	struct:__anon1	access:public
constructor_pattern	testapp.c	/^const uint64_t constructor_pattern = 0xdeadcafebabebeef;$/;"	kind:variable
contact	scripts/damemtop	/^contact: dormando\\@rydia.net or memcached\\@googlegroups.com.$/;"	kind:label
cq_init	thread.c	/^static void cq_init(CQ *cq) {$/;"	kind:function	file:	signature:(CQ *cq)
cq_pop	thread.c	/^static CQ_ITEM *cq_pop(CQ *cq) {$/;"	kind:function	file:	signature:(CQ *cq)
cq_push	thread.c	/^static void cq_push(CQ *cq, CQ_ITEM *item) {$/;"	kind:function	file:	signature:(CQ *cq, CQ_ITEM *item)
cqi_free	thread.c	/^static void cqi_free(CQ_ITEM *item) {$/;"	kind:function	file:	signature:(CQ_ITEM *item)
cqi_freelist	thread.c	/^static CQ_ITEM *cqi_freelist;$/;"	kind:variable	file:
cqi_freelist_lock	thread.c	/^static pthread_mutex_t cqi_freelist_lock;$/;"	kind:variable	file:
cqi_new	thread.c	/^static CQ_ITEM *cqi_new(void) {$/;"	kind:function	file:	signature:(void)
crawler	memcached.h	/^} crawler;$/;"	kind:typedef	typeref:struct:__anon5
crawler_count	items.c	/^static int crawler_count = 0;$/;"	kind:variable	file:
crawler_crawl_q	items.c	/^static item *crawler_crawl_q(item *it) {$/;"	kind:function	file:	signature:(item *it)
crawler_items_checked	items.c	/^    uint64_t crawler_items_checked;$/;"	kind:member	struct:__anon2	file:	access:public
crawler_link_q	items.c	/^static void crawler_link_q(item *it) { \/* item is the new tail *\/$/;"	kind:function	file:	signature:(item *it)
crawler_reclaimed	items.c	/^    uint64_t crawler_reclaimed;$/;"	kind:member	struct:__anon2	file:	access:public
crawler_result_type	items.h	/^enum crawler_result_type {$/;"	kind:enum
crawler_unlink_q	items.c	/^static void crawler_unlink_q(item *it) {$/;"	kind:function	file:	signature:(item *it)
crawlers	items.c	/^static crawler crawlers[LARGEST_ID];$/;"	kind:variable	file:
crawlerstats	items.c	/^static crawlerstats_t crawlerstats[MAX_NUMBER_OF_SLAB_CLASSES];$/;"	kind:variable	file:
crawlerstats_t	items.c	/^} crawlerstats_t;$/;"	kind:typedef	typeref:struct:__anon3	file:
crawls_persleep	memcached.h	/^    int crawls_persleep; \/* Number of LRU crawls to run before sleeping *\/$/;"	kind:member	struct:settings	access:public
create_worker	thread.c	/^static void create_worker(void *(*func)(void *), void *arg) {$/;"	kind:function	file:	signature:(void *(*func)(void *), void *arg)
curr_bytes	memcached.h	/^    uint64_t      curr_bytes;$/;"	kind:member	struct:stats	access:public
curr_conns	memcached.h	/^    unsigned int  curr_conns;$/;"	kind:member	struct:stats	access:public
curr_items	memcached.h	/^    unsigned int  curr_items;$/;"	kind:member	struct:stats	access:public
current_test	stats.c	/^static char *current_test = "";$/;"	kind:variable	file:
current_time	memcached.c	/^volatile rel_time_t current_time;$/;"	kind:variable
current_time	memcached.h	/^extern volatile rel_time_t current_time;$/;"	kind:externvar
d_clsid	memcached.h	/^    int d_clsid;$/;"	kind:member	struct:slab_rebalance	access:public
daemonize	daemon.c	/^int daemonize(int nochdir, int noclose)$/;"	kind:function	signature:(int nochdir, int noclose)
daemonize	memcached.h	/^extern int daemonize(int nochdir, int noclose);$/;"	kind:prototype	signature:(int nochdir, int noclose)
data	memcached.h	/^    } data[];$/;"	kind:member	struct:_stritem	typeref:union:_stritem::__anon4	access:public
datadir	doc/Makefile	/^datadir = ${datarootdir}$/;"	kind:macro
datarootdir	doc/Makefile	/^datarootdir = ${prefix}\/share$/;"	kind:macro
datatype	protocol_binary.h	/^            uint8_t datatype;$/;"	kind:member	struct:__anon13::__anon14	access:public
datatype	protocol_binary.h	/^            uint8_t datatype;$/;"	kind:member	struct:__anon15::__anon16	access:public
decr	t/binary-sasl.t	/^sub decr {$/;"	kind:subroutine
decr	t/binary.t	/^sub decr {$/;"	kind:subroutine
decr_hits	memcached.h	/^    uint64_t  decr_hits;$/;"	kind:member	struct:slab_stats	access:public
decr_misses	memcached.h	/^    uint64_t          decr_misses;$/;"	kind:member	struct:thread_stats	access:public
delete	t/binary-sasl.t	/^sub delete {$/;"	kind:subroutine
delete	t/binary.t	/^sub delete {$/;"	kind:subroutine
delete_hits	memcached.h	/^    uint64_t  delete_hits;$/;"	kind:member	struct:slab_stats	access:public
delete_misses	memcached.h	/^    uint64_t          delete_misses;$/;"	kind:member	struct:thread_stats	access:public
delta	protocol_binary.h	/^                uint64_t delta;$/;"	kind:member	struct:__anon30::__anon31::__anon32	access:public
delta_badval	t/binary-sasl.t	/^sub delta_badval {$/;"	kind:subroutine
delta_badval	t/binary.t	/^sub delta_badval {$/;"	kind:subroutine
delta_result_type	memcached.h	/^enum delta_result_type {$/;"	kind:enum
description	testapp.c	/^    const char *description;$/;"	kind:member	struct:testcase	file:	access:public
destruct_data	testapp.c	/^static void *destruct_data = 0;$/;"	kind:variable	file:
destructor	cache.h	/^    cache_destructor_t* destructor;$/;"	kind:member	struct:__anon1	access:public
detail_enabled	memcached.h	/^    int detail_enabled;     \/* nonzero if we're collecting detailed stats *\/$/;"	kind:member	struct:settings	access:public
direct_reclaims	items.c	/^    uint64_t direct_reclaims;$/;"	kind:member	struct:__anon2	file:	access:public
dispatch_bin_command	memcached.c	/^static void dispatch_bin_command(conn *c) {$/;"	kind:function	file:	signature:(conn *c)
dispatch_conn_new	memcached.h	/^void dispatch_conn_new(int sfd, enum conn_states init_state, int event_flags, int read_buffer_size, enum network_transport transport);$/;"	kind:prototype	signature:(int sfd, enum conn_states init_state, int event_flags, int read_buffer_size, enum network_transport transport)
dispatch_conn_new	thread.c	/^void dispatch_conn_new(int sfd, enum conn_states init_state, int event_flags,$/;"	kind:function	signature:(int sfd, enum conn_states init_state, int event_flags, int read_buffer_size, enum network_transport transport)
dispatch_event_add	memcached.h	/^int  dispatch_event_add(int thread, conn *c);$/;"	kind:prototype	signature:(int thread, conn *c)
dispatcher_thread	thread.c	/^static LIBEVENT_DISPATCHER_THREAD dispatcher_thread;$/;"	kind:variable	file:
display	sizes.c	/^static void display(const char *name, size_t size) {$/;"	kind:function	file:	signature:(const char *name, size_t size)
display_header	scripts/damemtop	/^sub display_header {$/;"	kind:subroutine
display_help_mode	scripts/damemtop	/^sub display_help_mode {$/;"	kind:subroutine
display_lines	scripts/damemtop	/^sub display_lines {$/;"	kind:subroutine
display_run	scripts/damemtop	/^sub display_run {$/;"	kind:subroutine
display_top_mode	scripts/damemtop	/^sub display_top_mode {$/;"	kind:subroutine
do_accept_new_conns	memcached.c	/^void do_accept_new_conns(const bool do_accept) {$/;"	kind:function	signature:(const bool do_accept)
do_accept_new_conns	memcached.h	/^void do_accept_new_conns(const bool do_accept);$/;"	kind:prototype	signature:(const bool do_accept)
do_add_delta	memcached.c	/^enum delta_result_type do_add_delta(conn *c, const char *key, const size_t nkey,$/;"	kind:function	signature:(conn *c, const char *key, const size_t nkey, const bool incr, const int64_t delta, char *buf, uint64_t *cas, const uint32_t hv)
do_add_delta	memcached.h	/^enum delta_result_type do_add_delta(conn *c, const char *key,$/;"	kind:prototype	signature:(conn *c, const char *key, const size_t nkey, const bool incr, const int64_t delta, char *buf, uint64_t *cas, const uint32_t hv)
do_assoc_move_next_bucket	assoc.h	/^void do_assoc_move_next_bucket(void);$/;"	kind:prototype	signature:(void)
do_item_alloc	items.c	/^item *do_item_alloc(char *key, const size_t nkey, const int flags,$/;"	kind:function	signature:(char *key, const size_t nkey, const int flags, const rel_time_t exptime, const int nbytes, const uint32_t cur_hv)
do_item_alloc	items.h	/^item *do_item_alloc(char *key, const size_t nkey, const int flags, const rel_time_t exptime, const int nbytes, const uint32_t cur_hv);$/;"	kind:prototype	signature:(char *key, const size_t nkey, const int flags, const rel_time_t exptime, const int nbytes, const uint32_t cur_hv)
do_item_get	items.c	/^item *do_item_get(const char *key, const size_t nkey, const uint32_t hv) {$/;"	kind:function	signature:(const char *key, const size_t nkey, const uint32_t hv)
do_item_get	items.h	/^item *do_item_get(const char *key, const size_t nkey, const uint32_t hv);$/;"	kind:prototype	signature:(const char *key, const size_t nkey, const uint32_t hv)
do_item_link	items.c	/^int do_item_link(item *it, const uint32_t hv) {$/;"	kind:function	signature:(item *it, const uint32_t hv)
do_item_link	items.h	/^int  do_item_link(item *it, const uint32_t hv);     \/** may fail if transgresses limits *\/$/;"	kind:prototype	signature:(item *it, const uint32_t hv)
do_item_link_q	items.c	/^static void do_item_link_q(item *it) { \/* item is the new head *\/$/;"	kind:function	file:	signature:(item *it)
do_item_remove	items.c	/^void do_item_remove(item *it) {$/;"	kind:function	signature:(item *it)
do_item_remove	items.h	/^void do_item_remove(item *it);$/;"	kind:prototype	signature:(item *it)
do_item_replace	items.c	/^int do_item_replace(item *it, item *new_it, const uint32_t hv) {$/;"	kind:function	signature:(item *it, item *new_it, const uint32_t hv)
do_item_replace	items.h	/^int  do_item_replace(item *it, item *new_it, const uint32_t hv);$/;"	kind:prototype	signature:(item *it, item *new_it, const uint32_t hv)
do_item_touch	items.c	/^item *do_item_touch(const char *key, size_t nkey, uint32_t exptime,$/;"	kind:function	signature:(const char *key, size_t nkey, uint32_t exptime, const uint32_t hv)
do_item_touch	items.h	/^item *do_item_touch(const char *key, const size_t nkey, uint32_t exptime, const uint32_t hv);$/;"	kind:prototype	signature:(const char *key, const size_t nkey, uint32_t exptime, const uint32_t hv)
do_item_unlink	items.c	/^void do_item_unlink(item *it, const uint32_t hv) {$/;"	kind:function	signature:(item *it, const uint32_t hv)
do_item_unlink	items.h	/^void do_item_unlink(item *it, const uint32_t hv);$/;"	kind:prototype	signature:(item *it, const uint32_t hv)
do_item_unlink_nolock	items.c	/^void do_item_unlink_nolock(item *it, const uint32_t hv) {$/;"	kind:function	signature:(item *it, const uint32_t hv)
do_item_unlink_nolock	items.h	/^void do_item_unlink_nolock(item *it, const uint32_t hv);$/;"	kind:prototype	signature:(item *it, const uint32_t hv)
do_item_unlink_q	items.c	/^static void do_item_unlink_q(item *it) {$/;"	kind:function	file:	signature:(item *it)
do_item_update	items.c	/^void do_item_update(item *it) {$/;"	kind:function	signature:(item *it)
do_item_update	items.h	/^void do_item_update(item *it);   \/** update LRU time to current and reposition *\/$/;"	kind:prototype	signature:(item *it)
do_item_update_nolock	items.c	/^void do_item_update_nolock(item *it) {$/;"	kind:function	signature:(item *it)
do_item_update_nolock	items.h	/^void do_item_update_nolock(item *it);$/;"	kind:prototype	signature:(item *it)
do_lru_crawler_start	items.c	/^static int do_lru_crawler_start(uint32_t id, uint32_t remaining) {$/;"	kind:function	file:	signature:(uint32_t id, uint32_t remaining)
do_run_lru_crawler_thread	items.c	/^static volatile int do_run_lru_crawler_thread = 0;$/;"	kind:variable	file:
do_run_lru_maintainer_thread	items.c	/^static volatile int do_run_lru_maintainer_thread = 0;$/;"	kind:variable	file:
do_run_maintenance_thread	assoc.c	/^static volatile int do_run_maintenance_thread = 1;$/;"	kind:variable	file:
do_run_slab_rebalance_thread	slabs.c	/^static volatile int do_run_slab_rebalance_thread = 1;$/;"	kind:variable	file:
do_run_slab_thread	slabs.c	/^static volatile int do_run_slab_thread = 1;$/;"	kind:variable	file:
do_slabs_alloc	slabs.c	/^static void *do_slabs_alloc(const size_t size, unsigned int id, unsigned int *total_chunks,$/;"	kind:function	file:	signature:(const size_t size, unsigned int id, unsigned int *total_chunks, unsigned int flags)
do_slabs_free	slabs.c	/^static void do_slabs_free(void *ptr, const size_t size, unsigned int id) {$/;"	kind:function	file:	signature:(void *ptr, const size_t size, unsigned int id)
do_slabs_free	slabs.c	/^static void do_slabs_free(void *ptr, const size_t size, unsigned int id);$/;"	kind:prototype	file:	signature:(void *ptr, const size_t size, unsigned int id)
do_slabs_newslab	slabs.c	/^static int do_slabs_newslab(const unsigned int id) {$/;"	kind:function	file:	signature:(const unsigned int id)
do_slabs_newslab	slabs.c	/^static int do_slabs_newslab(const unsigned int id);$/;"	kind:prototype	file:	signature:(const unsigned int id)
do_slabs_reassign	slabs.c	/^static enum reassign_result_type do_slabs_reassign(int src, int dst) {$/;"	kind:function	file:	signature:(int src, int dst)
do_slabs_stats	slabs.c	/^static void do_slabs_stats(ADD_STAT add_stats, void *c) {$/;"	kind:function	file:	signature:(ADD_STAT add_stats, void *c)
do_store_item	memcached.c	/^enum store_item_type do_store_item(item *it, int comm, conn *c, const uint32_t hv) {$/;"	kind:function	signature:(item *it, int comm, conn *c, const uint32_t hv)
do_store_item	memcached.h	/^enum store_item_type do_store_item(item *item, int comm, conn* c, const uint32_t hv);$/;"	kind:prototype	signature:(item *item, int comm, conn* c, const uint32_t hv)
docdir	doc/Makefile	/^docdir = ${datarootdir}\/doc\/${PACKAGE_TARNAME}$/;"	kind:macro
done	memcached.h	/^    uint8_t done;$/;"	kind:member	struct:slab_rebalance	access:public
drive_machine	memcached.c	/^static void drive_machine(conn *c) {$/;"	kind:function	file:	signature:(conn *c)
drive_machine	memcached.c	/^static void drive_machine(conn *c);$/;"	kind:prototype	file:	signature:(conn *c)
drop_privileges	memcached.h	/^extern void drop_privileges(void);$/;"	kind:prototype	signature:(void)
drop_privileges	memcached.h	616;"	kind:macro
drop_privileges	solaris_priv.c	/^void drop_privileges(void) {$/;"	kind:function	signature:(void)
dvidir	doc/Makefile	/^dvidir = ${docdir}$/;"	kind:macro
einval	t/binary.t	/^sub einval {$/;"	kind:subroutine
enable_large_pages	memcached.c	/^static int enable_large_pages(void) {$/;"	kind:function	file:	signature:(void)
end	memcached.h	/^        char end;$/;"	kind:member	union:_stritem::__anon4	access:public
end_time	items.c	/^    rel_time_t end_time;$/;"	kind:member	struct:__anon3	file:	access:public
ensure_iov_space	memcached.c	/^static int ensure_iov_space(conn *c) {$/;"	kind:function	file:	signature:(conn *c)
ensure_iov_space	memcached.c	/^static int ensure_iov_space(conn *c);$/;"	kind:prototype	file:	signature:(conn *c)
ev_flags	memcached.h	/^    short  ev_flags;$/;"	kind:member	struct:conn	access:public
event	memcached.h	/^    struct event event;$/;"	kind:member	struct:conn	typeref:struct:conn::event	access:public
event_flags	thread.c	/^    int               event_flags;$/;"	kind:member	struct:conn_queue_item	file:	access:public
event_handler	memcached.c	/^static void event_handler(const int fd, const short which, void *arg);$/;"	kind:prototype	file:	signature:(const int fd, const short which, void *arg)
event_handler	memcached.c	/^void event_handler(const int fd, const short which, void *arg) {$/;"	kind:function	signature:(const int fd, const short which, void *arg)
event_init	configure	/^ event_init();$/;"	kind:function
evict_to_free	memcached.h	/^    int evict_to_free;$/;"	kind:member	struct:settings	access:public
evicted	items.c	/^    uint64_t evicted;$/;"	kind:member	struct:__anon2	file:	access:public
evicted_nonzero	items.c	/^    uint64_t evicted_nonzero;$/;"	kind:member	struct:__anon2	file:	access:public
evicted_time	items.c	/^    rel_time_t evicted_time;$/;"	kind:member	struct:__anon2	file:	access:public
evicted_unfetched	items.c	/^    uint64_t evicted_unfetched;$/;"	kind:member	struct:__anon2	file:	access:public
evicted_unfetched	memcached.h	/^    uint64_t      evicted_unfetched; \/* items evicted but never touched *\/$/;"	kind:member	struct:stats	access:public
evictions	memcached.h	/^    uint64_t      evictions;$/;"	kind:member	struct:stats	access:public
evictions_nomem	memcached.h	/^    uint32_t evictions_nomem;$/;"	kind:member	struct:slab_rebalance	access:public
exec_prefix	doc/Makefile	/^exec_prefix = ${prefix}$/;"	kind:macro
exists	t/binary-sasl.t	/^sub exists {$/;"	kind:subroutine
exists	t/binary.t	/^sub exists {$/;"	kind:subroutine
expand_bucket	assoc.c	/^static unsigned int expand_bucket = 0;$/;"	kind:variable	file:
expanding	assoc.c	/^static bool expanding = false;$/;"	kind:variable	file:
expiration	protocol_binary.h	/^                uint32_t expiration;$/;"	kind:member	struct:__anon24::__anon25::__anon26	access:public
expiration	protocol_binary.h	/^                uint32_t expiration;$/;"	kind:member	struct:__anon27::__anon28::__anon29	access:public
expiration	protocol_binary.h	/^                uint32_t expiration;$/;"	kind:member	struct:__anon30::__anon31::__anon32	access:public
expiration	protocol_binary.h	/^                uint32_t expiration;$/;"	kind:member	struct:__anon36::__anon37::__anon38	access:public
expiration	protocol_binary.h	/^                uint32_t expiration;$/;"	kind:member	struct:__anon39::__anon40::__anon41	access:public
expired_unfetched	items.c	/^    uint64_t expired_unfetched;$/;"	kind:member	struct:__anon2	file:	access:public
expired_unfetched	memcached.h	/^    uint64_t      expired_unfetched; \/* items reclaimed but never touched *\/$/;"	kind:member	struct:stats	access:public
expirezero_does_not_evict	memcached.h	/^    bool expirezero_does_not_evict; \/* exptime == 0 goes into NOEXP_LRU *\/$/;"	kind:member	struct:settings	access:public
exptime	memcached.h	/^    rel_time_t      exptime;    \/* expire time *\/$/;"	kind:member	struct:__anon5	access:public
exptime	memcached.h	/^    rel_time_t      exptime;    \/* expire time *\/$/;"	kind:member	struct:_stritem	access:public
ext_command	testapp.c	/^static off_t ext_command(char* buf,$/;"	kind:function	file:	signature:(char* buf, size_t bufsz, uint8_t cmd, const void* ext, size_t extlen, const void* key, size_t keylen, const void* dta, size_t dtalen)
extlen	protocol_binary.h	/^            uint8_t extlen;$/;"	kind:member	struct:__anon13::__anon14	access:public
extlen	protocol_binary.h	/^            uint8_t extlen;$/;"	kind:member	struct:__anon15::__anon16	access:public
factor	memcached.h	/^    double factor;          \/* chunk size growth factor *\/$/;"	kind:member	struct:settings	access:public
fail	stats.c	/^static void fail(char *what) { printf("\\tFAIL: %s\\n", what); fflush(stdout); fail_count++; }$/;"	kind:function	file:	signature:(char *what)
fail_count	stats.c	/^static int fail_count = 0;$/;"	kind:variable	file:
final	jenkins_hash.c	114;"	kind:macro	file:
find_optimal_spacing	scripts/damemtop	/^sub find_optimal_spacing {$/;"	kind:subroutine
fire_main_loop	scripts/damemtop	/^sub fire_main_loop {$/;"	kind:subroutine
flags	protocol_binary.h	/^                uint32_t flags;$/;"	kind:member	struct:__anon21::__anon22::__anon23	access:public
flags	protocol_binary.h	/^                uint32_t flags;$/;"	kind:member	struct:__anon27::__anon28::__anon29	access:public
flags	protocol_binary.h	/^                uint8_t  flags;$/;"	kind:member	struct:__anon42::__anon43::__anon44	access:public
flush	t/binary-sasl.t	/^sub flush {$/;"	kind:subroutine
flush	t/binary.t	/^sub flush {$/;"	kind:subroutine
flush_cmds	memcached.h	/^    uint64_t          flush_cmds;$/;"	kind:member	struct:thread_stats	access:public
flush_command	testapp.c	/^static off_t flush_command(char* buf, size_t bufsz, uint8_t cmd, uint32_t exptime, bool use_extra) {$/;"	kind:function	file:	signature:(char* buf, size_t bufsz, uint8_t cmd, uint32_t exptime, bool use_extra)
flush_enabled	memcached.h	/^    bool flush_enabled;     \/* flush_all enabled *\/$/;"	kind:member	struct:settings	access:public
flush_socket	t/binary-sasl.t	/^sub flush_socket {$/;"	kind:subroutine
flush_socket	t/binary.t	/^sub flush_socket {$/;"	kind:subroutine
fmix32	murmur3_hash.c	/^static FORCE_INLINE uint32_t fmix32 ( uint32_t h )$/;"	kind:function	file:	signature:( uint32_t h )
format_column	scripts/damemtop	/^sub format_column {$/;"	kind:subroutine
format_commas	scripts/damemtop	/^sub format_commas {$/;"	kind:subroutine
format_percent	scripts/damemtop	/^sub format_percent {$/;"	kind:subroutine
free_port	t/lib/MemcachedTest.pm	/^sub free_port {$/;"	kind:subroutine
freecurr	cache.h	/^    int freecurr;$/;"	kind:member	struct:__anon1	access:public
freetotal	cache.h	/^    int freetotal;$/;"	kind:member	struct:__anon1	access:public
func_cl_dashL	compile	/^func_cl_dashL ()$/;"	kind:function
func_cl_dashl	compile	/^func_cl_dashl ()$/;"	kind:function
func_cl_wrapper	compile	/^func_cl_wrapper ()$/;"	kind:function
func_file_conv	compile	/^func_file_conv ()$/;"	kind:function
function	testapp.c	/^    TEST_FUNC function;$/;"	kind:member	struct:testcase	file:	access:public
gat	t/binary.t	/^sub gat {$/;"	kind:subroutine
get	t/binary-sasl.t	/^sub get {$/;"	kind:subroutine
get	t/binary.t	/^sub get {$/;"	kind:subroutine
get_cas_id	items.c	/^uint64_t get_cas_id(void) {$/;"	kind:function	signature:(void)
get_cas_id	items.h	/^uint64_t get_cas_id(void);$/;"	kind:prototype	signature:(void)
get_cmds	memcached.h	/^    uint64_t          get_cmds;$/;"	kind:member	struct:thread_stats	access:public
get_cmds	memcached.h	/^    uint64_t      get_cmds;$/;"	kind:member	struct:stats	access:public
get_hits	memcached.h	/^    uint64_t      get_hits;$/;"	kind:member	struct:stats	access:public
get_hits	memcached.h	/^    uint64_t  get_hits;$/;"	kind:member	struct:slab_stats	access:public
get_misses	memcached.h	/^    uint64_t          get_misses;$/;"	kind:member	struct:thread_stats	access:public
get_misses	memcached.h	/^    uint64_t      get_misses;$/;"	kind:member	struct:stats	access:public
get_multi	t/binary-sasl.t	/^sub get_multi {$/;"	kind:subroutine
get_multi	t/binary.t	/^sub get_multi {$/;"	kind:subroutine
get_object	cache.c	/^static inline void* get_object(void *ptr) {$/;"	kind:function	file:	signature:(void *ptr)
get_page_from_global_pool	slabs.c	/^static void *get_page_from_global_pool(void) {$/;"	kind:function	file:	signature:(void)
get_stats	slabs.c	/^bool get_stats(const char *stat_type, int nkey, ADD_STAT add_stats, void *c) {$/;"	kind:function	signature:(const char *stat_type, int nkey, ADD_STAT add_stats, void *c)
get_stats	slabs.h	/^bool get_stats(const char *stat_type, int nkey, ADD_STAT add_stats, void *c);$/;"	kind:prototype	signature:(const char *stat_type, int nkey, ADD_STAT add_stats, void *c)
getblock32	murmur3_hash.c	/^static FORCE_INLINE uint32_t getblock32 ( const uint32_t * p, int i )$/;"	kind:function	file:	signature:( const uint32_t * p, int i )
give_advice	missing	/^give_advice ()$/;"	kind:function
grab_stats	scripts/mc_slab_mover	/^sub grab_stats {$/;"	kind:subroutine
grow_slab_list	slabs.c	/^static int grow_slab_list (const unsigned int id) {$/;"	kind:function	file:	signature:(const unsigned int id)
grow_stats_buf	memcached.c	/^static bool grow_stats_buf(conn *c, size_t needed) {$/;"	kind:function	file:	signature:(conn *c, size_t needed)
h_next	memcached.h	/^    struct _stritem *h_next;    \/* hash chain next *\/$/;"	kind:member	struct:__anon5	typeref:struct:__anon5::_stritem	access:public
h_next	memcached.h	/^    struct _stritem *h_next;    \/* hash chain next *\/$/;"	kind:member	struct:_stritem	typeref:struct:_stritem::_stritem	access:public
handle_binary_protocol_error	memcached.c	/^static void handle_binary_protocol_error(conn *c) {$/;"	kind:function	file:	signature:(conn *c)
handle_logfile	scripts/start-memcached	/^sub handle_logfile$/;"	kind:subroutine
hash	hash.h	/^hash_func hash;$/;"	kind:variable
hash_algorithm	memcached.h	/^    char *hash_algorithm;     \/* Hash algorithm in use *\/$/;"	kind:member	struct:settings	access:public
hash_bulk_move	assoc.c	/^int hash_bulk_move = DEFAULT_HASH_BULK_MOVE;$/;"	kind:variable
hash_bytes	memcached.h	/^    uint64_t      hash_bytes;       \/* size used for hash tables *\/$/;"	kind:member	struct:stats	access:public
hash_func	hash.h	/^typedef uint32_t (*hash_func)(const void *key, size_t length);$/;"	kind:typedef
hash_init	hash.c	/^int hash_init(enum hashfunc_type type) {$/;"	kind:function	signature:(enum hashfunc_type type)
hash_init	hash.h	/^int hash_init(enum hashfunc_type type);$/;"	kind:prototype	signature:(enum hashfunc_type type)
hash_is_expanding	memcached.h	/^    bool          hash_is_expanding; \/* If the hash table is being expanded *\/$/;"	kind:member	struct:stats	access:public
hash_items	assoc.c	/^static unsigned int hash_items = 0;$/;"	kind:variable	file:
hash_items_counter_lock	assoc.c	/^static pthread_mutex_t hash_items_counter_lock = PTHREAD_MUTEX_INITIALIZER;$/;"	kind:variable	file:
hash_power_level	memcached.h	/^    unsigned int  hash_power_level; \/* Better hope it's not over 9000 *\/$/;"	kind:member	struct:stats	access:public
hashfunc_type	hash.h	/^enum hashfunc_type {$/;"	kind:enum
hashmask	assoc.c	39;"	kind:macro	file:
hashmask	thread.c	63;"	kind:macro	file:
hashpower	assoc.c	/^unsigned int hashpower = HASHPOWER_DEFAULT;$/;"	kind:variable
hashpower	assoc.h	/^extern unsigned int hashpower;$/;"	kind:externvar
hashpower_init	memcached.h	/^    int hashpower_init;     \/* Starting hash power level *\/$/;"	kind:member	struct:settings	access:public
hashsize	assoc.c	38;"	kind:macro	file:
hashsize	thread.c	62;"	kind:macro	file:
hdrbuf	memcached.h	/^    unsigned char *hdrbuf; \/* udp packet headers *\/$/;"	kind:member	struct:conn	access:public
hdrsize	memcached.h	/^    int    hdrsize;   \/* number of headers' worth of space is allocated *\/$/;"	kind:member	struct:conn	access:public
head	thread.c	/^    CQ_ITEM *head;$/;"	kind:member	struct:conn_queue	file:	access:public
header	protocol_binary.h	/^            protocol_binary_request_header header;$/;"	kind:member	struct:__anon17::__anon18	access:public
header	protocol_binary.h	/^            protocol_binary_request_header header;$/;"	kind:member	struct:__anon24::__anon25	access:public
header	protocol_binary.h	/^            protocol_binary_request_header header;$/;"	kind:member	struct:__anon27::__anon28	access:public
header	protocol_binary.h	/^            protocol_binary_request_header header;$/;"	kind:member	struct:__anon30::__anon31	access:public
header	protocol_binary.h	/^            protocol_binary_request_header header;$/;"	kind:member	struct:__anon36::__anon37	access:public
header	protocol_binary.h	/^            protocol_binary_request_header header;$/;"	kind:member	struct:__anon39::__anon40	access:public
header	protocol_binary.h	/^            protocol_binary_response_header header;$/;"	kind:member	struct:__anon19::__anon20	access:public
header	protocol_binary.h	/^            protocol_binary_response_header header;$/;"	kind:member	struct:__anon21::__anon22	access:public
header	protocol_binary.h	/^            protocol_binary_response_header header;$/;"	kind:member	struct:__anon33::__anon34	access:public
header	protocol_binary.h	/^            protocol_binary_response_header header;$/;"	kind:member	struct:__anon42::__anon43	access:public
heads	items.c	/^static item *heads[LARGEST_ID];$/;"	kind:variable	file:
hexify	t/udp.t	/^sub hexify {$/;"	kind:subroutine
hickup_thread_running	testapp.c	/^volatile bool hickup_thread_running;$/;"	kind:variable
histo	items.c	/^    uint64_t histo[61];$/;"	kind:member	struct:__anon3	file:	access:public
host	doc/Makefile	/^host = x86_64-unknown-linux-gnu$/;"	kind:macro
host	t/lib/MemcachedTest.pm	/^sub host { $_[0]{host} }$/;"	kind:subroutine
host_alias	doc/Makefile	/^host_alias = $/;"	kind:macro
host_cpu	doc/Makefile	/^host_cpu = x86_64$/;"	kind:macro
host_os	doc/Makefile	/^host_os = linux-gnu$/;"	kind:macro
host_triplet	doc/Makefile	/^host_triplet = x86_64-unknown-linux-gnu$/;"	kind:macro
host_vendor	doc/Makefile	/^host_vendor = unknown$/;"	kind:macro
hot_lru_pct	memcached.h	/^    int hot_lru_pct; \/* percentage of slab space for HOT_LRU *\/$/;"	kind:member	struct:settings	access:public
htmldir	doc/Makefile	/^htmldir = ${docdir}$/;"	kind:macro
htonll	util.c	/^uint64_t htonll(uint64_t val) {$/;"	kind:function	signature:(uint64_t val)
htonll	util.h	/^extern uint64_t htonll(uint64_t);$/;"	kind:prototype	signature:(uint64_t)
icurr	memcached.h	/^    item   **icurr;$/;"	kind:member	struct:conn	access:public
ileft	memcached.h	/^    int    ileft;$/;"	kind:member	struct:conn	access:public
ilist	memcached.h	/^    item   **ilist;   \/* list of items to write out *\/$/;"	kind:member	struct:conn	access:public
includedir	doc/Makefile	/^includedir = ${prefix}\/include$/;"	kind:macro
incr	t/binary-sasl.t	/^sub incr {$/;"	kind:subroutine
incr	t/binary.t	/^sub incr {$/;"	kind:subroutine
incr_cas	t/binary.t	/^sub incr_cas {$/;"	kind:subroutine
incr_hits	memcached.h	/^    uint64_t  incr_hits;$/;"	kind:member	struct:slab_stats	access:public
incr_misses	memcached.h	/^    uint64_t          incr_misses;$/;"	kind:member	struct:thread_stats	access:public
infodir	doc/Makefile	/^infodir = ${datarootdir}\/info$/;"	kind:macro
init_cond	thread.c	/^static pthread_cond_t init_cond;$/;"	kind:variable	file:
init_count	thread.c	/^static int init_count = 0;$/;"	kind:variable	file:
init_lock	thread.c	/^static pthread_mutex_t init_lock;$/;"	kind:variable	file:
init_lru_crawler	items.c	/^int init_lru_crawler(void) {$/;"	kind:function	signature:(void)
init_lru_crawler	items.h	/^int init_lru_crawler(void);$/;"	kind:prototype	signature:(void)
init_lru_maintainer	items.c	/^int init_lru_maintainer(void) {$/;"	kind:function	signature:(void)
init_lru_maintainer	items.h	/^int init_lru_maintainer(void);$/;"	kind:prototype	signature:(void)
init_sasl	sasl_defs.c	/^void init_sasl(void) {$/;"	kind:function	signature:(void)
init_sasl	sasl_defs.h	/^void init_sasl(void);$/;"	kind:prototype	signature:(void)
init_sasl	sasl_defs.h	18;"	kind:macro
init_sasl_conn	memcached.c	/^static void init_sasl_conn(conn *c) {$/;"	kind:function	file:	signature:(conn *c)
init_state	thread.c	/^    enum conn_states  init_state;$/;"	kind:member	struct:conn_queue_item	typeref:enum:conn_queue_item::conn_states	file:	access:public
initial	protocol_binary.h	/^                uint64_t initial;$/;"	kind:member	struct:__anon30::__anon31::__anon32	access:public
initial_pool_size	cache.c	/^const int initial_pool_size = 64;$/;"	kind:variable
inline_reclaim	memcached.h	/^    uint32_t inline_reclaim;$/;"	kind:member	struct:slab_rebalance	access:public
install_sh	doc/Makefile	/^install_sh = ${SHELL} \/home\/dormando\/d\/p\/danga\/git\/memcached\/install-sh$/;"	kind:macro
install_sh_DATA	doc/Makefile	/^install_sh_DATA = $(install_sh) -c -m 644$/;"	kind:macro
install_sh_PROGRAM	doc/Makefile	/^install_sh_PROGRAM = $(install_sh) -c$/;"	kind:macro
install_sh_SCRIPT	doc/Makefile	/^install_sh_SCRIPT = $(install_sh) -c$/;"	kind:macro
inter	memcached.h	/^    char *inter;$/;"	kind:member	struct:settings	access:public
iov	memcached.h	/^    struct iovec *iov;$/;"	kind:member	struct:conn	typeref:struct:conn::iovec	access:public
iovsize	memcached.h	/^    int    iovsize;   \/* number of elements allocated in iov[] *\/$/;"	kind:member	struct:conn	access:public
iovused	memcached.h	/^    int    iovused;   \/* number of elements used in iov[] *\/$/;"	kind:member	struct:conn	access:public
is_listen_thread	memcached.h	/^int   is_listen_thread(void);$/;"	kind:prototype	signature:(void)
is_listen_thread	thread.c	/^int is_listen_thread() {$/;"	kind:function
is_numeric	scripts/damemtop	/^sub is_numeric {$/;"	kind:subroutine
isize	memcached.h	/^    int    isize;$/;"	kind:member	struct:conn	access:public
it_flags	memcached.h	/^    uint8_t         it_flags;   \/* ITEM_* above *\/$/;"	kind:member	struct:__anon5	access:public
it_flags	memcached.h	/^    uint8_t         it_flags;   \/* ITEM_* above *\/$/;"	kind:member	struct:_stritem	access:public
item	memcached.h	/^    void   *item;     \/* for commands set\/add\/replace  *\/$/;"	kind:member	struct:conn	access:public
item	memcached.h	/^} item;$/;"	kind:typedef	typeref:struct:_stritem
item_alloc	memcached.h	/^item *item_alloc(char *key, size_t nkey, int flags, rel_time_t exptime, int nbytes);$/;"	kind:prototype	signature:(char *key, size_t nkey, int flags, rel_time_t exptime, int nbytes)
item_alloc	thread.c	/^item *item_alloc(char *key, size_t nkey, int flags, rel_time_t exptime, int nbytes) {$/;"	kind:function	signature:(char *key, size_t nkey, int flags, rel_time_t exptime, int nbytes)
item_cachedump	items.c	/^char *item_cachedump(const unsigned int slabs_clsid, const unsigned int limit, unsigned int *bytes) {$/;"	kind:function	signature:(const unsigned int slabs_clsid, const unsigned int limit, unsigned int *bytes)
item_cachedump	items.h	/^char *item_cachedump(const unsigned int slabs_clsid, const unsigned int limit, unsigned int *bytes);$/;"	kind:prototype	signature:(const unsigned int slabs_clsid, const unsigned int limit, unsigned int *bytes)
item_crawler_evaluate	items.c	/^static void item_crawler_evaluate(item *search, uint32_t hv, int i) {$/;"	kind:function	file:	signature:(item *search, uint32_t hv, int i)
item_crawler_thread	items.c	/^static void *item_crawler_thread(void *arg) {$/;"	kind:function	file:	signature:(void *arg)
item_crawler_tid	items.c	/^static pthread_t item_crawler_tid;$/;"	kind:variable	file:
item_free	items.c	/^void item_free(item *it) {$/;"	kind:function	signature:(item *it)
item_free	items.h	/^void item_free(item *it);$/;"	kind:prototype	signature:(item *it)
item_get	memcached.h	/^item *item_get(const char *key, const size_t nkey);$/;"	kind:prototype	signature:(const char *key, const size_t nkey)
item_get	thread.c	/^item *item_get(const char *key, const size_t nkey) {$/;"	kind:function	signature:(const char *key, const size_t nkey)
item_is_flushed	items.c	/^int item_is_flushed(item *it) {$/;"	kind:function	signature:(item *it)
item_is_flushed	items.h	/^int item_is_flushed(item *it);$/;"	kind:prototype	signature:(item *it)
item_link	memcached.h	/^int   item_link(item *it);$/;"	kind:prototype	signature:(item *it)
item_link	thread.c	/^int item_link(item *item) {$/;"	kind:function	signature:(item *item)
item_link_q	items.c	/^static void item_link_q(item *it) {$/;"	kind:function	file:	signature:(item *it)
item_link_q	items.c	/^static void item_link_q(item *it);$/;"	kind:prototype	file:	signature:(item *it)
item_lock	memcached.h	/^void item_lock(uint32_t hv);$/;"	kind:prototype	signature:(uint32_t hv)
item_lock	thread.c	/^void item_lock(uint32_t hv) {$/;"	kind:function	signature:(uint32_t hv)
item_lock_count	thread.c	/^static uint32_t item_lock_count;$/;"	kind:variable	file:
item_lock_hashpower	assoc.h	/^extern unsigned int item_lock_hashpower;$/;"	kind:externvar
item_lock_hashpower	thread.c	/^unsigned int item_lock_hashpower;$/;"	kind:variable
item_locks	thread.c	/^static pthread_mutex_t *item_locks;$/;"	kind:variable	file:
item_make_header	items.c	/^static size_t item_make_header(const uint8_t nkey, const int flags, const int nbytes,$/;"	kind:function	file:	signature:(const uint8_t nkey, const int flags, const int nbytes, char *suffix, uint8_t *nsuffix)
item_remove	memcached.h	/^void  item_remove(item *it);$/;"	kind:prototype	signature:(item *it)
item_remove	thread.c	/^void item_remove(item *item) {$/;"	kind:function	signature:(item *item)
item_replace	memcached.h	/^int   item_replace(item *it, item *new_it, const uint32_t hv);$/;"	kind:prototype	signature:(item *it, item *new_it, const uint32_t hv)
item_replace	thread.c	/^int item_replace(item *old_it, item *new_it, const uint32_t hv) {$/;"	kind:function	signature:(item *old_it, item *new_it, const uint32_t hv)
item_size_max	memcached.h	/^    int item_size_max;        \/* Maximum item size, and upper end for slabs *\/$/;"	kind:member	struct:settings	access:public
item_size_ok	items.c	/^bool item_size_ok(const size_t nkey, const int flags, const int nbytes) {$/;"	kind:function	signature:(const size_t nkey, const int flags, const int nbytes)
item_size_ok	items.h	/^bool item_size_ok(const size_t nkey, const int flags, const int nbytes);$/;"	kind:prototype	signature:(const size_t nkey, const int flags, const int nbytes)
item_stats	items.c	/^void item_stats(ADD_STAT add_stats, void *c) {$/;"	kind:function	signature:(ADD_STAT add_stats, void *c)
item_stats	items.h	/^void item_stats(ADD_STAT add_stats, void *c);$/;"	kind:prototype	signature:(ADD_STAT add_stats, void *c)
item_stats_reset	items.c	/^void item_stats_reset(void) {$/;"	kind:function	signature:(void)
item_stats_reset	items.h	/^void item_stats_reset(void);$/;"	kind:prototype	signature:(void)
item_stats_sizes	items.c	/^void item_stats_sizes(ADD_STAT add_stats, void *c) {$/;"	kind:function	signature:(ADD_STAT add_stats, void *c)
item_stats_sizes	items.h	/^void item_stats_sizes(ADD_STAT add_stats, void *c);$/;"	kind:prototype	signature:(ADD_STAT add_stats, void *c)
item_stats_totals	items.c	/^void item_stats_totals(ADD_STAT add_stats, void *c) {$/;"	kind:function	signature:(ADD_STAT add_stats, void *c)
item_stats_totals	items.h	/^void item_stats_totals(ADD_STAT add_stats, void *c);$/;"	kind:prototype	signature:(ADD_STAT add_stats, void *c)
item_touch	memcached.h	/^item *item_touch(const char *key, const size_t nkey, uint32_t exptime);$/;"	kind:prototype	signature:(const char *key, const size_t nkey, uint32_t exptime)
item_touch	thread.c	/^item *item_touch(const char *key, size_t nkey, uint32_t exptime) {$/;"	kind:function	signature:(const char *key, size_t nkey, uint32_t exptime)
item_trylock	memcached.h	/^void *item_trylock(uint32_t hv);$/;"	kind:prototype	signature:(uint32_t hv)
item_trylock	thread.c	/^void *item_trylock(uint32_t hv) {$/;"	kind:function	signature:(uint32_t hv)
item_trylock_unlock	memcached.h	/^void item_trylock_unlock(void *arg);$/;"	kind:prototype	signature:(void *arg)
item_trylock_unlock	thread.c	/^void item_trylock_unlock(void *lock) {$/;"	kind:function	signature:(void *lock)
item_unlink	memcached.h	/^void  item_unlink(item *it);$/;"	kind:prototype	signature:(item *it)
item_unlink	thread.c	/^void item_unlink(item *item) {$/;"	kind:function	signature:(item *item)
item_unlink_q	items.c	/^static void item_unlink_q(item *it) {$/;"	kind:function	file:	signature:(item *it)
item_unlink_q	items.c	/^static void item_unlink_q(item *it);$/;"	kind:prototype	file:	signature:(item *it)
item_unlock	memcached.h	/^void item_unlock(uint32_t hv);$/;"	kind:prototype	signature:(uint32_t hv)
item_unlock	thread.c	/^void item_unlock(uint32_t hv) {$/;"	kind:function	signature:(uint32_t hv)
item_update	memcached.h	/^void  item_update(item *it);$/;"	kind:prototype	signature:(item *it)
item_update	thread.c	/^void item_update(item *item) {$/;"	kind:function	signature:(item *item)
itemstats	items.c	/^static itemstats_t itemstats[LARGEST_ID];$/;"	kind:variable	file:
itemstats_t	items.c	/^} itemstats_t;$/;"	kind:typedef	typeref:struct:__anon2	file:
jenkins_hash	jenkins_hash.c	/^uint32_t jenkins_hash( const void *key, size_t length)$/;"	kind:function	signature:( const void *key, size_t length)
jenkins_hash	jenkins_hash.c	/^uint32_t jenkins_hash($/;"	kind:function	signature:( const void *key, size_t length)
jenkins_hash	jenkins_hash.h	/^uint32_t jenkins_hash(const void *key, size_t length);$/;"	kind:prototype	signature:(const void *key, size_t length)
key	t/stress-memcached.pl	/^sub key {$/;"	kind:subroutine
keylen	memcached.h	/^    int keylen;$/;"	kind:member	struct:conn	access:public
keylen	protocol_binary.h	/^            uint16_t keylen;$/;"	kind:member	struct:__anon13::__anon14	access:public
keylen	protocol_binary.h	/^            uint16_t keylen;$/;"	kind:member	struct:__anon15::__anon16	access:public
last_cmd_time	memcached.h	/^    rel_time_t last_cmd_time;$/;"	kind:member	struct:conn	access:public
last_thread	thread.c	/^static int last_thread = -1;$/;"	kind:variable	file:
length	memcached.c	/^    size_t length;$/;"	kind:member	struct:token_s	file:	access:public
libdir	doc/Makefile	/^libdir = ${exec_prefix}\/lib$/;"	kind:macro
libexecdir	doc/Makefile	/^libexecdir = ${exec_prefix}\/libexec$/;"	kind:macro
likely	memcached.h	624;"	kind:macro
list_mechs	t/binary-sasl.t	/^sub list_mechs {$/;"	kind:subroutine
list_size	slabs.c	/^    unsigned int list_size; \/* size of prev array *\/$/;"	kind:member	struct:__anon45	file:	access:public
listen_conn	memcached.c	/^static conn *listen_conn = NULL;$/;"	kind:variable	file:
listen_disabled_num	memcached.h	/^    uint64_t      listen_disabled_num;$/;"	kind:member	struct:stats	access:public
load_config	scripts/damemtop	/^sub load_config {$/;"	kind:subroutine
local_transport	memcached.h	/^    local_transport, \/* Unix sockets*\/$/;"	kind:enumerator	enum:network_transport
localedir	doc/Makefile	/^localedir = ${datarootdir}\/locale$/;"	kind:macro
localstatedir	doc/Makefile	/^localstatedir = ${prefix}\/var$/;"	kind:macro
locations	sasl_defs.c	/^const char * const locations[] = {$/;"	kind:variable
lock	thread.c	/^    pthread_mutex_t lock;$/;"	kind:member	struct:conn_queue	file:	access:public
lookuphost	testapp.c	/^static struct addrinfo *lookuphost(const char *hostname, in_port_t port)$/;"	kind:function	file:	signature:(const char *hostname, in_port_t port)
lru_crawler	memcached.h	/^    bool lru_crawler;        \/* Whether or not to enable the autocrawler thread *\/$/;"	kind:member	struct:settings	access:public
lru_crawler_cond	items.c	/^static pthread_cond_t  lru_crawler_cond = PTHREAD_COND_INITIALIZER;$/;"	kind:variable	file:
lru_crawler_crawl	items.c	/^enum crawler_result_type lru_crawler_crawl(char *slabs) {$/;"	kind:function	signature:(char *slabs)
lru_crawler_crawl	items.h	/^enum crawler_result_type lru_crawler_crawl(char *slabs);$/;"	kind:prototype	signature:(char *slabs)
lru_crawler_initialized	items.c	/^static int lru_crawler_initialized = 0;$/;"	kind:variable	file:
lru_crawler_lock	items.c	/^static pthread_mutex_t lru_crawler_lock = PTHREAD_MUTEX_INITIALIZER;$/;"	kind:variable	file:
lru_crawler_pause	items.c	/^void lru_crawler_pause(void) {$/;"	kind:function	signature:(void)
lru_crawler_pause	items.h	/^void lru_crawler_pause(void);$/;"	kind:prototype	signature:(void)
lru_crawler_resume	items.c	/^void lru_crawler_resume(void) {$/;"	kind:function	signature:(void)
lru_crawler_resume	items.h	/^void lru_crawler_resume(void);$/;"	kind:prototype	signature:(void)
lru_crawler_running	memcached.h	/^    bool          lru_crawler_running; \/* crawl in progress *\/$/;"	kind:member	struct:stats	access:public
lru_crawler_sleep	memcached.h	/^    int lru_crawler_sleep;  \/* Microsecond sleep between items *\/$/;"	kind:member	struct:settings	access:public
lru_crawler_start	items.c	/^static int lru_crawler_start(uint32_t id, uint32_t remaining) {$/;"	kind:function	file:	signature:(uint32_t id, uint32_t remaining)
lru_crawler_start	items.c	/^static int lru_crawler_start(uint32_t id, uint32_t remaining);$/;"	kind:prototype	file:	signature:(uint32_t id, uint32_t remaining)
lru_crawler_starts	memcached.h	/^    uint64_t      lru_crawler_starts; \/* Number of item crawlers kicked off *\/$/;"	kind:member	struct:stats	access:public
lru_crawler_stats_lock	items.c	/^static pthread_mutex_t lru_crawler_stats_lock = PTHREAD_MUTEX_INITIALIZER;$/;"	kind:variable	file:
lru_crawler_tocrawl	memcached.h	/^    uint32_t lru_crawler_tocrawl; \/* Number of items to crawl per run *\/$/;"	kind:member	struct:settings	access:public
lru_locks	items.h	/^extern pthread_mutex_t lru_locks[POWER_LARGEST];$/;"	kind:externvar
lru_locks	thread.c	/^pthread_mutex_t lru_locks[POWER_LARGEST];$/;"	kind:variable
lru_maintainer_check_clsid	items.c	/^static int lru_maintainer_check_clsid = 0;$/;"	kind:variable	file:
lru_maintainer_crawler_check	items.c	/^static void lru_maintainer_crawler_check(void) {$/;"	kind:function	file:	signature:(void)
lru_maintainer_initialized	items.c	/^static int lru_maintainer_initialized = 0;$/;"	kind:variable	file:
lru_maintainer_juggle	items.c	/^static int lru_maintainer_juggle(const int slabs_clsid) {$/;"	kind:function	file:	signature:(const int slabs_clsid)
lru_maintainer_juggles	memcached.h	/^    uint64_t      lru_maintainer_juggles; \/* number of LRU bg pokes *\/$/;"	kind:member	struct:stats	access:public
lru_maintainer_lock	items.c	/^static pthread_mutex_t lru_maintainer_lock = PTHREAD_MUTEX_INITIALIZER;$/;"	kind:variable	file:
lru_maintainer_pause	items.c	/^void lru_maintainer_pause(void) {$/;"	kind:function	signature:(void)
lru_maintainer_pause	items.h	/^void lru_maintainer_pause(void);$/;"	kind:prototype	signature:(void)
lru_maintainer_resume	items.c	/^void lru_maintainer_resume(void) {$/;"	kind:function	signature:(void)
lru_maintainer_resume	items.h	/^void lru_maintainer_resume(void);$/;"	kind:prototype	signature:(void)
lru_maintainer_thread	items.c	/^static void *lru_maintainer_thread(void *arg) {$/;"	kind:function	file:	signature:(void *arg)
lru_maintainer_thread	memcached.h	/^    bool lru_maintainer_thread; \/* LRU maintainer background thread *\/$/;"	kind:member	struct:settings	access:public
lru_maintainer_tid	items.c	/^static pthread_t lru_maintainer_tid;$/;"	kind:variable	file:
lru_pull_tail	items.c	/^static int lru_pull_tail(const int orig_id, const int cur_lru,$/;"	kind:function	file:	signature:(const int orig_id, const int cur_lru, const unsigned int total_chunks, const bool do_evict, const uint32_t cur_hv)
lru_pull_tail	items.c	/^static int lru_pull_tail(const int orig_id, const int cur_lru,$/;"	kind:prototype	file:	signature:(const int orig_id, const int cur_lru, const unsigned int total_chunks, const bool do_evict, const uint32_t cur_hv)
lru_type_map	items.c	/^static unsigned int lru_type_map[4] = {HOT_LRU, WARM_LRU, COLD_LRU, NOEXP_LRU};$/;"	kind:variable	file:
lrutail_reflocked	items.c	/^    uint64_t lrutail_reflocked;$/;"	kind:member	struct:__anon2	file:	access:public
magic	protocol_binary.h	/^            uint8_t magic;$/;"	kind:member	struct:__anon13::__anon14	access:public
magic	protocol_binary.h	/^            uint8_t magic;$/;"	kind:member	struct:__anon15::__anon16	access:public
main	config.guess	/^		main()$/;"	kind:function
main	config.guess	/^	main ()$/;"	kind:function
main	memcached.c	/^int main (int argc, char **argv) {$/;"	kind:function	signature:(int argc, char **argv)
main	sizes.c	/^int main(int argc, char **argv) {$/;"	kind:function	signature:(int argc, char **argv)
main	stats.c	/^main(int argc, char **argv) {$/;"	kind:function	signature:(int argc, char **argv)
main	testapp.c	/^int main(int argc, char **argv)$/;"	kind:function	signature:(int argc, char **argv)
main	timedrun.c	/^int main(int argc, char **argv)$/;"	kind:function	signature:(int argc, char **argv)
main_base	memcached.c	/^static struct event_base *main_base;$/;"	kind:variable	typeref:struct:event_base	file:
main_loop	scripts/damemtop	/^sub main_loop {$/;"	kind:subroutine
maintain_connections	scripts/damemtop	/^sub maintain_connections {$/;"	kind:subroutine
maintenance_cond	assoc.c	/^static pthread_cond_t maintenance_cond = PTHREAD_COND_INITIALIZER;$/;"	kind:variable	file:
maintenance_lock	assoc.c	/^static pthread_mutex_t maintenance_lock = PTHREAD_MUTEX_INITIALIZER;$/;"	kind:variable	file:
maintenance_tid	assoc.c	/^static pthread_t maintenance_tid;$/;"	kind:variable	file:
make_dummy_depfile	depcomp	/^make_dummy_depfile ()$/;"	kind:function
malloc_fails	memcached.h	/^    uint64_t      malloc_fails;$/;"	kind:member	struct:stats	access:public
man1dir	doc/Makefile	/^man1dir = $(mandir)\/man1$/;"	kind:macro
man_MANS	doc/Makefile	/^man_MANS = memcached.1$/;"	kind:macro
mandir	doc/Makefile	/^mandir = ${datarootdir}\/man$/;"	kind:macro
max_fds	memcached.c	/^static int max_fds;$/;"	kind:variable	file:
max_results	protocol_binary.h	/^                uint32_t max_results;$/;"	kind:member	struct:__anon42::__anon43::__anon44	access:public
maxbytes	memcached.h	/^    size_t maxbytes;$/;"	kind:member	struct:settings	access:public
maxconns	memcached.h	/^    int maxconns;$/;"	kind:member	struct:settings	access:public
maxconns_entered	memcached.h	/^    struct timeval maxconns_entered;  \/* last time maxconns entered *\/$/;"	kind:member	struct:stats	typeref:struct:stats::timeval	access:public
maxconns_fast	memcached.h	/^    bool maxconns_fast;     \/* Whether or not to early close connections *\/$/;"	kind:member	struct:settings	access:public
maxconns_handler	memcached.c	/^static void maxconns_handler(const int fd, const short which, void *arg) {$/;"	kind:function	file:	signature:(const int fd, const short which, void *arg)
maxconnsevent	memcached.c	/^static struct event maxconnsevent;$/;"	kind:variable	typeref:struct:event	file:
maximize_sndbuf	memcached.c	/^static void maximize_sndbuf(const int sfd) {$/;"	kind:function	file:	signature:(const int sfd)
mc_swap64	util.c	/^static uint64_t mc_swap64(uint64_t in) {$/;"	kind:function	file:	signature:(uint64_t in)
mem_avail	slabs.c	/^static size_t mem_avail = 0;$/;"	kind:variable	file:
mem_base	slabs.c	/^static void *mem_base = NULL;$/;"	kind:variable	file:
mem_current	slabs.c	/^static void *mem_current = NULL;$/;"	kind:variable	file:
mem_get_is	t/lib/MemcachedTest.pm	/^sub mem_get_is {$/;"	kind:subroutine
mem_gets	t/lib/MemcachedTest.pm	/^sub mem_gets {$/;"	kind:subroutine
mem_gets_is	t/lib/MemcachedTest.pm	/^sub mem_gets_is {$/;"	kind:subroutine
mem_limit	slabs.c	/^static size_t mem_limit = 0;$/;"	kind:variable	file:
mem_limit_reached	slabs.c	/^static bool mem_limit_reached = false;$/;"	kind:variable	file:
mem_malloced	slabs.c	/^static size_t mem_malloced = 0;$/;"	kind:variable	file:
mem_stats	t/lib/MemcachedTest.pm	/^sub mem_stats {$/;"	kind:subroutine
memcached_sasl_pwdb	sasl_defs.c	/^static const char *memcached_sasl_pwdb;$/;"	kind:variable	file:
memcached_thread_init	memcached.h	/^void memcached_thread_init(int nthreads, struct event_base *main_base);$/;"	kind:prototype	signature:(int nthreads, struct event_base *main_base)
memcached_thread_init	thread.c	/^void memcached_thread_init(int nthreads, struct event_base *main_base) {$/;"	kind:function	signature:(int nthreads, struct event_base *main_base)
memory_allocate	slabs.c	/^static void *memory_allocate(size_t size) {$/;"	kind:function	file:	signature:(size_t size)
memory_allocate	slabs.c	/^static void *memory_allocate(size_t size);$/;"	kind:prototype	file:	signature:(size_t size)
message	protocol_binary.h	/^        } message;$/;"	kind:member	union:__anon17	typeref:struct:__anon17::__anon18	access:public
message	protocol_binary.h	/^        } message;$/;"	kind:member	union:__anon19	typeref:struct:__anon19::__anon20	access:public
message	protocol_binary.h	/^        } message;$/;"	kind:member	union:__anon21	typeref:struct:__anon21::__anon22	access:public
message	protocol_binary.h	/^        } message;$/;"	kind:member	union:__anon24	typeref:struct:__anon24::__anon25	access:public
message	protocol_binary.h	/^        } message;$/;"	kind:member	union:__anon27	typeref:struct:__anon27::__anon28	access:public
message	protocol_binary.h	/^        } message;$/;"	kind:member	union:__anon30	typeref:struct:__anon30::__anon31	access:public
message	protocol_binary.h	/^        } message;$/;"	kind:member	union:__anon33	typeref:struct:__anon33::__anon34	access:public
message	protocol_binary.h	/^        } message;$/;"	kind:member	union:__anon36	typeref:struct:__anon36::__anon37	access:public
message	protocol_binary.h	/^        } message;$/;"	kind:member	union:__anon39	typeref:struct:__anon39::__anon40	access:public
message	protocol_binary.h	/^        } message;$/;"	kind:member	union:__anon42	typeref:struct:__anon42::__anon43	access:public
mix	jenkins_hash.c	79;"	kind:macro	file:
mkdir_p	doc/Makefile	/^mkdir_p = $(MKDIR_P)$/;"	kind:macro
mkinstalldirs	doc/Makefile	/^mkinstalldirs = $(install_sh) -d$/;"	kind:macro
move_status	slabs.c	/^enum move_status {$/;"	kind:enum	file:
moves_to_cold	items.c	/^    uint64_t moves_to_cold;$/;"	kind:member	struct:__anon2	file:	access:public
moves_to_warm	items.c	/^    uint64_t moves_to_warm;$/;"	kind:member	struct:__anon2	file:	access:public
moves_within_lru	items.c	/^    uint64_t moves_within_lru;$/;"	kind:member	struct:__anon2	file:	access:public
msgbytes	memcached.h	/^    int    msgbytes;  \/* number of bytes in current msg *\/$/;"	kind:member	struct:conn	access:public
msgcurr	memcached.h	/^    int    msgcurr;   \/* element in msglist[] being transmitted now *\/$/;"	kind:member	struct:conn	access:public
msglist	memcached.h	/^    struct msghdr *msglist;$/;"	kind:member	struct:conn	typeref:struct:conn::msghdr	access:public
msgsize	memcached.h	/^    int    msgsize;   \/* number of elements allocated in msglist[] *\/$/;"	kind:member	struct:conn	access:public
msgused	memcached.h	/^    int    msgused;   \/* number of elements used in msglist[] *\/$/;"	kind:member	struct:conn	access:public
mt_stats_lock	stats.c	/^void mt_stats_lock() { }$/;"	kind:function
mt_stats_unlock	stats.c	/^void mt_stats_unlock() { }$/;"	kind:function
mutex	cache.h	/^    pthread_mutex_t mutex;$/;"	kind:member	struct:__anon1	access:public
mutex	memcached.h	/^    pthread_mutex_t   mutex;$/;"	kind:member	struct:thread_stats	access:public
mutex	memcached.h	/^    pthread_mutex_t mutex;$/;"	kind:member	struct:stats	access:public
mutex_lock	memcached.h	554;"	kind:macro
mutex_unlock	memcached.h	555;"	kind:macro
my_sasl_hostname	sasl_defs.c	/^char my_sasl_hostname[1025];$/;"	kind:variable
my_sasl_hostname	sasl_defs.h	/^extern char my_sasl_hostname[1025];$/;"	kind:externvar
name	cache.h	/^    char *name;$/;"	kind:member	struct:__anon1	access:public
nbytes	memcached.h	/^    int             nbytes;     \/* size of data *\/$/;"	kind:member	struct:__anon5	access:public
nbytes	memcached.h	/^    int             nbytes;     \/* size of data *\/$/;"	kind:member	struct:_stritem	access:public
negotiating_prot	memcached.h	/^    negotiating_prot \/* Discovering the protocol *\/$/;"	kind:enumerator	enum:protocol
network_transport	memcached.h	/^enum network_transport {$/;"	kind:enum
new	t/binary-sasl.t	/^sub new {$/;"	kind:subroutine
new	t/binary.t	/^sub new {$/;"	kind:subroutine
new	t/lib/MemcachedTest.pm	/^sub new {$/;"	kind:subroutine
new_conn_queue	memcached.h	/^    struct conn_queue *new_conn_queue; \/* queue of new connections to handle *\/$/;"	kind:member	struct:__anon6	typeref:struct:__anon6::conn_queue	access:public
new_memcached	t/lib/MemcachedTest.pm	/^sub new_memcached {$/;"	kind:subroutine
new_sock	t/lib/MemcachedTest.pm	/^sub new_sock {$/;"	kind:subroutine
new_socket	memcached.c	/^static int new_socket(struct addrinfo *ai) {$/;"	kind:function	file:	signature:(struct addrinfo *ai)
new_socket	memcached.c	/^static int new_socket(struct addrinfo *ai);$/;"	kind:prototype	file:	signature:(struct addrinfo *ai)
new_socket_unix	memcached.c	/^static int new_socket_unix(void) {$/;"	kind:function	file:	signature:(void)
new_udp_sock	t/lib/MemcachedTest.pm	/^sub new_udp_sock {$/;"	kind:subroutine
next	memcached.h	/^    conn   *next;     \/* Used for generating a list of conn structures *\/$/;"	kind:member	struct:conn	access:public
next	memcached.h	/^    struct _stritem *next;$/;"	kind:member	struct:__anon5	typeref:struct:__anon5::_stritem	access:public
next	memcached.h	/^    struct _stritem *next;$/;"	kind:member	struct:_stritem	typeref:struct:_stritem::_stritem	access:public
next	stats.c	/^    PREFIX_STATS *next;$/;"	kind:member	struct:_prefix_stats	file:	access:public
next	thread.c	/^    CQ_ITEM          *next;$/;"	kind:member	struct:conn_queue_item	file:	access:public
nkey	memcached.h	/^    uint8_t         nkey;       \/* key length, w\/terminating null and padding *\/$/;"	kind:member	struct:__anon5	access:public
nkey	memcached.h	/^    uint8_t         nkey;       \/* key length, w\/terminating null and padding *\/$/;"	kind:member	struct:_stritem	access:public
noexp	items.c	/^    uint64_t noexp;$/;"	kind:member	struct:__anon3	file:	access:public
noexp_lru_size	items.c	/^static unsigned int noexp_lru_size(int slabs_clsid) {$/;"	kind:function	file:	signature:(int slabs_clsid)
noop	t/binary-sasl.t	/^sub noop {$/;"	kind:subroutine
noop	t/binary.t	/^sub noop {$/;"	kind:subroutine
noreply	memcached.h	/^    bool   noreply;   \/* True if the reply should not be sent. *\/$/;"	kind:member	struct:conn	access:public
not_found	t/binary-sasl.t	/^sub not_found {$/;"	kind:subroutine
not_found	t/binary.t	/^sub not_found {$/;"	kind:subroutine
notify_event	memcached.h	/^    struct event notify_event;  \/* listen event for notify pipe *\/$/;"	kind:member	struct:__anon6	typeref:struct:__anon6::event	access:public
notify_receive_fd	memcached.h	/^    int notify_receive_fd;      \/* receiving end of notify pipe *\/$/;"	kind:member	struct:__anon6	access:public
notify_send_fd	memcached.h	/^    int notify_send_fd;         \/* sending end of notify pipe *\/$/;"	kind:member	struct:__anon6	access:public
nsuffix	memcached.h	/^    uint8_t         nsuffix;    \/* length of flags-and-length string *\/$/;"	kind:member	struct:__anon5	access:public
nsuffix	memcached.h	/^    uint8_t         nsuffix;    \/* length of flags-and-length string *\/$/;"	kind:member	struct:_stritem	access:public
ntohll	util.c	/^uint64_t ntohll(uint64_t val) {$/;"	kind:function	signature:(uint64_t val)
ntohll	util.h	/^extern uint64_t ntohll(uint64_t);$/;"	kind:prototype	signature:(uint64_t)
num_deletes	stats.c	/^    uint64_t      num_deletes;$/;"	kind:member	struct:_prefix_stats	file:	access:public
num_gets	stats.c	/^    uint64_t      num_gets;$/;"	kind:member	struct:_prefix_stats	file:	access:public
num_hits	stats.c	/^    uint64_t      num_hits;$/;"	kind:member	struct:_prefix_stats	file:	access:public
num_prefixes	stats.c	/^static int num_prefixes = 0;$/;"	kind:variable	file:
num_sets	stats.c	/^    uint64_t      num_sets;$/;"	kind:member	struct:_prefix_stats	file:	access:public
num_threads	memcached.h	/^    int num_threads;        \/* number of worker (without dispatcher) libevent threads to run *\/$/;"	kind:member	struct:settings	access:public
num_threads_per_udp	memcached.h	/^    int num_threads_per_udp; \/* number of worker threads serving each udp socket *\/$/;"	kind:member	struct:settings	access:public
nz_strcmp	slabs.c	/^static int nz_strcmp(int nzlength, const char *nz, const char *z) {$/;"	kind:function	file:	signature:(int nzlength, const char *nz, const char *z)
offset	memcached.h	/^        size_t offset;$/;"	kind:member	struct:conn::__anon8	access:public
old_hashtable	assoc.c	/^static item** old_hashtable = 0;$/;"	kind:variable	file:
oldest_cas	memcached.h	/^    uint64_t oldest_cas; \/* ignore existing items with CAS values lower than this *\/$/;"	kind:member	struct:settings	access:public
oldest_live	memcached.h	/^    rel_time_t oldest_live; \/* ignore existing items older than this *\/$/;"	kind:member	struct:settings	access:public
oldincludedir	doc/Makefile	/^oldincludedir = \/usr\/include$/;"	kind:macro
opaque	memcached.h	/^    int opaque;$/;"	kind:member	struct:conn	access:public
opaque	protocol_binary.h	/^            uint32_t opaque;$/;"	kind:member	struct:__anon13::__anon14	access:public
opaque	protocol_binary.h	/^            uint32_t opaque;$/;"	kind:member	struct:__anon15::__anon16	access:public
opcode	protocol_binary.h	/^            uint8_t opcode;$/;"	kind:member	struct:__anon13::__anon14	access:public
opcode	protocol_binary.h	/^            uint8_t opcode;$/;"	kind:member	struct:__anon15::__anon16	access:public
out_of_memory	memcached.c	/^static void out_of_memory(conn *c, char *ascii_error) {$/;"	kind:function	file:	signature:(conn *c, char *ascii_error)
out_string	memcached.c	/^static void out_string(conn *c, const char *str) {$/;"	kind:function	file:	signature:(conn *c, const char *str)
outofmemory	items.c	/^    uint64_t outofmemory;$/;"	kind:member	struct:__anon2	file:	access:public
pause_thread_types	memcached.h	/^enum pause_thread_types {$/;"	kind:enum
pause_threads	memcached.h	/^void pause_threads(enum pause_thread_types type);$/;"	kind:prototype	signature:(enum pause_thread_types type)
pause_threads	thread.c	/^void pause_threads(enum pause_thread_types type) {$/;"	kind:function	signature:(enum pause_thread_types type)
pdfdir	doc/Makefile	/^pdfdir = ${docdir}$/;"	kind:macro
perslab	slabs.c	/^    unsigned int perslab;   \/* how many items per slab *\/$/;"	kind:member	struct:__anon45	file:	access:public
pkgdatadir	doc/Makefile	/^pkgdatadir = $(datadir)\/memcached$/;"	kind:macro
pkgincludedir	doc/Makefile	/^pkgincludedir = $(includedir)\/memcached$/;"	kind:macro
pkglibdir	doc/Makefile	/^pkglibdir = $(libdir)\/memcached$/;"	kind:macro
pkglibexecdir	doc/Makefile	/^pkglibexecdir = $(libexecdir)\/memcached$/;"	kind:macro
port	memcached.h	/^    int port;$/;"	kind:member	struct:settings	access:public
port	t/lib/MemcachedTest.pm	/^sub port { $_[0]{port} }$/;"	kind:subroutine
port	testapp.c	/^static in_port_t port;$/;"	kind:variable	file:
power_largest	slabs.c	/^static int power_largest;$/;"	kind:variable	file:
prefix	doc/Makefile	/^prefix = \/usr\/local$/;"	kind:macro
prefix	stats.c	/^    char         *prefix;$/;"	kind:member	struct:_prefix_stats	file:	access:public
prefix_delimiter	memcached.h	/^    char prefix_delimiter;  \/* character that marks a key prefix (for stats) *\/$/;"	kind:member	struct:settings	access:public
prefix_len	stats.c	/^    size_t        prefix_len;$/;"	kind:member	struct:_prefix_stats	file:	access:public
prefix_stats	stats.c	/^static PREFIX_STATS *prefix_stats[PREFIX_HASH_SIZE];$/;"	kind:variable	file:
prev	memcached.h	/^    struct _stritem *prev;$/;"	kind:member	struct:__anon5	typeref:struct:__anon5::_stritem	access:public
prev	memcached.h	/^    struct _stritem *prev;$/;"	kind:member	struct:_stritem	typeref:struct:_stritem::_stritem	access:public
primary_hashtable	assoc.c	/^static item** primary_hashtable = 0;$/;"	kind:variable	file:
process_arithmetic_command	memcached.c	/^static void process_arithmetic_command(conn *c, token_t *tokens, const size_t ntokens, const bool incr) {$/;"	kind:function	file:	signature:(conn *c, token_t *tokens, const size_t ntokens, const bool incr)
process_bin_append_prepend	memcached.c	/^static void process_bin_append_prepend(conn *c) {$/;"	kind:function	file:	signature:(conn *c)
process_bin_complete_sasl_auth	memcached.c	/^static void process_bin_complete_sasl_auth(conn *c) {$/;"	kind:function	file:	signature:(conn *c)
process_bin_delete	memcached.c	/^static void process_bin_delete(conn *c) {$/;"	kind:function	file:	signature:(conn *c)
process_bin_flush	memcached.c	/^static void process_bin_flush(conn *c) {$/;"	kind:function	file:	signature:(conn *c)
process_bin_get_or_touch	memcached.c	/^static void process_bin_get_or_touch(conn *c) {$/;"	kind:function	file:	signature:(conn *c)
process_bin_sasl_auth	memcached.c	/^static void process_bin_sasl_auth(conn *c) {$/;"	kind:function	file:	signature:(conn *c)
process_bin_stat	memcached.c	/^static void process_bin_stat(conn *c) {$/;"	kind:function	file:	signature:(conn *c)
process_bin_update	memcached.c	/^static void process_bin_update(conn *c) {$/;"	kind:function	file:	signature:(conn *c)
process_command	memcached.c	/^static void process_command(conn *c, char *command) {$/;"	kind:function	file:	signature:(conn *c, char *command)
process_command	memcached.c	/^static void process_command(conn *c, char *command);$/;"	kind:prototype	file:	signature:(conn *c, char *command)
process_delete_command	memcached.c	/^static void process_delete_command(conn *c, token_t *tokens, const size_t ntokens) {$/;"	kind:function	file:	signature:(conn *c, token_t *tokens, const size_t ntokens)
process_get_command	memcached.c	/^static inline void process_get_command(conn *c, token_t *tokens, size_t ntokens, bool return_cas) {$/;"	kind:function	file:	signature:(conn *c, token_t *tokens, size_t ntokens, bool return_cas)
process_slabs_automove_command	memcached.c	/^static void process_slabs_automove_command(conn *c, token_t *tokens, const size_t ntokens) {$/;"	kind:function	file:	signature:(conn *c, token_t *tokens, const size_t ntokens)
process_started	memcached.c	/^time_t process_started;     \/* when the process was started *\/$/;"	kind:variable
process_started	memcached.h	/^extern time_t process_started;$/;"	kind:externvar
process_stat	memcached.c	/^static void process_stat(conn *c, token_t *tokens, const size_t ntokens) {$/;"	kind:function	file:	signature:(conn *c, token_t *tokens, const size_t ntokens)
process_stat_settings	memcached.c	/^static void process_stat_settings(ADD_STAT add_stats, void *c) {$/;"	kind:function	file:	signature:(ADD_STAT add_stats, void *c)
process_stat_settings	memcached.c	/^static void process_stat_settings(ADD_STAT add_stats, void *c);$/;"	kind:prototype	file:	signature:(ADD_STAT add_stats, void *c)
process_stats_conns	memcached.c	/^static void process_stats_conns(ADD_STAT add_stats, void *c) {$/;"	kind:function	file:	signature:(ADD_STAT add_stats, void *c)
process_stats_detail	memcached.c	/^inline static void process_stats_detail(conn *c, const char *command) {$/;"	kind:function	file:	signature:(conn *c, const char *command)
process_touch_command	memcached.c	/^static void process_touch_command(conn *c, token_t *tokens, const size_t ntokens) {$/;"	kind:function	file:	signature:(conn *c, token_t *tokens, const size_t ntokens)
process_update_command	memcached.c	/^static void process_update_command(conn *c, token_t *tokens, const size_t ntokens, int comm, bool handle_cas) {$/;"	kind:function	file:	signature:(conn *c, token_t *tokens, const size_t ntokens, int comm, bool handle_cas)
process_verbosity_command	memcached.c	/^static void process_verbosity_command(conn *c, token_t *tokens, const size_t ntokens) {$/;"	kind:function	file:	signature:(conn *c, token_t *tokens, const size_t ntokens)
program_details	missing	/^program_details ()$/;"	kind:function
program_transform_name	doc/Makefile	/^program_transform_name = s,x,x,$/;"	kind:macro
prot_text	memcached.c	/^static const char *prot_text(enum protocol prot) {$/;"	kind:function	file:	signature:(enum protocol prot)
protocol	memcached.h	/^    enum protocol protocol;   \/* which protocol this connection speaks *\/$/;"	kind:member	struct:conn	typeref:enum:conn::protocol	access:public
protocol	memcached.h	/^enum protocol {$/;"	kind:enum
protocol_binary_command	protocol_binary.h	/^    } protocol_binary_command;$/;"	kind:typedef	typeref:enum:__anon11
protocol_binary_datatypes	protocol_binary.h	/^    } protocol_binary_datatypes;$/;"	kind:typedef	typeref:enum:__anon12
protocol_binary_magic	protocol_binary.h	/^    } protocol_binary_magic;$/;"	kind:typedef	typeref:enum:__anon9
protocol_binary_request_add	protocol_binary.h	/^    typedef protocol_binary_request_set protocol_binary_request_add;$/;"	kind:typedef
protocol_binary_request_append	protocol_binary.h	/^    typedef protocol_binary_request_no_extras protocol_binary_request_append;$/;"	kind:typedef
protocol_binary_request_decr	protocol_binary.h	/^    typedef protocol_binary_request_incr protocol_binary_request_decr;$/;"	kind:typedef
protocol_binary_request_delete	protocol_binary.h	/^    typedef protocol_binary_request_no_extras protocol_binary_request_delete;$/;"	kind:typedef
protocol_binary_request_flush	protocol_binary.h	/^    } protocol_binary_request_flush;$/;"	kind:typedef	typeref:union:__anon24
protocol_binary_request_gat	protocol_binary.h	/^    } protocol_binary_request_gat;$/;"	kind:typedef	typeref:union:__anon39
protocol_binary_request_gatk	protocol_binary.h	/^    typedef protocol_binary_request_gat protocol_binary_request_gatk;$/;"	kind:typedef
protocol_binary_request_gatkq	protocol_binary.h	/^    typedef protocol_binary_request_gat protocol_binary_request_gatkq;$/;"	kind:typedef
protocol_binary_request_gatq	protocol_binary.h	/^    typedef protocol_binary_request_gat protocol_binary_request_gatq;$/;"	kind:typedef
protocol_binary_request_get	protocol_binary.h	/^    typedef protocol_binary_request_no_extras protocol_binary_request_get;$/;"	kind:typedef
protocol_binary_request_getk	protocol_binary.h	/^    typedef protocol_binary_request_no_extras protocol_binary_request_getk;$/;"	kind:typedef
protocol_binary_request_getkq	protocol_binary.h	/^    typedef protocol_binary_request_no_extras protocol_binary_request_getkq;$/;"	kind:typedef
protocol_binary_request_getq	protocol_binary.h	/^    typedef protocol_binary_request_no_extras protocol_binary_request_getq;$/;"	kind:typedef
protocol_binary_request_header	protocol_binary.h	/^    } protocol_binary_request_header;$/;"	kind:typedef	typeref:union:__anon13
protocol_binary_request_incr	protocol_binary.h	/^    } protocol_binary_request_incr;$/;"	kind:typedef	typeref:union:__anon30
protocol_binary_request_no_extras	protocol_binary.h	/^    } protocol_binary_request_no_extras;$/;"	kind:typedef	typeref:union:__anon17
protocol_binary_request_noop	protocol_binary.h	/^    typedef protocol_binary_request_no_extras protocol_binary_request_noop;$/;"	kind:typedef
protocol_binary_request_prepend	protocol_binary.h	/^    typedef protocol_binary_request_no_extras protocol_binary_request_prepend;$/;"	kind:typedef
protocol_binary_request_quit	protocol_binary.h	/^    typedef protocol_binary_request_no_extras protocol_binary_request_quit;$/;"	kind:typedef
protocol_binary_request_rangeop	protocol_binary.h	/^    } protocol_binary_request_rangeop;$/;"	kind:typedef	typeref:union:__anon42
protocol_binary_request_rappend	protocol_binary.h	/^    typedef protocol_binary_request_rangeop protocol_binary_request_rappend;$/;"	kind:typedef
protocol_binary_request_rappendq	protocol_binary.h	/^    typedef protocol_binary_request_rangeop protocol_binary_request_rappendq;$/;"	kind:typedef
protocol_binary_request_rdecr	protocol_binary.h	/^    typedef protocol_binary_request_rangeop protocol_binary_request_rdecr;$/;"	kind:typedef
protocol_binary_request_rdecrq	protocol_binary.h	/^    typedef protocol_binary_request_rangeop protocol_binary_request_rdecrq;$/;"	kind:typedef
protocol_binary_request_rdelete	protocol_binary.h	/^    typedef protocol_binary_request_rangeop protocol_binary_request_rdelete;$/;"	kind:typedef
protocol_binary_request_rdeleteq	protocol_binary.h	/^    typedef protocol_binary_request_rangeop protocol_binary_request_rdeleteq;$/;"	kind:typedef
protocol_binary_request_replace	protocol_binary.h	/^    typedef protocol_binary_request_set protocol_binary_request_replace;$/;"	kind:typedef
protocol_binary_request_rget	protocol_binary.h	/^    typedef protocol_binary_request_rangeop protocol_binary_request_rget;$/;"	kind:typedef
protocol_binary_request_rincr	protocol_binary.h	/^    typedef protocol_binary_request_rangeop protocol_binary_request_rincr;$/;"	kind:typedef
protocol_binary_request_rincrq	protocol_binary.h	/^    typedef protocol_binary_request_rangeop protocol_binary_request_rincrq;$/;"	kind:typedef
protocol_binary_request_rprepend	protocol_binary.h	/^    typedef protocol_binary_request_rangeop protocol_binary_request_rprepend;$/;"	kind:typedef
protocol_binary_request_rprependq	protocol_binary.h	/^    typedef protocol_binary_request_rangeop protocol_binary_request_rprependq;$/;"	kind:typedef
protocol_binary_request_rset	protocol_binary.h	/^    typedef protocol_binary_request_rangeop protocol_binary_request_rset;$/;"	kind:typedef
protocol_binary_request_rsetq	protocol_binary.h	/^    typedef protocol_binary_request_rangeop protocol_binary_request_rsetq;$/;"	kind:typedef
protocol_binary_request_set	protocol_binary.h	/^    } protocol_binary_request_set;$/;"	kind:typedef	typeref:union:__anon27
protocol_binary_request_stats	protocol_binary.h	/^    typedef protocol_binary_request_no_extras protocol_binary_request_stats;$/;"	kind:typedef
protocol_binary_request_touch	protocol_binary.h	/^    } protocol_binary_request_touch;$/;"	kind:typedef	typeref:union:__anon36
protocol_binary_request_version	protocol_binary.h	/^    typedef protocol_binary_request_no_extras protocol_binary_request_version;$/;"	kind:typedef
protocol_binary_response_add	protocol_binary.h	/^    typedef protocol_binary_response_no_extras protocol_binary_response_add;$/;"	kind:typedef
protocol_binary_response_append	protocol_binary.h	/^    typedef protocol_binary_response_no_extras protocol_binary_response_append;$/;"	kind:typedef
protocol_binary_response_decr	protocol_binary.h	/^    typedef protocol_binary_response_incr protocol_binary_response_decr;$/;"	kind:typedef
protocol_binary_response_delete	protocol_binary.h	/^    typedef protocol_binary_response_no_extras protocol_binary_response_delete;$/;"	kind:typedef
protocol_binary_response_flush	protocol_binary.h	/^    typedef protocol_binary_response_no_extras protocol_binary_response_flush;$/;"	kind:typedef
protocol_binary_response_gat	protocol_binary.h	/^    typedef protocol_binary_response_get protocol_binary_response_gat;$/;"	kind:typedef
protocol_binary_response_gatk	protocol_binary.h	/^    typedef protocol_binary_response_get protocol_binary_response_gatk;$/;"	kind:typedef
protocol_binary_response_gatkq	protocol_binary.h	/^    typedef protocol_binary_response_get protocol_binary_response_gatkq;$/;"	kind:typedef
protocol_binary_response_gatq	protocol_binary.h	/^    typedef protocol_binary_response_get protocol_binary_response_gatq;$/;"	kind:typedef
protocol_binary_response_get	protocol_binary.h	/^    } protocol_binary_response_get;$/;"	kind:typedef	typeref:union:__anon21
protocol_binary_response_getk	protocol_binary.h	/^    typedef protocol_binary_response_get protocol_binary_response_getk;$/;"	kind:typedef
protocol_binary_response_getkq	protocol_binary.h	/^    typedef protocol_binary_response_get protocol_binary_response_getkq;$/;"	kind:typedef
protocol_binary_response_getq	protocol_binary.h	/^    typedef protocol_binary_response_get protocol_binary_response_getq;$/;"	kind:typedef
protocol_binary_response_header	protocol_binary.h	/^    } protocol_binary_response_header;$/;"	kind:typedef	typeref:union:__anon15
protocol_binary_response_incr	protocol_binary.h	/^    } protocol_binary_response_incr;$/;"	kind:typedef	typeref:union:__anon33
protocol_binary_response_no_extras	protocol_binary.h	/^    } protocol_binary_response_no_extras;$/;"	kind:typedef	typeref:union:__anon19
protocol_binary_response_noop	protocol_binary.h	/^    typedef protocol_binary_response_no_extras protocol_binary_response_noop;$/;"	kind:typedef
protocol_binary_response_prepend	protocol_binary.h	/^    typedef protocol_binary_response_no_extras protocol_binary_response_prepend;$/;"	kind:typedef
protocol_binary_response_quit	protocol_binary.h	/^    typedef protocol_binary_response_no_extras protocol_binary_response_quit;$/;"	kind:typedef
protocol_binary_response_replace	protocol_binary.h	/^    typedef protocol_binary_response_no_extras protocol_binary_response_replace;$/;"	kind:typedef
protocol_binary_response_set	protocol_binary.h	/^    typedef protocol_binary_response_no_extras protocol_binary_response_set;$/;"	kind:typedef
protocol_binary_response_stats	protocol_binary.h	/^    typedef protocol_binary_response_no_extras protocol_binary_response_stats;$/;"	kind:typedef
protocol_binary_response_status	protocol_binary.h	/^    } protocol_binary_response_status;$/;"	kind:typedef	typeref:enum:__anon10
protocol_binary_response_touch	protocol_binary.h	/^    typedef protocol_binary_response_no_extras protocol_binary_response_touch;$/;"	kind:typedef
protocol_binary_response_version	protocol_binary.h	/^    typedef protocol_binary_response_no_extras protocol_binary_response_version;$/;"	kind:typedef
prototypes	configure	/^   function prototypes and stuff, but not '\\xHH' hex character constants.$/;"	kind:function
psdir	doc/Makefile	/^psdir = ${docdir}$/;"	kind:macro
ptr	cache.h	/^    void **ptr;$/;"	kind:member	struct:__anon1	access:public
raw_command	testapp.c	/^static off_t raw_command(char* buf,$/;"	kind:function	file:	signature:(char* buf, size_t bufsz, uint8_t cmd, const void* key, size_t keylen, const void* dta, size_t dtalen)
rbuf	memcached.h	/^    char   *rbuf;   \/** buffer to read commands into *\/$/;"	kind:member	struct:conn	access:public
rbytes	memcached.h	/^    int    rbytes;  \/** how much data, starting from rcur, do we have unparsed *\/$/;"	kind:member	struct:conn	access:public
rcurr	memcached.h	/^    char   *rcurr;  \/** but if we parsed some already, this is where we stopped *\/$/;"	kind:member	struct:conn	access:public
read_ascii_response	testapp.c	/^static void read_ascii_response(char *buffer, size_t size) {$/;"	kind:function	file:	signature:(char *buffer, size_t size)
read_buffer_size	thread.c	/^    int               read_buffer_size;$/;"	kind:member	struct:conn_queue_item	file:	access:public
realtime	memcached.c	/^static rel_time_t realtime(const time_t exptime) {$/;"	kind:function	file:	signature:(const time_t exptime)
reassign_result_type	slabs.h	/^enum reassign_result_type {$/;"	kind:enum
rebalance_tid	slabs.c	/^static pthread_t rebalance_tid;$/;"	kind:variable	file:
reclaimed	items.c	/^    uint64_t reclaimed;$/;"	kind:member	struct:__anon2	file:	access:public
reclaimed	items.c	/^    uint64_t reclaimed;$/;"	kind:member	struct:__anon3	file:	access:public
reclaimed	memcached.h	/^    uint64_t      reclaimed;$/;"	kind:member	struct:stats	access:public
redzone_pattern	cache.c	/^const uint64_t redzone_pattern = 0xdeadbeefcafebabe;$/;"	kind:variable
refcount	memcached.h	/^    unsigned short  refcount;$/;"	kind:member	struct:__anon5	access:public
refcount	memcached.h	/^    unsigned short  refcount;$/;"	kind:member	struct:_stritem	access:public
refcount_decr	memcached.h	/^unsigned short refcount_decr(unsigned short *refcount);$/;"	kind:prototype	signature:(unsigned short *refcount)
refcount_decr	thread.c	/^unsigned short refcount_decr(unsigned short *refcount) {$/;"	kind:function	signature:(unsigned short *refcount)
refcount_incr	memcached.h	/^unsigned short refcount_incr(unsigned short *refcount);$/;"	kind:prototype	signature:(unsigned short *refcount)
refcount_incr	thread.c	/^unsigned short refcount_incr(unsigned short *refcount) {$/;"	kind:function	signature:(unsigned short *refcount)
register_thread_initialized	thread.c	/^static void register_thread_initialized(void) {$/;"	kind:function	file:	signature:(void)
rejected_conns	memcached.h	/^    uint64_t      rejected_conns;$/;"	kind:member	struct:stats	access:public
rel_time_t	memcached.h	/^typedef unsigned int rel_time_t;$/;"	kind:typedef
remaining	memcached.h	/^    uint32_t        remaining;  \/* Max keys to crawl per slab per invocation *\/$/;"	kind:member	struct:__anon5	access:public
remove_pidfile	memcached.c	/^static void remove_pidfile(const char *pid_file) {$/;"	kind:function	file:	signature:(const char *pid_file)
reopen_logfile	scripts/start-memcached	/^sub reopen_logfile$/;"	kind:subroutine
replace	t/binary-sasl.t	/^sub replace {$/;"	kind:subroutine
replace	t/binary.t	/^sub replace {$/;"	kind:subroutine
reqs_per_event	memcached.h	/^    int reqs_per_event;     \/* Maximum number of io to process on each$/;"	kind:member	struct:settings	access:public
request	protocol_binary.h	/^        } request;$/;"	kind:member	union:__anon13	typeref:struct:__anon13::__anon14	access:public
request_addr	memcached.h	/^    struct sockaddr_in6 request_addr; \/* udp: Who sent the most recent request *\/$/;"	kind:member	struct:conn	typeref:struct:conn::sockaddr_in6	access:public
request_addr_size	memcached.h	/^    socklen_t request_addr_size;$/;"	kind:member	struct:conn	access:public
request_id	memcached.h	/^    int    request_id; \/* Incoming UDP request ID, if this is a UDP "connection" *\/$/;"	kind:member	struct:conn	access:public
requested	slabs.c	/^    size_t requested; \/* The number of requested bytes *\/$/;"	kind:member	struct:__anon45	file:	access:public
rescues	memcached.h	/^    uint32_t rescues;$/;"	kind:member	struct:slab_rebalance	access:public
reserved	protocol_binary.h	/^                uint8_t  reserved;$/;"	kind:member	struct:__anon42::__anon43::__anon44	access:public
reserved	protocol_binary.h	/^            uint16_t reserved;$/;"	kind:member	struct:__anon13::__anon14	access:public
reserved_fds	memcached.h	/^    unsigned int  reserved_fds;$/;"	kind:member	struct:stats	access:public
reset_cmd_handler	memcached.c	/^static void reset_cmd_handler(conn *c) {$/;"	kind:function	file:	signature:(conn *c)
response	protocol_binary.h	/^        } response;$/;"	kind:member	union:__anon15	typeref:struct:__anon15::__anon16	access:public
restart	scripts/memcached.sysv	/^restart () {$/;"	kind:function
ritem	memcached.h	/^    char   *ritem;  \/** when we read in an item's value, it goes here *\/$/;"	kind:member	struct:conn	access:public
rlbytes	memcached.h	/^    int    rlbytes;$/;"	kind:member	struct:conn	access:public
rot	jenkins_hash.c	33;"	kind:macro	file:
rotl32	murmur3_hash.c	/^static inline uint32_t rotl32 ( uint32_t x, int8_t r )$/;"	kind:function	file:	signature:( uint32_t x, int8_t r )
rsize	memcached.h	/^    int    rsize;   \/** total allocated size of rbuf *\/$/;"	kind:member	struct:conn	access:public
run	scripts/mc_slab_mover	/^sub run {$/;"	kind:subroutine
run_complete	items.c	/^    bool run_complete;$/;"	kind:member	struct:__anon3	file:	access:public
run_test	stats.c	/^static void run_test(char *what, void (*func)(void)) {$/;"	kind:function	file:	signature:(char *what, void (*func)(void))
s_clsid	memcached.h	/^    int s_clsid;$/;"	kind:member	struct:slab_rebalance	access:public
safe_recv	testapp.c	/^static bool safe_recv(void *buf, size_t len) {$/;"	kind:function	file:	signature:(void *buf, size_t len)
safe_recv_packet	testapp.c	/^static bool safe_recv_packet(void *buf, size_t size) {$/;"	kind:function	file:	signature:(void *buf, size_t size)
safe_send	testapp.c	/^static void safe_send(const void* buf, size_t len, bool hickup)$/;"	kind:function	file:	signature:(const void* buf, size_t len, bool hickup)
safe_strtol	util.c	/^bool safe_strtol(const char *str, int32_t *out) {$/;"	kind:function	signature:(const char *str, int32_t *out)
safe_strtol	util.h	/^bool safe_strtol(const char *str, int32_t *out);$/;"	kind:prototype	signature:(const char *str, int32_t *out)
safe_strtoll	util.c	/^bool safe_strtoll(const char *str, int64_t *out) {$/;"	kind:function	signature:(const char *str, int64_t *out)
safe_strtoll	util.h	/^bool safe_strtoll(const char *str, int64_t *out);$/;"	kind:prototype	signature:(const char *str, int64_t *out)
safe_strtoul	util.c	/^bool safe_strtoul(const char *str, uint32_t *out) {$/;"	kind:function	signature:(const char *str, uint32_t *out)
safe_strtoul	util.h	/^bool safe_strtoul(const char *str, uint32_t *out);$/;"	kind:prototype	signature:(const char *str, uint32_t *out)
safe_strtoull	util.c	/^bool safe_strtoull(const char *str, uint64_t *out) {$/;"	kind:function	signature:(const char *str, uint64_t *out)
safe_strtoull	util.h	/^bool safe_strtoull(const char *str, uint64_t *out);$/;"	kind:prototype	signature:(const char *str, uint64_t *out)
sanitycheck	memcached.c	/^static bool sanitycheck(void) {$/;"	kind:function	file:	signature:(void)
sasl	memcached.h	/^    bool sasl;              \/* SASL on\/off *\/$/;"	kind:member	struct:settings	access:public
sasl_callback_ft	sasl_defs.c	/^typedef int (*sasl_callback_ft)(void);$/;"	kind:typedef	file:
sasl_callbacks	sasl_defs.c	/^static sasl_callback_t sasl_callbacks[] = {$/;"	kind:variable	file:
sasl_conn	memcached.h	/^    sasl_conn_t *sasl_conn;$/;"	kind:member	struct:conn	access:public
sasl_conn_t	sasl_defs.h	/^typedef void* sasl_conn_t;$/;"	kind:typedef
sasl_dispose	sasl_defs.h	19;"	kind:macro
sasl_getconf	sasl_defs.c	/^static int sasl_getconf(void *context, const char **path)$/;"	kind:function	file:	signature:(void *context, const char **path)
sasl_getprop	sasl_defs.h	24;"	kind:macro
sasl_listmech	sasl_defs.h	21;"	kind:macro
sasl_log	sasl_defs.c	/^static int sasl_log(void *context, int level, const char *message)$/;"	kind:function	file:	signature:(void *context, int level, const char *message)
sasl_server_new	sasl_defs.h	20;"	kind:macro
sasl_server_start	sasl_defs.h	22;"	kind:macro
sasl_server_step	sasl_defs.h	23;"	kind:macro
sasl_server_userdb_checkpass	sasl_defs.c	/^static int sasl_server_userdb_checkpass(sasl_conn_t *conn,$/;"	kind:function	file:	signature:(sasl_conn_t *conn, void *context, const char *user, const char *pass, unsigned passlen, struct propctx *propctx)
save_pid	memcached.c	/^static void save_pid(const char *pid_file) {$/;"	kind:function	file:	signature:(const char *pid_file)
sbindir	doc/Makefile	/^sbindir = ${exec_prefix}\/sbin$/;"	kind:macro
sbytes	memcached.h	/^    int    sbytes;    \/* how many bytes to swallow *\/$/;"	kind:member	struct:conn	access:public
seen	items.c	/^    uint64_t seen;$/;"	kind:member	struct:__anon3	file:	access:public
send_ascii_command	testapp.c	/^static void send_ascii_command(const char *buf) {$/;"	kind:function	file:	signature:(const char *buf)
send_command	t/binary-sasl.t	/^sub send_command {$/;"	kind:subroutine
send_command	t/binary.t	/^sub send_command {$/;"	kind:subroutine
send_silent	t/binary-sasl.t	/^sub send_silent {$/;"	kind:subroutine
send_silent	t/binary.t	/^sub send_silent {$/;"	kind:subroutine
send_udp_request	t/udp.t	/^sub send_udp_request {$/;"	kind:subroutine
server_pid	testapp.c	/^static pid_t server_pid;$/;"	kind:variable	file:
server_socket	memcached.c	/^static int server_socket(const char *interface,$/;"	kind:function	file:	signature:(const char *interface, int port, enum network_transport transport, FILE *portnumber_file)
server_socket_unix	memcached.c	/^static int server_socket_unix(const char *path, int access_mask) {$/;"	kind:function	file:	signature:(const char *path, int access_mask)
server_sockets	memcached.c	/^static int server_sockets(int port, enum network_transport transport,$/;"	kind:function	file:	signature:(int port, enum network_transport transport, FILE *portnumber_file)
server_stats	memcached.c	/^static void server_stats(ADD_STAT add_stats, conn *c) {$/;"	kind:function	file:	signature:(ADD_STAT add_stats, conn *c)
server_stats	memcached.c	/^static void server_stats(ADD_STAT add_stats, conn *c);$/;"	kind:prototype	file:	signature:(ADD_STAT add_stats, conn *c)
set	t/binary-sasl.t	/^sub set {$/;"	kind:subroutine
set	t/binary.t	/^sub set {$/;"	kind:subroutine
set_base_from	depcomp	/^set_base_from ()$/;"	kind:function
set_cmds	memcached.h	/^    uint64_t      set_cmds;$/;"	kind:member	struct:stats	access:public
set_cmds	memcached.h	/^    uint64_t  set_cmds;$/;"	kind:member	struct:slab_stats	access:public
set_dir_from	depcomp	/^set_dir_from ()$/;"	kind:function
set_noreply_maybe	memcached.c	/^static inline bool set_noreply_maybe(conn *c, token_t *tokens, size_t ntokens)$/;"	kind:function	file:	signature:(conn *c, token_t *tokens, size_t ntokens)
settings	memcached.c	/^struct settings settings;$/;"	kind:variable	typeref:struct:settings
settings	memcached.h	/^extern struct settings settings;$/;"	kind:externvar
settings	memcached.h	/^struct settings {$/;"	kind:struct
settings	stats.c	/^struct settings settings;$/;"	kind:variable	typeref:struct:settings
settings::access	memcached.h	/^    int access;  \/* access mask (a la chmod) for unix domain socket *\/$/;"	kind:member	struct:settings	access:public
settings::backlog	memcached.h	/^    int backlog;$/;"	kind:member	struct:settings	access:public
settings::binding_protocol	memcached.h	/^    enum protocol binding_protocol;$/;"	kind:member	struct:settings	typeref:enum:settings::protocol	access:public
settings::chunk_size	memcached.h	/^    int chunk_size;$/;"	kind:member	struct:settings	access:public
settings::crawls_persleep	memcached.h	/^    int crawls_persleep; \/* Number of LRU crawls to run before sleeping *\/$/;"	kind:member	struct:settings	access:public
settings::detail_enabled	memcached.h	/^    int detail_enabled;     \/* nonzero if we're collecting detailed stats *\/$/;"	kind:member	struct:settings	access:public
settings::evict_to_free	memcached.h	/^    int evict_to_free;$/;"	kind:member	struct:settings	access:public
settings::expirezero_does_not_evict	memcached.h	/^    bool expirezero_does_not_evict; \/* exptime == 0 goes into NOEXP_LRU *\/$/;"	kind:member	struct:settings	access:public
settings::factor	memcached.h	/^    double factor;          \/* chunk size growth factor *\/$/;"	kind:member	struct:settings	access:public
settings::flush_enabled	memcached.h	/^    bool flush_enabled;     \/* flush_all enabled *\/$/;"	kind:member	struct:settings	access:public
settings::hash_algorithm	memcached.h	/^    char *hash_algorithm;     \/* Hash algorithm in use *\/$/;"	kind:member	struct:settings	access:public
settings::hashpower_init	memcached.h	/^    int hashpower_init;     \/* Starting hash power level *\/$/;"	kind:member	struct:settings	access:public
settings::hot_lru_pct	memcached.h	/^    int hot_lru_pct; \/* percentage of slab space for HOT_LRU *\/$/;"	kind:member	struct:settings	access:public
settings::inter	memcached.h	/^    char *inter;$/;"	kind:member	struct:settings	access:public
settings::item_size_max	memcached.h	/^    int item_size_max;        \/* Maximum item size, and upper end for slabs *\/$/;"	kind:member	struct:settings	access:public
settings::lru_crawler	memcached.h	/^    bool lru_crawler;        \/* Whether or not to enable the autocrawler thread *\/$/;"	kind:member	struct:settings	access:public
settings::lru_crawler_sleep	memcached.h	/^    int lru_crawler_sleep;  \/* Microsecond sleep between items *\/$/;"	kind:member	struct:settings	access:public
settings::lru_crawler_tocrawl	memcached.h	/^    uint32_t lru_crawler_tocrawl; \/* Number of items to crawl per run *\/$/;"	kind:member	struct:settings	access:public
settings::lru_maintainer_thread	memcached.h	/^    bool lru_maintainer_thread; \/* LRU maintainer background thread *\/$/;"	kind:member	struct:settings	access:public
settings::maxbytes	memcached.h	/^    size_t maxbytes;$/;"	kind:member	struct:settings	access:public
settings::maxconns	memcached.h	/^    int maxconns;$/;"	kind:member	struct:settings	access:public
settings::maxconns_fast	memcached.h	/^    bool maxconns_fast;     \/* Whether or not to early close connections *\/$/;"	kind:member	struct:settings	access:public
settings::num_threads	memcached.h	/^    int num_threads;        \/* number of worker (without dispatcher) libevent threads to run *\/$/;"	kind:member	struct:settings	access:public
settings::num_threads_per_udp	memcached.h	/^    int num_threads_per_udp; \/* number of worker threads serving each udp socket *\/$/;"	kind:member	struct:settings	access:public
settings::oldest_cas	memcached.h	/^    uint64_t oldest_cas; \/* ignore existing items with CAS values lower than this *\/$/;"	kind:member	struct:settings	access:public
settings::oldest_live	memcached.h	/^    rel_time_t oldest_live; \/* ignore existing items older than this *\/$/;"	kind:member	struct:settings	access:public
settings::port	memcached.h	/^    int port;$/;"	kind:member	struct:settings	access:public
settings::prefix_delimiter	memcached.h	/^    char prefix_delimiter;  \/* character that marks a key prefix (for stats) *\/$/;"	kind:member	struct:settings	access:public
settings::reqs_per_event	memcached.h	/^    int reqs_per_event;     \/* Maximum number of io to process on each$/;"	kind:member	struct:settings	access:public
settings::sasl	memcached.h	/^    bool sasl;              \/* SASL on\/off *\/$/;"	kind:member	struct:settings	access:public
settings::shutdown_command	memcached.h	/^    bool shutdown_command; \/* allow shutdown command *\/$/;"	kind:member	struct:settings	access:public
settings::slab_automove	memcached.h	/^    int slab_automove;     \/* Whether or not to automatically move slabs *\/$/;"	kind:member	struct:settings	access:public
settings::slab_reassign	memcached.h	/^    bool slab_reassign;     \/* Whether or not slab reassignment is allowed *\/$/;"	kind:member	struct:settings	access:public
settings::socketpath	memcached.h	/^    char *socketpath;   \/* path to unix socket if using local socket *\/$/;"	kind:member	struct:settings	access:public
settings::tail_repair_time	memcached.h	/^    int tail_repair_time;   \/* LRU tail refcount leak repair time *\/$/;"	kind:member	struct:settings	access:public
settings::udpport	memcached.h	/^    int udpport;$/;"	kind:member	struct:settings	access:public
settings::use_cas	memcached.h	/^    bool use_cas;$/;"	kind:member	struct:settings	access:public
settings::verbose	memcached.h	/^    int verbose;$/;"	kind:member	struct:settings	access:public
settings::warm_lru_pct	memcached.h	/^    int warm_lru_pct; \/* percentage of slab space for WARM_LRU *\/$/;"	kind:member	struct:settings	access:public
settings_init	memcached.c	/^static void settings_init(void) {$/;"	kind:function	file:	signature:(void)
settings_init	memcached.c	/^static void settings_init(void);$/;"	kind:prototype	file:	signature:(void)
setup_thread	thread.c	/^static void setup_thread(LIBEVENT_THREAD *me) {$/;"	kind:function	file:	signature:(LIBEVENT_THREAD *me)
sfd	memcached.h	/^    int    sfd;$/;"	kind:member	struct:conn	access:public
sfd	thread.c	/^    int               sfd;$/;"	kind:member	struct:conn_queue_item	file:	access:public
sharedstatedir	doc/Makefile	/^sharedstatedir = ${prefix}\/com$/;"	kind:macro
show_help	scripts/damemtop	/^sub show_help {$/;"	kind:subroutine
shutdown_command	memcached.h	/^    bool shutdown_command; \/* allow shutdown command *\/$/;"	kind:member	struct:settings	access:public
shutdown_memcached_server	testapp.c	/^static enum test_return shutdown_memcached_server(void) {$/;"	kind:function	file:	signature:(void)
sig_handler	memcached.c	/^static void sig_handler(const int sig) {$/;"	kind:function	file:	signature:(const int sig)
sigignore	memcached.c	/^static int sigignore(int sig) {$/;"	kind:function	file:	signature:(int sig)
silent_incrdecr	t/binary-sasl.t	/^sub silent_incrdecr {$/;"	kind:subroutine
silent_incrdecr	t/binary.t	/^sub silent_incrdecr {$/;"	kind:subroutine
silent_mutation	t/binary-sasl.t	/^sub silent_mutation {$/;"	kind:subroutine
silent_mutation	t/binary.t	/^sub silent_mutation {$/;"	kind:subroutine
size	memcached.h	/^        size_t size;$/;"	kind:member	struct:conn::__anon8	access:public
size	protocol_binary.h	/^                uint16_t size;$/;"	kind:member	struct:__anon42::__anon43::__anon44	access:public
size	slabs.c	/^    unsigned int size;      \/* sizes of items *\/$/;"	kind:member	struct:__anon45	file:	access:public
sizes	items.c	/^static unsigned int sizes[LARGEST_ID];$/;"	kind:variable	file:
sl_curr	slabs.c	/^    unsigned int sl_curr;   \/* total free items in list *\/$/;"	kind:member	struct:__anon45	file:	access:public
slab_automove	memcached.h	/^    int slab_automove;     \/* Whether or not to automatically move slabs *\/$/;"	kind:member	struct:settings	access:public
slab_bulk_check	slabs.c	/^int slab_bulk_check = DEFAULT_SLAB_BULK_CHECK;$/;"	kind:variable
slab_end	memcached.h	/^    void *slab_end;$/;"	kind:member	struct:slab_rebalance	access:public
slab_list	slabs.c	/^    void **slab_list;       \/* array of slab pointers *\/$/;"	kind:member	struct:__anon45	file:	access:public
slab_pos	memcached.h	/^    void *slab_pos;$/;"	kind:member	struct:slab_rebalance	access:public
slab_reassign	memcached.h	/^    bool slab_reassign;     \/* Whether or not slab reassignment is allowed *\/$/;"	kind:member	struct:settings	access:public
slab_reassign_busy_items	memcached.h	/^    uint64_t      slab_reassign_busy_items; \/* valid temporarily unmovable *\/$/;"	kind:member	struct:stats	access:public
slab_reassign_evictions_nomem	memcached.h	/^    uint64_t      slab_reassign_evictions_nomem; \/* valid items lost during slab move *\/$/;"	kind:member	struct:stats	access:public
slab_reassign_inline_reclaim	memcached.h	/^    uint64_t      slab_reassign_inline_reclaim; \/* valid items lost during slab move *\/$/;"	kind:member	struct:stats	access:public
slab_reassign_rescues	memcached.h	/^    uint64_t      slab_reassign_rescues; \/* items rescued during slab move *\/$/;"	kind:member	struct:stats	access:public
slab_reassign_running	memcached.h	/^    bool          slab_reassign_running; \/* slab reassign in progress *\/$/;"	kind:member	struct:stats	access:public
slab_rebal	memcached.c	/^struct slab_rebalance slab_rebal;$/;"	kind:variable	typeref:struct:slab_rebalance
slab_rebal	memcached.h	/^extern struct slab_rebalance slab_rebal;$/;"	kind:externvar
slab_rebalance	memcached.h	/^struct slab_rebalance {$/;"	kind:struct
slab_rebalance::busy_items	memcached.h	/^    uint32_t busy_items;$/;"	kind:member	struct:slab_rebalance	access:public
slab_rebalance::d_clsid	memcached.h	/^    int d_clsid;$/;"	kind:member	struct:slab_rebalance	access:public
slab_rebalance::done	memcached.h	/^    uint8_t done;$/;"	kind:member	struct:slab_rebalance	access:public
slab_rebalance::evictions_nomem	memcached.h	/^    uint32_t evictions_nomem;$/;"	kind:member	struct:slab_rebalance	access:public
slab_rebalance::inline_reclaim	memcached.h	/^    uint32_t inline_reclaim;$/;"	kind:member	struct:slab_rebalance	access:public
slab_rebalance::rescues	memcached.h	/^    uint32_t rescues;$/;"	kind:member	struct:slab_rebalance	access:public
slab_rebalance::s_clsid	memcached.h	/^    int s_clsid;$/;"	kind:member	struct:slab_rebalance	access:public
slab_rebalance::slab_end	memcached.h	/^    void *slab_end;$/;"	kind:member	struct:slab_rebalance	access:public
slab_rebalance::slab_pos	memcached.h	/^    void *slab_pos;$/;"	kind:member	struct:slab_rebalance	access:public
slab_rebalance::slab_start	memcached.h	/^    void *slab_start;$/;"	kind:member	struct:slab_rebalance	access:public
slab_rebalance_alloc	slabs.c	/^static void *slab_rebalance_alloc(const size_t size, unsigned int id) {$/;"	kind:function	file:	signature:(const size_t size, unsigned int id)
slab_rebalance_cond	slabs.c	/^static pthread_cond_t slab_rebalance_cond = PTHREAD_COND_INITIALIZER;$/;"	kind:variable	file:
slab_rebalance_finish	slabs.c	/^static void slab_rebalance_finish(void) {$/;"	kind:function	file:	signature:(void)
slab_rebalance_move	slabs.c	/^static int slab_rebalance_move(void) {$/;"	kind:function	file:	signature:(void)
slab_rebalance_signal	memcached.c	/^volatile int slab_rebalance_signal;$/;"	kind:variable
slab_rebalance_signal	memcached.h	/^extern volatile int slab_rebalance_signal;$/;"	kind:externvar
slab_rebalance_start	slabs.c	/^static int slab_rebalance_start(void) {$/;"	kind:function	file:	signature:(void)
slab_rebalance_thread	slabs.c	/^static void *slab_rebalance_thread(void *arg) {$/;"	kind:function	file:	signature:(void *arg)
slab_start	memcached.h	/^    void *slab_start;$/;"	kind:member	struct:slab_rebalance	access:public
slab_stats	memcached.h	/^    struct slab_stats slab_stats[MAX_NUMBER_OF_SLAB_CLASSES];$/;"	kind:member	struct:thread_stats	typeref:struct:thread_stats::slab_stats	access:public
slab_stats	memcached.h	/^struct slab_stats {$/;"	kind:struct
slab_stats::cas_badval	memcached.h	/^    uint64_t  cas_badval;$/;"	kind:member	struct:slab_stats	access:public
slab_stats::cas_hits	memcached.h	/^    uint64_t  cas_hits;$/;"	kind:member	struct:slab_stats	access:public
slab_stats::decr_hits	memcached.h	/^    uint64_t  decr_hits;$/;"	kind:member	struct:slab_stats	access:public
slab_stats::delete_hits	memcached.h	/^    uint64_t  delete_hits;$/;"	kind:member	struct:slab_stats	access:public
slab_stats::get_hits	memcached.h	/^    uint64_t  get_hits;$/;"	kind:member	struct:slab_stats	access:public
slab_stats::incr_hits	memcached.h	/^    uint64_t  incr_hits;$/;"	kind:member	struct:slab_stats	access:public
slab_stats::set_cmds	memcached.h	/^    uint64_t  set_cmds;$/;"	kind:member	struct:slab_stats	access:public
slab_stats::touch_hits	memcached.h	/^    uint64_t  touch_hits;$/;"	kind:member	struct:slab_stats	access:public
slab_stats_aggregate	memcached.h	/^void slab_stats_aggregate(struct thread_stats *stats, struct slab_stats *out);$/;"	kind:prototype	signature:(struct thread_stats *stats, struct slab_stats *out)
slab_stats_aggregate	thread.c	/^void slab_stats_aggregate(struct thread_stats *stats, struct slab_stats *out) {$/;"	kind:function	signature:(struct thread_stats *stats, struct slab_stats *out)
slabclass	slabs.c	/^static slabclass_t slabclass[MAX_NUMBER_OF_SLAB_CLASSES];$/;"	kind:variable	file:
slabclass_t	slabs.c	/^} slabclass_t;$/;"	kind:typedef	typeref:struct:__anon45	file:
slabs	slabs.c	/^    unsigned int slabs;     \/* how many slabs were allocated for this class *\/$/;"	kind:member	struct:__anon45	file:	access:public
slabs_adjust_mem_requested	slabs.c	/^void slabs_adjust_mem_requested(unsigned int id, size_t old, size_t ntotal)$/;"	kind:function	signature:(unsigned int id, size_t old, size_t ntotal)
slabs_adjust_mem_requested	slabs.h	/^void slabs_adjust_mem_requested(unsigned int id, size_t old, size_t ntotal);$/;"	kind:prototype	signature:(unsigned int id, size_t old, size_t ntotal)
slabs_alloc	slabs.c	/^void *slabs_alloc(size_t size, unsigned int id, unsigned int *total_chunks,$/;"	kind:function	signature:(size_t size, unsigned int id, unsigned int *total_chunks, unsigned int flags)
slabs_alloc	slabs.h	/^void *slabs_alloc(const size_t size, unsigned int id, unsigned int *total_chunks, unsigned int flags);$/;"	kind:prototype	signature:(const size_t size, unsigned int id, unsigned int *total_chunks, unsigned int flags)
slabs_available_chunks	slabs.c	/^unsigned int slabs_available_chunks(const unsigned int id, bool *mem_flag,$/;"	kind:function	signature:(const unsigned int id, bool *mem_flag, unsigned int *total_chunks, unsigned int *chunks_perslab)
slabs_available_chunks	slabs.h	/^unsigned int slabs_available_chunks(unsigned int id, bool *mem_flag, unsigned int *total_chunks, unsigned int *chunks_perslab);$/;"	kind:prototype	signature:(unsigned int id, bool *mem_flag, unsigned int *total_chunks, unsigned int *chunks_perslab)
slabs_clsid	memcached.h	/^    uint8_t         slabs_clsid;\/* which slab class we're in *\/$/;"	kind:member	struct:__anon5	access:public
slabs_clsid	memcached.h	/^    uint8_t         slabs_clsid;\/* which slab class we're in *\/$/;"	kind:member	struct:_stritem	access:public
slabs_clsid	slabs.c	/^unsigned int slabs_clsid(const size_t size) {$/;"	kind:function	signature:(const size_t size)
slabs_clsid	slabs.h	/^unsigned int slabs_clsid(const size_t size);$/;"	kind:prototype	signature:(const size_t size)
slabs_free	slabs.c	/^void slabs_free(void *ptr, size_t size, unsigned int id) {$/;"	kind:function	signature:(void *ptr, size_t size, unsigned int id)
slabs_free	slabs.h	/^void slabs_free(void *ptr, size_t size, unsigned int id);$/;"	kind:prototype	signature:(void *ptr, size_t size, unsigned int id)
slabs_init	slabs.c	/^void slabs_init(const size_t limit, const double factor, const bool prealloc) {$/;"	kind:function	signature:(const size_t limit, const double factor, const bool prealloc)
slabs_init	slabs.h	/^void slabs_init(const size_t limit, const double factor, const bool prealloc);$/;"	kind:prototype	signature:(const size_t limit, const double factor, const bool prealloc)
slabs_lock	slabs.c	/^static pthread_mutex_t slabs_lock = PTHREAD_MUTEX_INITIALIZER;$/;"	kind:variable	file:
slabs_moved	memcached.h	/^    uint64_t      slabs_moved;       \/* times slabs were moved around *\/$/;"	kind:member	struct:stats	access:public
slabs_preallocate	slabs.c	/^static void slabs_preallocate (const unsigned int maxslabs) {$/;"	kind:function	file:	signature:(const unsigned int maxslabs)
slabs_preallocate	slabs.c	/^static void slabs_preallocate (const unsigned int maxslabs);$/;"	kind:prototype	file:	signature:(const unsigned int maxslabs)
slabs_reassign	slabs.c	/^enum reassign_result_type slabs_reassign(int src, int dst) {$/;"	kind:function	signature:(int src, int dst)
slabs_reassign	slabs.h	/^enum reassign_result_type slabs_reassign(int src, int dst);$/;"	kind:prototype	signature:(int src, int dst)
slabs_reassign_pick_any	slabs.c	/^static int slabs_reassign_pick_any(int dst) {$/;"	kind:function	file:	signature:(int dst)
slabs_rebalance_lock	slabs.c	/^static pthread_mutex_t slabs_rebalance_lock = PTHREAD_MUTEX_INITIALIZER;$/;"	kind:variable	file:
slabs_rebalancer_pause	slabs.c	/^void slabs_rebalancer_pause(void) {$/;"	kind:function	signature:(void)
slabs_rebalancer_pause	slabs.h	/^void slabs_rebalancer_pause(void);$/;"	kind:prototype	signature:(void)
slabs_rebalancer_resume	slabs.c	/^void slabs_rebalancer_resume(void) {$/;"	kind:function	signature:(void)
slabs_rebalancer_resume	slabs.h	/^void slabs_rebalancer_resume(void);$/;"	kind:prototype	signature:(void)
slabs_stats	slabs.c	/^void slabs_stats(ADD_STAT add_stats, void *c) {$/;"	kind:function	signature:(ADD_STAT add_stats, void *c)
slabs_stats	slabs.h	/^void slabs_stats(ADD_STAT add_stats, void *c);$/;"	kind:prototype	signature:(ADD_STAT add_stats, void *c)
sleep	t/lib/MemcachedTest.pm	/^sub sleep {$/;"	kind:subroutine
slots	slabs.c	/^    void *slots;           \/* list of item ptrs *\/$/;"	kind:member	struct:__anon45	file:	access:public
sock	t/lib/MemcachedTest.pm	/^sub sock {$/;"	kind:subroutine
sock	testapp.c	/^static int sock;$/;"	kind:variable	file:
socketpath	memcached.h	/^    char *socketpath;   \/* path to unix socket if using local socket *\/$/;"	kind:member	struct:settings	access:public
spawn_and_wait	timedrun.c	/^static int spawn_and_wait(char **argv)$/;"	kind:function	file:	signature:(char **argv)
split_slab_page_into_freelist	slabs.c	/^static void split_slab_page_into_freelist(char *ptr, const unsigned int id) {$/;"	kind:function	file:	signature:(char *ptr, const unsigned int id)
srcdir	doc/Makefile	/^srcdir = .$/;"	kind:macro
start	scripts/memcached.sysv	/^start () {$/;"	kind:function
start_assoc_maintenance_thread	assoc.c	/^int start_assoc_maintenance_thread() {$/;"	kind:function
start_assoc_maintenance_thread	assoc.h	/^int start_assoc_maintenance_thread(void);$/;"	kind:prototype	signature:(void)
start_item_crawler_thread	items.c	/^int start_item_crawler_thread(void) {$/;"	kind:function	signature:(void)
start_item_crawler_thread	items.h	/^int start_item_crawler_thread(void);$/;"	kind:prototype	signature:(void)
start_lru_maintainer_thread	items.c	/^int start_lru_maintainer_thread(void) {$/;"	kind:function	signature:(void)
start_lru_maintainer_thread	items.h	/^int start_lru_maintainer_thread(void);$/;"	kind:prototype	signature:(void)
start_memcached_server	testapp.c	/^static enum test_return start_memcached_server(void) {$/;"	kind:function	file:	signature:(void)
start_server	testapp.c	/^static pid_t start_server(in_port_t *port_out, bool daemon, int timeout) {$/;"	kind:function	file:	signature:(in_port_t *port_out, bool daemon, int timeout)
start_slab_maintenance_thread	slabs.c	/^int start_slab_maintenance_thread(void) {$/;"	kind:function	signature:(void)
start_slab_maintenance_thread	slabs.h	/^int start_slab_maintenance_thread(void);$/;"	kind:prototype	signature:(void)
start_time	items.c	/^    rel_time_t start_time;$/;"	kind:member	struct:__anon3	file:	access:public
started	memcached.h	/^    time_t        started;          \/* when the process was started *\/$/;"	kind:member	struct:stats	access:public
started_expanding	assoc.c	/^static bool started_expanding = false;$/;"	kind:variable	file:
state	memcached.h	/^    enum conn_states  state;$/;"	kind:member	struct:conn	typeref:enum:conn::conn_states	access:public
state_text	memcached.c	/^static const char *state_text(enum conn_states state) {$/;"	kind:function	file:	signature:(enum conn_states state)
stats	memcached.c	/^struct stats stats;$/;"	kind:variable	typeref:struct:stats
stats	memcached.h	/^    struct thread_stats stats;  \/* Stats generated by this thread *\/$/;"	kind:member	struct:__anon6	typeref:struct:__anon6::thread_stats	access:public
stats	memcached.h	/^    } stats;$/;"	kind:member	struct:conn	typeref:struct:conn::__anon8	access:public
stats	memcached.h	/^extern struct stats stats;$/;"	kind:externvar
stats	memcached.h	/^struct stats {$/;"	kind:struct
stats	t/binary-sasl.t	/^sub stats {$/;"	kind:subroutine
stats	t/binary.t	/^sub stats {$/;"	kind:subroutine
stats::accepting_conns	memcached.h	/^    bool          accepting_conns;  \/* whether we are currently accepting *\/$/;"	kind:member	struct:stats	access:public
stats::conn_structs	memcached.h	/^    unsigned int  conn_structs;$/;"	kind:member	struct:stats	access:public
stats::curr_bytes	memcached.h	/^    uint64_t      curr_bytes;$/;"	kind:member	struct:stats	access:public
stats::curr_conns	memcached.h	/^    unsigned int  curr_conns;$/;"	kind:member	struct:stats	access:public
stats::curr_items	memcached.h	/^    unsigned int  curr_items;$/;"	kind:member	struct:stats	access:public
stats::evicted_unfetched	memcached.h	/^    uint64_t      evicted_unfetched; \/* items evicted but never touched *\/$/;"	kind:member	struct:stats	access:public
stats::evictions	memcached.h	/^    uint64_t      evictions;$/;"	kind:member	struct:stats	access:public
stats::expired_unfetched	memcached.h	/^    uint64_t      expired_unfetched; \/* items reclaimed but never touched *\/$/;"	kind:member	struct:stats	access:public
stats::get_cmds	memcached.h	/^    uint64_t      get_cmds;$/;"	kind:member	struct:stats	access:public
stats::get_hits	memcached.h	/^    uint64_t      get_hits;$/;"	kind:member	struct:stats	access:public
stats::get_misses	memcached.h	/^    uint64_t      get_misses;$/;"	kind:member	struct:stats	access:public
stats::hash_bytes	memcached.h	/^    uint64_t      hash_bytes;       \/* size used for hash tables *\/$/;"	kind:member	struct:stats	access:public
stats::hash_is_expanding	memcached.h	/^    bool          hash_is_expanding; \/* If the hash table is being expanded *\/$/;"	kind:member	struct:stats	access:public
stats::hash_power_level	memcached.h	/^    unsigned int  hash_power_level; \/* Better hope it's not over 9000 *\/$/;"	kind:member	struct:stats	access:public
stats::listen_disabled_num	memcached.h	/^    uint64_t      listen_disabled_num;$/;"	kind:member	struct:stats	access:public
stats::lru_crawler_running	memcached.h	/^    bool          lru_crawler_running; \/* crawl in progress *\/$/;"	kind:member	struct:stats	access:public
stats::lru_crawler_starts	memcached.h	/^    uint64_t      lru_crawler_starts; \/* Number of item crawlers kicked off *\/$/;"	kind:member	struct:stats	access:public
stats::lru_maintainer_juggles	memcached.h	/^    uint64_t      lru_maintainer_juggles; \/* number of LRU bg pokes *\/$/;"	kind:member	struct:stats	access:public
stats::malloc_fails	memcached.h	/^    uint64_t      malloc_fails;$/;"	kind:member	struct:stats	access:public
stats::maxconns_entered	memcached.h	/^    struct timeval maxconns_entered;  \/* last time maxconns entered *\/$/;"	kind:member	struct:stats	typeref:struct:stats::timeval	access:public
stats::mutex	memcached.h	/^    pthread_mutex_t mutex;$/;"	kind:member	struct:stats	access:public
stats::reclaimed	memcached.h	/^    uint64_t      reclaimed;$/;"	kind:member	struct:stats	access:public
stats::rejected_conns	memcached.h	/^    uint64_t      rejected_conns;$/;"	kind:member	struct:stats	access:public
stats::reserved_fds	memcached.h	/^    unsigned int  reserved_fds;$/;"	kind:member	struct:stats	access:public
stats::set_cmds	memcached.h	/^    uint64_t      set_cmds;$/;"	kind:member	struct:stats	access:public
stats::slab_reassign_busy_items	memcached.h	/^    uint64_t      slab_reassign_busy_items; \/* valid temporarily unmovable *\/$/;"	kind:member	struct:stats	access:public
stats::slab_reassign_evictions_nomem	memcached.h	/^    uint64_t      slab_reassign_evictions_nomem; \/* valid items lost during slab move *\/$/;"	kind:member	struct:stats	access:public
stats::slab_reassign_inline_reclaim	memcached.h	/^    uint64_t      slab_reassign_inline_reclaim; \/* valid items lost during slab move *\/$/;"	kind:member	struct:stats	access:public
stats::slab_reassign_rescues	memcached.h	/^    uint64_t      slab_reassign_rescues; \/* items rescued during slab move *\/$/;"	kind:member	struct:stats	access:public
stats::slab_reassign_running	memcached.h	/^    bool          slab_reassign_running; \/* slab reassign in progress *\/$/;"	kind:member	struct:stats	access:public
stats::slabs_moved	memcached.h	/^    uint64_t      slabs_moved;       \/* times slabs were moved around *\/$/;"	kind:member	struct:stats	access:public
stats::started	memcached.h	/^    time_t        started;          \/* when the process was started *\/$/;"	kind:member	struct:stats	access:public
stats::time_in_listen_disabled_us	memcached.h	/^    uint64_t      time_in_listen_disabled_us;  \/* elapsed time in microseconds while server unable to process new connections *\/$/;"	kind:member	struct:stats	access:public
stats::total_conns	memcached.h	/^    unsigned int  total_conns;$/;"	kind:member	struct:stats	access:public
stats::total_items	memcached.h	/^    unsigned int  total_items;$/;"	kind:member	struct:stats	access:public
stats::touch_cmds	memcached.h	/^    uint64_t      touch_cmds;$/;"	kind:member	struct:stats	access:public
stats::touch_hits	memcached.h	/^    uint64_t      touch_hits;$/;"	kind:member	struct:stats	access:public
stats::touch_misses	memcached.h	/^    uint64_t      touch_misses;$/;"	kind:member	struct:stats	access:public
stats_init	memcached.c	/^static void stats_init(void) {$/;"	kind:function	file:	signature:(void)
stats_init	memcached.c	/^static void stats_init(void);$/;"	kind:prototype	file:	signature:(void)
stats_lock	thread.c	/^static pthread_mutex_t stats_lock = PTHREAD_MUTEX_INITIALIZER;$/;"	kind:variable	file:
stats_prefix_clear	stats.c	/^void stats_prefix_clear() {$/;"	kind:function
stats_prefix_clear	stats.h	/^void stats_prefix_clear(void);$/;"	kind:prototype	signature:(void)
stats_prefix_dump	stats.c	/^char *stats_prefix_dump(int *length) {$/;"	kind:function	signature:(int *length)
stats_prefix_dump	stats.h	/^char *stats_prefix_dump(int *length);$/;"	kind:prototype	signature:(int *length)
stats_prefix_find	stats.c	/^static PREFIX_STATS *stats_prefix_find(const char *key, const size_t nkey) {$/;"	kind:function	file:	signature:(const char *key, const size_t nkey)
stats_prefix_init	stats.c	/^void stats_prefix_init() {$/;"	kind:function
stats_prefix_init	stats.h	/^void stats_prefix_init(void);$/;"	kind:prototype	signature:(void)
stats_prefix_record_delete	stats.c	/^void stats_prefix_record_delete(const char *key, const size_t nkey) {$/;"	kind:function	signature:(const char *key, const size_t nkey)
stats_prefix_record_delete	stats.h	/^void stats_prefix_record_delete(const char *key, const size_t nkey);$/;"	kind:prototype	signature:(const char *key, const size_t nkey)
stats_prefix_record_get	stats.c	/^void stats_prefix_record_get(const char *key, const size_t nkey, const bool is_hit) {$/;"	kind:function	signature:(const char *key, const size_t nkey, const bool is_hit)
stats_prefix_record_get	stats.h	/^void stats_prefix_record_get(const char *key, const size_t nkey, const bool is_hit);$/;"	kind:prototype	signature:(const char *key, const size_t nkey, const bool is_hit)
stats_prefix_record_set	stats.c	/^void stats_prefix_record_set(const char *key, const size_t nkey) {$/;"	kind:function	signature:(const char *key, const size_t nkey)
stats_prefix_record_set	stats.h	/^void stats_prefix_record_set(const char *key, const size_t nkey);$/;"	kind:prototype	signature:(const char *key, const size_t nkey)
stats_reset	memcached.c	/^static void stats_reset(void) {$/;"	kind:function	file:	signature:(void)
status	protocol_binary.h	/^            uint16_t status;$/;"	kind:member	struct:__anon15::__anon16	access:public
stop	scripts/memcached.sysv	/^stop () {$/;"	kind:function
stop	t/lib/MemcachedTest.pm	/^sub stop {$/;"	kind:subroutine
stop_assoc_maintenance_thread	assoc.c	/^void stop_assoc_maintenance_thread() {$/;"	kind:function
stop_assoc_maintenance_thread	assoc.h	/^void stop_assoc_maintenance_thread(void);$/;"	kind:prototype	signature:(void)
stop_item_crawler_thread	items.c	/^int stop_item_crawler_thread(void) {$/;"	kind:function	signature:(void)
stop_item_crawler_thread	items.h	/^int stop_item_crawler_thread(void);$/;"	kind:prototype	signature:(void)
stop_lru_maintainer_thread	items.c	/^int stop_lru_maintainer_thread(void) {$/;"	kind:function	signature:(void)
stop_lru_maintainer_thread	items.h	/^int stop_lru_maintainer_thread(void);$/;"	kind:prototype	signature:(void)
stop_memcached_server	testapp.c	/^static enum test_return stop_memcached_server(void) {$/;"	kind:function	file:	signature:(void)
stop_slab_maintenance_thread	slabs.c	/^void stop_slab_maintenance_thread(void) {$/;"	kind:function	signature:(void)
stop_slab_maintenance_thread	slabs.h	/^void stop_slab_maintenance_thread(void);$/;"	kind:prototype	signature:(void)
storage_command	testapp.c	/^static off_t storage_command(char*buf,$/;"	kind:function	file:	signature:(char*buf, size_t bufsz, uint8_t cmd, const void* key, size_t keylen, const void* dta, size_t dtalen, uint32_t flags, uint32_t exp)
store_item	memcached.h	/^enum store_item_type store_item(item *item, int comm, conn *c);$/;"	kind:prototype	signature:(item *item, int comm, conn *c)
store_item	thread.c	/^enum store_item_type store_item(item *item, int comm, conn* c) {$/;"	kind:function	signature:(item *item, int comm, conn* c)
store_item_type	memcached.h	/^enum store_item_type {$/;"	kind:enum
stress	t/stress-memcached.pl	/^sub stress {$/;"	kind:subroutine
subdir	doc/Makefile	/^subdir = doc$/;"	kind:macro
substate	memcached.h	/^    enum bin_substates substate;$/;"	kind:member	struct:conn	typeref:enum:conn::bin_substates	access:public
suffix_cache	memcached.h	/^    cache_t *suffix_cache;      \/* suffix cache *\/$/;"	kind:member	struct:__anon6	access:public
suffixcurr	memcached.h	/^    char   **suffixcurr;$/;"	kind:member	struct:conn	access:public
suffixleft	memcached.h	/^    int    suffixleft;$/;"	kind:member	struct:conn	access:public
suffixlist	memcached.h	/^    char   **suffixlist;$/;"	kind:member	struct:conn	access:public
suffixsize	memcached.h	/^    int    suffixsize;$/;"	kind:member	struct:conn	access:public
supports_sasl	t/lib/MemcachedTest.pm	/^sub supports_sasl {$/;"	kind:subroutine
supports_udp	t/lib/MemcachedTest.pm	/^sub supports_udp {$/;"	kind:subroutine
sysconfdir	doc/Makefile	/^sysconfdir = ${prefix}\/etc$/;"	kind:macro
tail	thread.c	/^    CQ_ITEM *tail;$/;"	kind:member	struct:conn_queue	file:	access:public
tail_repair_time	memcached.h	/^    int tail_repair_time;   \/* LRU tail refcount leak repair time *\/$/;"	kind:member	struct:settings	access:public
tailrepairs	items.c	/^    uint64_t tailrepairs;$/;"	kind:member	struct:__anon2	file:	access:public
tails	items.c	/^static item *tails[LARGEST_ID];$/;"	kind:variable	file:
target_alias	doc/Makefile	/^target_alias = $/;"	kind:macro
tcp_transport	memcached.h	/^    tcp_transport,$/;"	kind:enumerator	enum:network_transport
test_binary_add	testapp.c	/^static enum test_return test_binary_add(void) {$/;"	kind:function	file:	signature:(void)
test_binary_add_impl	testapp.c	/^static enum test_return test_binary_add_impl(const char *key, uint8_t cmd) {$/;"	kind:function	file:	signature:(const char *key, uint8_t cmd)
test_binary_addq	testapp.c	/^static enum test_return test_binary_addq(void) {$/;"	kind:function	file:	signature:(void)
test_binary_append	testapp.c	/^static enum test_return test_binary_append(void) {$/;"	kind:function	file:	signature:(void)
test_binary_appendq	testapp.c	/^static enum test_return test_binary_appendq(void) {$/;"	kind:function	file:	signature:(void)
test_binary_concat_impl	testapp.c	/^static enum test_return test_binary_concat_impl(const char *key, uint8_t cmd) {$/;"	kind:function	file:	signature:(const char *key, uint8_t cmd)
test_binary_decr	testapp.c	/^static enum test_return test_binary_decr(void) {$/;"	kind:function	file:	signature:(void)
test_binary_decr_impl	testapp.c	/^static enum test_return test_binary_decr_impl(const char* key, uint8_t cmd) {$/;"	kind:function	file:	signature:(const char* key, uint8_t cmd)
test_binary_decrq	testapp.c	/^static enum test_return test_binary_decrq(void) {$/;"	kind:function	file:	signature:(void)
test_binary_delete	testapp.c	/^static enum test_return test_binary_delete(void) {$/;"	kind:function	file:	signature:(void)
test_binary_delete_impl	testapp.c	/^static enum test_return test_binary_delete_impl(const char *key, uint8_t cmd) {$/;"	kind:function	file:	signature:(const char *key, uint8_t cmd)
test_binary_deleteq	testapp.c	/^static enum test_return test_binary_deleteq(void) {$/;"	kind:function	file:	signature:(void)
test_binary_flush	testapp.c	/^static enum test_return test_binary_flush(void) {$/;"	kind:function	file:	signature:(void)
test_binary_flush_impl	testapp.c	/^static enum test_return test_binary_flush_impl(const char *key, uint8_t cmd) {$/;"	kind:function	file:	signature:(const char *key, uint8_t cmd)
test_binary_flushq	testapp.c	/^static enum test_return test_binary_flushq(void) {$/;"	kind:function	file:	signature:(void)
test_binary_gat	testapp.c	/^static enum test_return test_binary_gat(void) {$/;"	kind:function	file:	signature:(void)
test_binary_gatk	testapp.c	/^static enum test_return test_binary_gatk(void) {$/;"	kind:function	file:	signature:(void)
test_binary_gatkq	testapp.c	/^static enum test_return test_binary_gatkq(void) {$/;"	kind:function	file:	signature:(void)
test_binary_gatq	testapp.c	/^static enum test_return test_binary_gatq(void) {$/;"	kind:function	file:	signature:(void)
test_binary_get	testapp.c	/^static enum test_return test_binary_get(void) {$/;"	kind:function	file:	signature:(void)
test_binary_get_impl	testapp.c	/^static enum test_return test_binary_get_impl(const char *key, uint8_t cmd) {$/;"	kind:function	file:	signature:(const char *key, uint8_t cmd)
test_binary_getk	testapp.c	/^static enum test_return test_binary_getk(void) {$/;"	kind:function	file:	signature:(void)
test_binary_getkq	testapp.c	/^static enum test_return test_binary_getkq(void) {$/;"	kind:function	file:	signature:(void)
test_binary_getq	testapp.c	/^static enum test_return test_binary_getq(void) {$/;"	kind:function	file:	signature:(void)
test_binary_getq_impl	testapp.c	/^static enum test_return test_binary_getq_impl(const char *key, uint8_t cmd) {$/;"	kind:function	file:	signature:(const char *key, uint8_t cmd)
test_binary_illegal	testapp.c	/^static enum test_return test_binary_illegal(void) {$/;"	kind:function	file:	signature:(void)
test_binary_incr	testapp.c	/^static enum test_return test_binary_incr(void) {$/;"	kind:function	file:	signature:(void)
test_binary_incr_impl	testapp.c	/^static enum test_return test_binary_incr_impl(const char* key, uint8_t cmd) {$/;"	kind:function	file:	signature:(const char* key, uint8_t cmd)
test_binary_incrq	testapp.c	/^static enum test_return test_binary_incrq(void) {$/;"	kind:function	file:	signature:(void)
test_binary_noop	testapp.c	/^static enum test_return test_binary_noop(void) {$/;"	kind:function	file:	signature:(void)
test_binary_pipeline_hickup	testapp.c	/^static enum test_return test_binary_pipeline_hickup(void)$/;"	kind:function	file:	signature:(void)
test_binary_pipeline_hickup_chunk	testapp.c	/^static enum test_return test_binary_pipeline_hickup_chunk(void *buffer, size_t buffersize) {$/;"	kind:function	file:	signature:(void *buffer, size_t buffersize)
test_binary_prepend	testapp.c	/^static enum test_return test_binary_prepend(void) {$/;"	kind:function	file:	signature:(void)
test_binary_prependq	testapp.c	/^static enum test_return test_binary_prependq(void) {$/;"	kind:function	file:	signature:(void)
test_binary_quit	testapp.c	/^static enum test_return test_binary_quit(void) {$/;"	kind:function	file:	signature:(void)
test_binary_quit_impl	testapp.c	/^static enum test_return test_binary_quit_impl(uint8_t cmd) {$/;"	kind:function	file:	signature:(uint8_t cmd)
test_binary_quitq	testapp.c	/^static enum test_return test_binary_quitq(void) {$/;"	kind:function	file:	signature:(void)
test_binary_replace	testapp.c	/^static enum test_return test_binary_replace(void) {$/;"	kind:function	file:	signature:(void)
test_binary_replace_impl	testapp.c	/^static enum test_return test_binary_replace_impl(const char* key, uint8_t cmd) {$/;"	kind:function	file:	signature:(const char* key, uint8_t cmd)
test_binary_replaceq	testapp.c	/^static enum test_return test_binary_replaceq(void) {$/;"	kind:function	file:	signature:(void)
test_binary_set	testapp.c	/^static enum test_return test_binary_set(void) {$/;"	kind:function	file:	signature:(void)
test_binary_set_impl	testapp.c	/^static enum test_return test_binary_set_impl(const char *key, uint8_t cmd) {$/;"	kind:function	file:	signature:(const char *key, uint8_t cmd)
test_binary_setq	testapp.c	/^static enum test_return test_binary_setq(void) {$/;"	kind:function	file:	signature:(void)
test_binary_stat	testapp.c	/^static enum test_return test_binary_stat(void) {$/;"	kind:function	file:	signature:(void)
test_binary_version	testapp.c	/^static enum test_return test_binary_version(void) {$/;"	kind:function	file:	signature:(void)
test_count	stats.c	/^static int test_count = 0;$/;"	kind:variable	file:
test_equals_int	stats.c	/^static void test_equals_int(char *what, int a, int b) { test_count++; if (a != b) fail(what); }$/;"	kind:function	file:	signature:(char *what, int a, int b)
test_equals_ptr	stats.c	/^static void test_equals_ptr(char *what, void *a, void *b) { test_count++; if (a != b) fail(what); }$/;"	kind:function	file:	signature:(char *what, void *a, void *b)
test_equals_str	stats.c	/^static void test_equals_str(char *what, const char *a, const char *b) { test_count++; if (strcmp(a, b)) fail(what); }$/;"	kind:function	file:	signature:(char *what, const char *a, const char *b)
test_equals_ull	stats.c	/^static void test_equals_ull(char *what, uint64_t a, uint64_t b) { test_count++; if (a != b) fail(what); }$/;"	kind:function	file:	signature:(char *what, uint64_t a, uint64_t b)
test_issue_101	testapp.c	/^static enum test_return test_issue_101(void) {$/;"	kind:function	file:	signature:(void)
test_issue_102	testapp.c	/^static enum test_return test_issue_102(void) {$/;"	kind:function	file:	signature:(void)
test_issue_161	testapp.c	/^static enum test_return test_issue_161(void)$/;"	kind:function	file:	signature:(void)
test_issue_44	testapp.c	/^static enum test_return test_issue_44(void) {$/;"	kind:function	file:	signature:(void)
test_issue_92	testapp.c	/^static enum test_return test_issue_92(void) {$/;"	kind:function	file:	signature:(void)
test_notequals_ptr	stats.c	/^static void test_notequals_ptr(char *what, void *a, void *b) { test_count++; if (a == b) fail(what); }$/;"	kind:function	file:	signature:(char *what, void *a, void *b)
test_notnull_ptr	stats.c	/^static void test_notnull_ptr(char *what, void *a) { test_count++; if (NULL == a) fail(what); }$/;"	kind:function	file:	signature:(char *what, void *a)
test_prefix_dump	stats.c	/^static void test_prefix_dump() {$/;"	kind:function	file:
test_prefix_find	stats.c	/^static void test_prefix_find() {$/;"	kind:function	file:
test_prefix_record_delete	stats.c	/^static void test_prefix_record_delete() {$/;"	kind:function	file:
test_prefix_record_get	stats.c	/^static void test_prefix_record_get() {$/;"	kind:function	file:
test_prefix_record_set	stats.c	/^static void test_prefix_record_set() {$/;"	kind:function	file:
test_return	testapp.c	/^enum test_return { TEST_SKIP, TEST_PASS, TEST_FAIL };$/;"	kind:enum	file:
test_safe_strtol	testapp.c	/^static enum test_return test_safe_strtol(void) {$/;"	kind:function	file:	signature:(void)
test_safe_strtoll	testapp.c	/^static enum test_return test_safe_strtoll(void) {$/;"	kind:function	file:	signature:(void)
test_safe_strtoul	testapp.c	/^static enum test_return test_safe_strtoul(void) {$/;"	kind:function	file:	signature:(void)
test_safe_strtoull	testapp.c	/^static enum test_return test_safe_strtoull(void) {$/;"	kind:function	file:	signature:(void)
test_varargs_macros	configure	/^  test_varargs_macros ();$/;"	kind:function
test_vperror	testapp.c	/^static enum test_return test_vperror(void) {$/;"	kind:function	file:	signature:(void)
testcase	testapp.c	/^struct testcase {$/;"	kind:struct	file:
testcase::description	testapp.c	/^    const char *description;$/;"	kind:member	struct:testcase	file:	access:public
testcase::function	testapp.c	/^    TEST_FUNC function;$/;"	kind:member	struct:testcase	file:	access:public
testcases	testapp.c	/^struct testcase testcases[] = {$/;"	kind:variable	typeref:struct:testcase
thread	memcached.h	/^    LIBEVENT_THREAD *thread; \/* Pointer to the thread object serving this connection *\/$/;"	kind:member	struct:conn	access:public
thread_id	memcached.h	/^    pthread_t thread_id;        \/* unique ID of this thread *\/$/;"	kind:member	struct:__anon6	access:public
thread_id	memcached.h	/^    pthread_t thread_id;        \/* unique ID of this thread *\/$/;"	kind:member	struct:__anon7	access:public
thread_libevent_process	thread.c	/^static void thread_libevent_process(int fd, short which, void *arg) {$/;"	kind:function	file:	signature:(int fd, short which, void *arg)
thread_libevent_process	thread.c	/^static void thread_libevent_process(int fd, short which, void *arg);$/;"	kind:prototype	file:	signature:(int fd, short which, void *arg)
thread_stats	memcached.h	/^struct thread_stats {$/;"	kind:struct
thread_stats::auth_cmds	memcached.h	/^    uint64_t          auth_cmds;$/;"	kind:member	struct:thread_stats	access:public
thread_stats::auth_errors	memcached.h	/^    uint64_t          auth_errors;$/;"	kind:member	struct:thread_stats	access:public
thread_stats::bytes_read	memcached.h	/^    uint64_t          bytes_read;$/;"	kind:member	struct:thread_stats	access:public
thread_stats::bytes_written	memcached.h	/^    uint64_t          bytes_written;$/;"	kind:member	struct:thread_stats	access:public
thread_stats::cas_misses	memcached.h	/^    uint64_t          cas_misses;$/;"	kind:member	struct:thread_stats	access:public
thread_stats::conn_yields	memcached.h	/^    uint64_t          conn_yields; \/* # of yields for connections (-R option)*\/$/;"	kind:member	struct:thread_stats	access:public
thread_stats::decr_misses	memcached.h	/^    uint64_t          decr_misses;$/;"	kind:member	struct:thread_stats	access:public
thread_stats::delete_misses	memcached.h	/^    uint64_t          delete_misses;$/;"	kind:member	struct:thread_stats	access:public
thread_stats::flush_cmds	memcached.h	/^    uint64_t          flush_cmds;$/;"	kind:member	struct:thread_stats	access:public
thread_stats::get_cmds	memcached.h	/^    uint64_t          get_cmds;$/;"	kind:member	struct:thread_stats	access:public
thread_stats::get_misses	memcached.h	/^    uint64_t          get_misses;$/;"	kind:member	struct:thread_stats	access:public
thread_stats::incr_misses	memcached.h	/^    uint64_t          incr_misses;$/;"	kind:member	struct:thread_stats	access:public
thread_stats::mutex	memcached.h	/^    pthread_mutex_t   mutex;$/;"	kind:member	struct:thread_stats	access:public
thread_stats::slab_stats	memcached.h	/^    struct slab_stats slab_stats[MAX_NUMBER_OF_SLAB_CLASSES];$/;"	kind:member	struct:thread_stats	typeref:struct:thread_stats::slab_stats	access:public
thread_stats::touch_cmds	memcached.h	/^    uint64_t          touch_cmds;$/;"	kind:member	struct:thread_stats	access:public
thread_stats::touch_misses	memcached.h	/^    uint64_t          touch_misses;$/;"	kind:member	struct:thread_stats	access:public
threadlocal_stats_aggregate	memcached.h	/^void threadlocal_stats_aggregate(struct thread_stats *stats);$/;"	kind:prototype	signature:(struct thread_stats *stats)
threadlocal_stats_aggregate	thread.c	/^void threadlocal_stats_aggregate(struct thread_stats *stats) {$/;"	kind:function	signature:(struct thread_stats *stats)
threadlocal_stats_reset	memcached.h	/^void threadlocal_stats_reset(void);$/;"	kind:prototype	signature:(void)
threadlocal_stats_reset	thread.c	/^void threadlocal_stats_reset(void) {$/;"	kind:function	signature:(void)
threads	thread.c	/^static LIBEVENT_THREAD *threads;$/;"	kind:variable	file:
time	memcached.h	/^    rel_time_t      time;       \/* least recent access *\/$/;"	kind:member	struct:__anon5	access:public
time	memcached.h	/^    rel_time_t      time;       \/* least recent access *\/$/;"	kind:member	struct:_stritem	access:public
time_in_listen_disabled_us	memcached.h	/^    uint64_t      time_in_listen_disabled_us;  \/* elapsed time in microseconds while server unable to process new connections *\/$/;"	kind:member	struct:stats	access:public
token_s	memcached.c	/^typedef struct token_s {$/;"	kind:struct	file:
token_s::length	memcached.c	/^    size_t length;$/;"	kind:member	struct:token_s	file:	access:public
token_s::value	memcached.c	/^    char *value;$/;"	kind:member	struct:token_s	file:	access:public
token_t	memcached.c	/^} token_t;$/;"	kind:typedef	typeref:struct:token_s	file:
tokenize_command	memcached.c	/^static size_t tokenize_command(char *command, token_t *tokens, const size_t max_tokens) {$/;"	kind:function	file:	signature:(char *command, token_t *tokens, const size_t max_tokens)
too_big	t/binary-sasl.t	/^sub too_big {$/;"	kind:subroutine
too_big	t/binary.t	/^sub too_big {$/;"	kind:subroutine
top_build_prefix	doc/Makefile	/^top_build_prefix = ..\/$/;"	kind:macro
top_builddir	doc/Makefile	/^top_builddir = ..$/;"	kind:macro
top_srcdir	doc/Makefile	/^top_srcdir = ..$/;"	kind:macro
total_conns	memcached.h	/^    unsigned int  total_conns;$/;"	kind:member	struct:stats	access:public
total_items	memcached.h	/^    unsigned int  total_items;$/;"	kind:member	struct:stats	access:public
total_prefix_size	stats.c	/^static int total_prefix_size = 0;$/;"	kind:variable	file:
touch	t/binary.t	/^sub touch {$/;"	kind:subroutine
touch_cmds	memcached.h	/^    uint64_t          touch_cmds;$/;"	kind:member	struct:thread_stats	access:public
touch_cmds	memcached.h	/^    uint64_t      touch_cmds;$/;"	kind:member	struct:stats	access:public
touch_command	testapp.c	/^static off_t touch_command(char* buf,$/;"	kind:function	file:	signature:(char* buf, size_t bufsz, uint8_t cmd, const void* key, size_t keylen, uint32_t exptime)
touch_hits	memcached.h	/^    uint64_t      touch_hits;$/;"	kind:member	struct:stats	access:public
touch_hits	memcached.h	/^    uint64_t  touch_hits;$/;"	kind:member	struct:slab_stats	access:public
touch_misses	memcached.h	/^    uint64_t          touch_misses;$/;"	kind:member	struct:thread_stats	access:public
touch_misses	memcached.h	/^    uint64_t      touch_misses;$/;"	kind:member	struct:stats	access:public
transform	doc/Makefile	/^transform = $(program_transform_name)$/;"	kind:macro
transmit	memcached.c	/^static enum transmit_result transmit(conn *c) {$/;"	kind:function	file:	signature:(conn *c)
transmit	memcached.c	/^static enum transmit_result transmit(conn *c);$/;"	kind:prototype	file:	signature:(conn *c)
transmit_result	memcached.c	/^enum transmit_result {$/;"	kind:enum	file:
transport	memcached.h	/^    enum network_transport transport; \/* what transport is used by this connection *\/$/;"	kind:member	struct:conn	typeref:enum:conn::network_transport	access:public
transport	thread.c	/^    enum network_transport     transport;$/;"	kind:member	struct:conn_queue_item	typeref:enum:conn_queue_item::network_transport	file:	access:public
try_read_command	memcached.c	/^static int try_read_command(conn *c) {$/;"	kind:function	file:	signature:(conn *c)
try_read_command	memcached.c	/^static int try_read_command(conn *c);$/;"	kind:prototype	file:	signature:(conn *c)
try_read_network	memcached.c	/^static enum try_read_result try_read_network(conn *c) {$/;"	kind:function	file:	signature:(conn *c)
try_read_network	memcached.c	/^static enum try_read_result try_read_network(conn *c);$/;"	kind:prototype	file:	signature:(conn *c)
try_read_result	memcached.c	/^enum try_read_result {$/;"	kind:enum	file:
try_read_udp	memcached.c	/^static enum try_read_result try_read_udp(conn *c) {$/;"	kind:function	file:	signature:(conn *c)
try_read_udp	memcached.c	/^static enum try_read_result try_read_udp(conn *c);$/;"	kind:prototype	file:	signature:(conn *c)
ttl_hourplus	items.c	/^    uint64_t ttl_hourplus;$/;"	kind:member	struct:__anon3	file:	access:public
ub1	assoc.c	/^typedef  unsigned       char ub1;   \/* unsigned 1-byte quantities *\/$/;"	kind:typedef	file:
ub4	assoc.c	/^typedef  unsigned long  int  ub4;   \/* unsigned 4-byte quantities *\/$/;"	kind:typedef	file:
udp_delete_test	t/udp.t	/^sub udp_delete_test {$/;"	kind:subroutine
udp_get_test	t/udp.t	/^sub udp_get_test {$/;"	kind:subroutine
udp_incr_decr_test	t/udp.t	/^sub udp_incr_decr_test {$/;"	kind:subroutine
udp_set_test	t/udp.t	/^sub udp_set_test {$/;"	kind:subroutine
udp_transport	memcached.h	/^    udp_transport$/;"	kind:enumerator	enum:network_transport
udpport	memcached.h	/^    int udpport;$/;"	kind:member	struct:settings	access:public
udpport	t/lib/MemcachedTest.pm	/^sub udpport { $_[0]{udpport} }$/;"	kind:subroutine
unlikely	memcached.h	625;"	kind:macro
update_event	memcached.c	/^static bool update_event(conn *c, const int new_flags) {$/;"	kind:function	file:	signature:(conn *c, const int new_flags)
update_event	memcached.c	/^static bool update_event(conn *c, const int new_flags);$/;"	kind:prototype	file:	signature:(conn *c, const int new_flags)
usage	memcached.c	/^static void usage(void) {$/;"	kind:function	file:	signature:(void)
usage	scripts/mc_slab_mover	/^sub usage {$/;"	kind:subroutine
usage_license	memcached.c	/^static void usage_license(void) {$/;"	kind:function	file:	signature:(void)
use_cas	memcached.h	/^    bool use_cas;$/;"	kind:member	struct:settings	access:public
validate_response_header	testapp.c	/^static void validate_response_header(protocol_binary_response_no_extras *response,$/;"	kind:function	file:	signature:(protocol_binary_response_no_extras *response, uint8_t cmd, uint16_t status)
value	memcached.c	/^    char *value;$/;"	kind:member	struct:token_s	file:	access:public
value	protocol_binary.h	/^                uint64_t value;$/;"	kind:member	struct:__anon33::__anon34::__anon35	access:public
verbose	memcached.h	/^    int verbose;$/;"	kind:member	struct:settings	access:public
version	t/binary-sasl.t	/^sub version {$/;"	kind:subroutine
version	t/binary.t	/^sub version {$/;"	kind:subroutine
vperror	util.c	/^void vperror(const char *fmt, ...) {$/;"	kind:function	signature:(const char *fmt, ...)
wait_for_early_second	t/expirations.t	/^sub wait_for_early_second {$/;"	kind:subroutine
wait_for_process	timedrun.c	/^static int wait_for_process(pid_t pid)$/;"	kind:function	file:	signature:(pid_t pid)
wait_for_thread_registration	thread.c	/^static void wait_for_thread_registration(int nthreads) {$/;"	kind:function	file:	signature:(int nthreads)
warm_lru_pct	memcached.h	/^    int warm_lru_pct; \/* percentage of slab space for WARM_LRU *\/$/;"	kind:member	struct:settings	access:public
wbuf	memcached.h	/^    char   *wbuf;$/;"	kind:member	struct:conn	access:public
wbytes	memcached.h	/^    int    wbytes;$/;"	kind:member	struct:conn	access:public
wcurr	memcached.h	/^    char   *wcurr;$/;"	kind:member	struct:conn	access:public
which	memcached.h	/^    short  which;   \/** which events were just triggered *\/$/;"	kind:member	struct:conn	access:public
worker_hang_lock	thread.c	/^static pthread_mutex_t worker_hang_lock;$/;"	kind:variable	file:
worker_libevent	thread.c	/^static void *worker_libevent(void *arg) {$/;"	kind:function	file:	signature:(void *arg)
write_and_free	memcached.c	/^static void write_and_free(conn *c, char *buf, int bytes) {$/;"	kind:function	file:	signature:(conn *c, char *buf, int bytes)
write_and_free	memcached.c	/^static void write_and_free(conn *c, char *buf, int bytes);$/;"	kind:prototype	file:	signature:(conn *c, char *buf, int bytes)
write_and_free	memcached.h	/^    void   *write_and_free; \/** free this memory after finishing writing *\/$/;"	kind:member	struct:conn	access:public
write_and_go	memcached.h	/^    enum conn_states  write_and_go;$/;"	kind:member	struct:conn	typeref:enum:conn::conn_states	access:public
write_bin_error	memcached.c	/^static void write_bin_error(conn *c, protocol_binary_response_status err,$/;"	kind:function	file:	signature:(conn *c, protocol_binary_response_status err, const char *errstr, int swallow)
write_bin_error	memcached.c	/^static void write_bin_error(conn *c, protocol_binary_response_status err,$/;"	kind:prototype	file:	signature:(conn *c, protocol_binary_response_status err, const char *errstr, int swallow)
write_bin_response	memcached.c	/^static void write_bin_response(conn *c, void *d, int hlen, int keylen, int dlen) {$/;"	kind:function	file:	signature:(conn *c, void *d, int hlen, int keylen, int dlen)
wsize	memcached.h	/^    int    wsize;$/;"	kind:member	struct:conn	access:public
xisspace	util.c	12;"	kind:macro	file:
